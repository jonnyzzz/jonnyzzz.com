<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2016-08-29T22:27:12+00:00</updated><id>/</id><title>Eugene Petrenko</title><subtitle>@jonnyzzz personal page and blog</subtitle><entry><title>Proxy calls between classloaders</title><link href="/blog/2016/08/29/classloader-proxy/" rel="alternate" type="text/html" title="Proxy calls between classloaders" /><published>2016-08-29T00:00:00+00:00</published><updated>2016-08-29T00:00:00+00:00</updated><id>/blog/2016/08/29/classloader-proxy</id><content type="html" xml:base="/blog/2016/08/29/classloader-proxy/">&lt;p&gt;There are so many tricky stories around on classloaders in Java. Classloading is a powerful technique from the 
one hand. From the other it’s the place where it so easy to make mistakes. Some are simply afraid using them.&lt;/p&gt;

&lt;p&gt;I solved a simple puzzle with isolating classes I want to share.&lt;/p&gt;

&lt;h1 id=&quot;backgrounds&quot;&gt;Backgrounds&lt;/h1&gt;

&lt;p&gt;There are integration tests in a project. Those integration tests starts several web applications, 
bind them together and to some black-box tests. 
The vital part of such tests is to provide a classpath isolation between test classes and classes 
of applications that are running.&lt;/p&gt;

&lt;p&gt;To start each of those web servers I use Jetty Embedded. Well, I load Jetty classes for each 
web application I start within a separate classloaders hierarchy. I like Jetty, but I want to 
isolate any side effects, thus loading it several times, thanks it’s tiny, is the way to go.&lt;/p&gt;

&lt;p&gt;All helper classes to start/stop/configure web applications forms an API that helps for a tests run.&lt;/p&gt;

&lt;p&gt;It turns out to be tricky to isolate those runner classes from a test classpath. From one hand we’d 
like to have an APIs available for test class to use, from the other hand, it is still required 
to make sure the classpath of web application, hence Jetty Embedded it not polluted with test module 
dependencies.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;Say we have and &lt;code&gt;API.jar&lt;/code&gt; and &lt;code&gt;IMPL.jar&lt;/code&gt;. We are looking on how to load the &lt;code&gt;IMPL.jar&lt;/code&gt; with a clean
classpath and still have a change to bind it to the &lt;code&gt;API.jar&lt;/code&gt; that is a part of some other huge classpath.&lt;/p&gt;

&lt;p&gt;The goal is to the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test framework uses &lt;code&gt;API.jar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;IMPL.jar also uses &lt;code&gt;API.jar&lt;/code&gt;, but it does not see any test-related classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is that it is test framework / test runner that loading test classes. We are unlikely to change that.
Otherwise we have to take care of test runners, IDEs, CI, debugging.&lt;/p&gt;

&lt;h1 id=&quot;obvious-solutions&quot;&gt;Obvious solutions&lt;/h1&gt;
&lt;p&gt;Load all classes within one JVM. This violates the task, but may be the easiest way. The future issue here 
can be a jar hell, if one has different libraries used in the application / tests or the loader.&lt;/p&gt;

&lt;p&gt;Another solution could be in using OSGi. It’s a complicated framework that uses security manager to isolate
classes visibility.&lt;/p&gt;

&lt;p&gt;Future solution with Java 9 modules is also a way to go. But for now, it’s too early.&lt;/p&gt;

&lt;h1 id=&quot;just-classloading&quot;&gt;Just Classloading&lt;/h1&gt;

&lt;p&gt;The most simple solution is to load classes with &lt;em&gt;child-first&lt;/em&gt; classloader. This is &lt;strong&gt;NOT&lt;/strong&gt; the way
to isolate dependencies, but at least this is the way to have IMPL.jar dependencies win on classloading.&lt;/p&gt;

&lt;p&gt;There are at least two things to take case of&lt;/p&gt;

&lt;h2 id=&quot;case-1--jvm-classes&quot;&gt;Case 1 : JVM classes&lt;/h2&gt;
&lt;p&gt;Child first classloaders should still load JVM classes first.&lt;/p&gt;

&lt;p&gt;It may turn out the classpath contains some classes that are now included into JVM. Those classes are 
still included into a package to provide a compatibility with older JVM versions. Those classes are 
simply ignored by the JVM when default classloading is used.&lt;/p&gt;

&lt;p&gt;It may generate tricky issues when child first classloader attempts to load wrong classes since 
those classes will likely register themselves in the OS.&lt;/p&gt;

&lt;p&gt;The solution here is the following. We crete a classloader:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jvmClassLoaderDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URLClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This classloader is the first one to check in the child classloader implementation. It is the easiest way I know
to delegate to the system classloader. The Classloader itself uses native method in order to delegate to it.&lt;/p&gt;

&lt;h2 id=&quot;case-2-resources&quot;&gt;Case 2: Resources&lt;/h2&gt;

&lt;p&gt;It’s so easy to implement child first classloader. It is also so easy to forget about resources. The child first
strategy must be implemented for resources too. Otherwise, it may break some libraries which uses resources.&lt;/p&gt;

&lt;p&gt;Finally classloading with child first delegation does not solve the initial problem. It does not allow to 
fully isolate test classes (e.g. test framework) from &lt;code&gt;IMPL.jar&lt;/code&gt; classes&lt;/p&gt;

&lt;h1 id=&quot;the-proxy-trick&quot;&gt;The Proxy Trick&lt;/h1&gt;

&lt;p&gt;The idea is to load &lt;code&gt;API.jar&lt;/code&gt; twice and than use to &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt; to bind interfaces part from 
tests classspath to implementations.&lt;/p&gt;

&lt;p&gt;A trick is to have yet another classloader with &lt;code&gt;null&lt;/code&gt; as parent. The loader classpath includes 
only &lt;code&gt;API.jar&lt;/code&gt;, &lt;code&gt;IMPL.jar&lt;/code&gt; and dependencies of &lt;code&gt;IMPL.jar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we create a &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt; to create an instance of an API interface that delegates
to the implementation class that is loaded by the other classloader. We are not able to cast here,
since we have &lt;code&gt;API.jar&lt;/code&gt; loaded twice.&lt;/p&gt;

&lt;p&gt;Unfortunately, this will only work when API interface methods uses JVM classes as parameters 
and return types. There are no common 
classloaders between &lt;code&gt;IMPL.jar&lt;/code&gt; and tests, thus ClassCastException will be thrown for other types.&lt;/p&gt;

&lt;h1 id=&quot;recursive-proxy-trick&quot;&gt;Recursive Proxy Trick&lt;/h1&gt;

&lt;p&gt;The last limitation can be solved by a bit more complicated trick of 3 steps&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a proxy for API interface&lt;/li&gt;
  &lt;li&gt;In the implementation, check all parameter types and proxy every parameter with non system classloader&lt;/li&gt;
  &lt;li&gt;In the implementation, proxy return values in opposite way&lt;/li&gt;
  &lt;li&gt;Apply the following proxies recursively if &lt;code&gt;API.jar&lt;/code&gt; interfaces are complex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach allows to use JVM classes and &lt;code&gt;API.jar&lt;/code&gt; interfaces between the bound. It will not work 
with classes, since it is the limitation of &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The overall trick is implemented as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * creates a proxy for an object obj loaded in sourceLoader hierarchy &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * that is visible in destLoader as destClass interface&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * assuming all methods of destClass are implemented in obj&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * exactly with same signature&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;threadClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getReturnType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getReturnType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;limitations&quot;&gt;Limitations&lt;/h1&gt;

&lt;p&gt;Current implementation works only with API interfaces. It does not allow sharing classes or enums. 
Enums from &lt;code&gt;API.jar&lt;/code&gt; can be easily supported be adding an explicit checking. 
Classes cannot be mapped this way. At least because it is not allowed in &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt;. 
From the other hand, it’s not clear how class state can be transferred at all.&lt;/p&gt;

&lt;h1 id=&quot;side-note&quot;&gt;Side Note&lt;/h1&gt;

&lt;p&gt;It may be necessary to change &lt;code&gt;Thread#contextClassloader&lt;/code&gt; to the right one before calling a 
method from different classloader. This trick makes dynamic classloading in libraries work 
correctly for some cases. Otherwise, there is a possibility that a class from another classpath
is created from &lt;code&gt;IMPL.jar&lt;/code&gt; code (say, via &lt;code&gt;Class#forName&lt;/code&gt; call)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I used the approach to implement integration tests that are running several web application 
instances within one JVM. All instances are now isolated from each other and from tests classpath.&lt;/p&gt;

&lt;p&gt;Running everything within one JVM helps to avoid issues with leaked processes or applications as well as
allows one to debug every application or even all applications easily!&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="java" /><category term="jvm" /><category term="classloaders" /><summary>There are so many tricky stories around on classloaders in Java. Classloading is a powerful technique from the 
one hand. From the other it’s the place where it so easy to make mistakes. Some are simply afraid using them.</summary></entry><entry><title>A DSL Workbench with Gradle and Kotlin</title><link href="/blog/2016/03/08/gradle-for-dsl/" rel="alternate" type="text/html" title="A DSL Workbench with Gradle and Kotlin" /><published>2016-03-08T00:00:00+00:00</published><updated>2016-03-08T00:00:00+00:00</updated><id>/blog/2016/03/08/gradle-for-dsl</id><content type="html" xml:base="/blog/2016/03/08/gradle-for-dsl/">&lt;p&gt;Easy to use. This is one of a main tasks to solve then new tool is created. For the world of DSL this
mostly mean it should be easy to a end-user to use the tool and to be able to run the tool within 
a continuous integration build easily.&lt;/p&gt;

&lt;p&gt;I found an elegant way to fiddle a DSL tasks into Gradle to make it easy to use. Next I’ll cover an example 
of &lt;a href=&quot;https://github.com/jonnyzzz/TeamCity2DSL&quot;&gt;TeamCity2DSL&lt;/a&gt; where I implemented this approach.&lt;/p&gt;

&lt;h2 id=&quot;domain-description&quot;&gt;Domain description&lt;/h2&gt;

&lt;p&gt;I will not cover the domain where &lt;a href=&quot;https://github.com/jonnyzzz/TeamCity2DSL&quot;&gt;TeamCity2DSL&lt;/a&gt; is 
applied. This deserves a dedicated post(s) (link will be included here). 
All we need to know about TeamCity2DSL here are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it provides a way to describe build settings with &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt; DSL&lt;/li&gt;
  &lt;li&gt;the DSL is executed to generate XML settings that TeamCity understands&lt;/li&gt;
  &lt;li&gt;it also generates DSL from existing XML settings from TeamCity&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here goes tricks one need to handle to use the TeamCity2DSL&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;download TeamCity2DSL classes&lt;/li&gt;
  &lt;li&gt;have Kotlin sources with DSL complied&lt;/li&gt;
  &lt;li&gt;allow an IDE to be used to author/edit DSL code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is vital to provide as easy as possible way to run those tasks. This is where our Gradle plugin is used.&lt;/p&gt;

&lt;h2 id=&quot;teamcity2dsl-gradle-plugin&quot;&gt;TeamCity2DSL Gradle Plugin&lt;/h2&gt;

&lt;p&gt;The plugin does the following set of tricks&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;it setups project repositories and dependencies&lt;/li&gt;
  &lt;li&gt;setups dependency on Kotlin runtime and compiler&lt;/li&gt;
  &lt;li&gt;declares &lt;code&gt;dsl2xml&lt;/code&gt; and &lt;code&gt;xml2dsl&lt;/code&gt; tasks&lt;/li&gt;
  &lt;li&gt;adds DSL generation output folder as Kotlin sources&lt;/li&gt;
  &lt;li&gt;introduces a dependency on compilation from &lt;code&gt;dsl2xml&lt;/code&gt; task&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;a-gradle-plugin-usage-example&quot;&gt;A Gradle Plugin Usage Example&lt;/h2&gt;

&lt;p&gt;This is &lt;code&gt;build.gradle&lt;/code&gt; script that is only required to have both TeamCity2DSL tasks (&lt;code&gt;dsl2xml&lt;/code&gt; and &lt;code&gt;xml2dsl&lt;/code&gt;) supported&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://dl.bintray.com/jonnyzzz/maven&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.teamcity.dsl:gradle-plugin:&amp;lt;PLUGIN VERSION&amp;gt;&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.teamcity.dsl&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;NOTE&lt;/em&gt;. Replace &lt;code&gt;&amp;lt;PLUGIN VERSION&amp;gt;&lt;/code&gt; with the latest version 
from the &lt;a href=&quot;https://bintray.com/jonnyzzz/maven/teamcity2dsl/view&quot;&gt;maven repository&lt;/a&gt;&lt;br /&gt;
&lt;em&gt;NOTE2&lt;/em&gt;. We also assume 
&lt;a href=&quot;https://confluence.jetbrains.com/display/TCD10/Storing+Project+Settings+in+Version+Control&quot;&gt;TeamCity project settings XML files&lt;/a&gt; 
are located in a &lt;code&gt;.teamcity&lt;/code&gt; folder.&lt;/p&gt;

&lt;h2 id=&quot;ide-usages&quot;&gt;IDE Usages&lt;/h2&gt;

&lt;p&gt;The project opens in IntelliJ IDEA. It detects all dependencies, Kotlin, source roots, library sources, etc. 
No specific requirements here. It &lt;em&gt;Just Works&lt;/em&gt;. And again an easy-to-use pattern is implemented.&lt;/p&gt;

&lt;h1 id=&quot;implementation-details&quot;&gt;Implementation Details&lt;/h1&gt;

&lt;p&gt;I use &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt; in &lt;a href=&quot;https://github.com/jonnyzzz/TeamCity2DSL&quot;&gt;TeamCity2DSL&lt;/a&gt;. 
The Gradle plugin is implemented with Kotlin as well.&lt;/p&gt;

&lt;p&gt;The first trick is the plugin itself declares a dependency on 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/using-gradle.html&quot;&gt;Kotlin Gradle plugin&lt;/a&gt;. The version of Kotlin
is selected from plugin dependency. This allows to avoid
explicit configuration for Kotlin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;java&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;kotlin&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The plugin includes DSL dependencies to itself into &lt;code&gt;compile&lt;/code&gt; configuration. Those jars are predefined and 
we make Gradle download them from Maven repository.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dsl2xml&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;dsl2xml&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;Dsl2Xml:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dsl2xml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependsOn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;classes&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we include all &lt;code&gt;buildScript&lt;/code&gt; block repositories into code repositories. This helps to avoid 
duplicates in repositories declaration.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;buildscript&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repositories&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To add extra source directory we use the following code (that depends on Gradle’s Java plugin)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Adding DSL path to Kotlin source set: ${settings.dslPath}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;convention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPlugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;JavaPluginConvention:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sourceSets&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Source sets: ${sourceSets.names}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sourceSets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dslPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We know Kotlin plugin checks Java output path for kotlin sources too. So we depend here only on Java plugin,
not on a private API of the Kotlin plugin.&lt;/p&gt;

&lt;p&gt;The task implementation uses a custom classloader (with &lt;code&gt;null&lt;/code&gt; parent) to avoid bothering Gradle’s tasks 
execution classpath. This is too complicated, from the other hand, to synchronize dependencies 
of TeamCity2DSL and Gradle. In the future we may consider running an external processes for better stability.&lt;/p&gt;

&lt;h1 id=&quot;finally&quot;&gt;Finally&lt;/h1&gt;

&lt;p&gt;We created a Gradle plugin that helps to use a Kotlin DSL.&lt;/p&gt;

&lt;p&gt;Everything that is related to the setup and execution of tasks is now packed as a Gradle Plugin 
leading to easy-to-use and easy-to-adopt solution.&lt;/p&gt;

&lt;p&gt;This pattern could be re-used for other applications.&lt;/p&gt;

&lt;p&gt;Feel free to try &lt;a href=&quot;https://github.com/jonnyzzz/TeamCity2DSL&quot;&gt;TeamCity2DSL&lt;/a&gt; for TeamCity project settings domain.&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="gradle" /><category term="kotlin" /><category term="dsl" /><category term="teamcity2dsl" /><summary>Easy to use. This is one of a main tasks to solve then new tool is created. For the world of DSL this
mostly mean it should be easy to a end-user to use the tool and to be able to run the tool within 
a continuous integration build easily.</summary></entry><entry><title>Using Gradle to download and run anything</title><link href="/blog/2016/03/06/gradle-all-maven-runner/" rel="alternate" type="text/html" title="Using Gradle to download and run anything" /><published>2016-03-06T00:00:00+00:00</published><updated>2016-03-06T00:00:00+00:00</updated><id>/blog/2016/03/06/gradle-all-maven-runner</id><content type="html" xml:base="/blog/2016/03/06/gradle-all-maven-runner/">&lt;p&gt;There are so many small tasks that as solved via a tiny programs. Most of such programs 
are to call several libraries to have an end-result. In the JVM world, most of those 
libraries are downloadable from a maven repository.&lt;/p&gt;

&lt;p&gt;It could be tricky in general to deliver dependencies for the script to run. There 
are several possible ways to solve it.&lt;/p&gt;

&lt;p&gt;I found an easy way to make Gradle download dependencies and run a script. 
This makes the scripting done with groovy too.&lt;/p&gt;

&lt;p&gt;Here goes an example to run an Amazon API and wrap it as Gradle task:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// List all dependencies for scripting here&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;com.amazonaws:aws-java-sdk:1.10.48&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Import what is necessay&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.auth.profile.ProfileCredentialsProvider&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.amazonaws.services.s3.AmazonS3Client&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;runScriptForAmazon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// The script source goes here!&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s3client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AmazonS3Client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ProfileCredentialsProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Working with endpoint: $s3client.endpoint&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The only trick here is that Gradle includes all script dependencies into classpath 
where tasks are loaded and executed.&lt;/p&gt;

&lt;p&gt;Even more, adding &lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradle Wrapper&lt;/a&gt; 
makes it runnable on eveny machine with JVM only. 
(A &lt;code&gt;Wrapper&lt;/code&gt; task can be used to have Gradle generate wrapper scripts)&lt;/p&gt;

&lt;p&gt;Happy scripting!&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="gradle" /><category term="maven" /><category term="hint" /><summary>There are so many small tasks that as solved via a tiny programs. Most of such programs 
are to call several libraries to have an end-result. In the JVM world, most of those 
libraries are downloadable from a maven repository.</summary></entry><entry><title>Kotlin XML Binding</title><link href="/blog/2016/01/06/kotlin-xml/" rel="alternate" type="text/html" title="Kotlin XML Binding" /><published>2016-01-06T00:00:00+00:00</published><updated>2016-01-06T00:00:00+00:00</updated><id>/blog/2016/01/06/kotlin-xml</id><content type="html" xml:base="/blog/2016/01/06/kotlin-xml/">&lt;p&gt;I like creating DSLs in &lt;a href=&quot;https://kotlinlang.org/&quot;&gt;Kotlin&lt;/a&gt;. It was fun to try creating a DSL for
XML data binding. Of course there are so many other libraries for JVM that implements it in the other way.&lt;/p&gt;

&lt;p&gt;I was looking for a way to use XPath like queries for data binding. I did not want to parse 
queries from raw strings. The DSL inherited some ideas from XPath queries.&lt;/p&gt;

&lt;p&gt;In Kotlin I used 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/delegated-properties.html&quot;&gt;Delegated Properties&lt;/a&gt;
to achieve better readability, avoid explicit type names for serialization/deserialization rules.&lt;/p&gt;

&lt;p&gt;Let’s consider an example. Say you have an XML:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;project&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;q&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;name&amp;gt;&lt;/span&gt;Foo&lt;span class=&quot;nt&quot;&gt;&amp;lt;/name&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;keys&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;A&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;B&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;C&lt;span class=&quot;nt&quot;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;   
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/keys&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/project&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Thanks to the &lt;a href=&quot;https://github.com/jonnyzzz/kotlin.xml.bind&quot;&gt;kotlin.xml.bind&lt;/a&gt;, you may 
parse it with the following DSL in Kotlin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JXML&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XAttribute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JXML&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XText&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;keys&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JXML&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;keys&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XElements&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;key&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XText&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JXML&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;parameters&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XAnyElements&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XSub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Sub&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;unknownElements&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JXML&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;XUnknown&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Kotlin compiler infers types for properties, so one should not write types at all. 
In the example above &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; properties are &lt;code&gt;String?&lt;/code&gt;, 
&lt;code&gt;keys&lt;/code&gt; is &lt;code&gt;List&amp;lt;String&amp;gt;?&lt;/code&gt;. &lt;code&gt;XAnyElements&lt;/code&gt; means result will be as collection, &lt;code&gt;XSub&lt;/code&gt; 
parses sub-elements as &lt;code&gt;XSub&lt;/code&gt; objects.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/jonnyzzz/kotlin.xml.bind&quot;&gt;kotlin.xml.bind&lt;/a&gt; provides serialization and deserialization.&lt;/p&gt;

&lt;h1 id=&quot;sources--binaries&quot;&gt;Sources / Binaries&lt;/h1&gt;
&lt;p&gt;Sources are on GitHub under Apache 2.0 license. Binaries are published to a maven repo.&lt;/p&gt;

&lt;p&gt;For more information, see &lt;a href=&quot;https://github.com/jonnyzzz/kotlin.xml.bind&quot;&gt;kotlin.xml.bind&lt;/a&gt; project on GitHub.&lt;/p&gt;

&lt;h1 id=&quot;implementation-details&quot;&gt;Implementation details&lt;/h1&gt;
&lt;p&gt;I use &lt;a href=&quot;http://www.jdom.org/&quot;&gt;JDOM&lt;/a&gt; to work with XML. DSL is done in separate module that does not depend on JDOM directly.&lt;/p&gt;

&lt;p&gt;You may find API declarations &lt;a href=&quot;https://github.com/jonnyzzz/kotlin.xml.bind/blob/master/api/src/main/kotlin/org/jonnyzzz/kotlin/xml/bind/XBind.API.kt&quot;&gt;here&lt;/a&gt;. 
For every DSL &lt;a href=&quot;https://en.wikipedia.org/wiki/Terminal_and_nonterminal_symbols&quot;&gt;grammar rule&lt;/a&gt; of the DSL I created an interface in Kotlin.&lt;/p&gt;

&lt;p&gt;The main trick is that expressions like &lt;code&gt;JXML / &quot;keys&quot; / XElements(&quot;key&quot;) / XText&lt;/code&gt; returns an object
that implements requirements of
&lt;a href=&quot;https://kotlinlang.org/docs/reference/delegated-properties.html&quot;&gt;Delegated Properties&lt;/a&gt;
.&lt;/p&gt;

&lt;p&gt;The library adds a tiny overhead on every object creation. So now to create an object (e.g. &lt;code&gt;Project&lt;/code&gt; class above)
it has to create a number of objects from the DSL that are used behind delegated properties. Reflections 
are still in use to scan available object properties too on serialization/deserialization.&lt;/p&gt;

&lt;p&gt;For tests I created yet another DSL to generate XML easily. 
You may find more details in &lt;a href=&quot;https://github.com/jonnyzzz/kotlin.xml.dsl&quot;&gt;kotlin.xml.dsl&lt;/a&gt; on GitHub. 
This is an example of unit test&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;@Test
public fun test_read_any_element_does_not_include_parsed() {
  class Data {
    var X by JXML / &amp;quot;x&amp;quot; / XUnknown
    var Y by JXML / &amp;quot;Y&amp;quot; / XUnknown
    var Z by JXML / XAnyElements / XUnknown
  }

  val el = jdom(&amp;quot;aaa&amp;quot;) {
    element(&amp;quot;x&amp;quot;) { text(&amp;quot;yohoho&amp;quot;)}
    element(&amp;quot;Y&amp;quot;) { text(&amp;quot;123&amp;quot;)}
    element(&amp;quot;z&amp;quot;) { text(&amp;quot;www&amp;quot;)}
    element(&amp;quot;p&amp;quot;) { text(&amp;quot;www&amp;quot;)}
  }

  val d : Data = JDOM.load(el , Data::class.java)

  Assert.assertEquals(d.Z?.size, 2)
  Assert.assertEquals(d.Z?.get(0)?.name, &amp;quot;z&amp;quot;)
  Assert.assertEquals(d.Z?.get(1)?.name, &amp;quot;p&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I use &lt;a href=&quot;https://gradle.org/&quot;&gt;Gradle&lt;/a&gt; as project model now. 
Artifacts are deployed to &lt;a href=&quot;https://bintray.com/jonnyzzz/maven&quot;&gt;Bintray&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;future-work&quot;&gt;Future Work&lt;/h1&gt;
&lt;p&gt;The ides of the DSL are easily mapped to JSON too. So it’s possible to read/write/update JSON files in the same way&lt;br /&gt;
Get rid of reflections and use &lt;a href=&quot;https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects&quot;&gt;Companion Objects&lt;/a&gt;&lt;br /&gt;
Support other XML implementations, not only JDOM&lt;br /&gt;
Improve, finalize and document binding DSL&lt;br /&gt;
Invite contributors!&lt;br /&gt;
Have more fun!&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="kotlin" /><category term="xml" /><category term="kotlin.xml.bind" /><category term="jdom" /><category term="dsl" /><category term="gradle" /><category term="teamcity2dsl" /><summary>I like creating DSLs in Kotlin. It was fun to try creating a DSL for
XML data binding. Of course there are so many other libraries for JVM that implements it in the other way.</summary></entry><entry><title>Git in Docker</title><link href="/blog/2015/11/24/DockerGit/" rel="alternate" type="text/html" title="Git in Docker" /><published>2015-11-24T00:00:00+00:00</published><updated>2015-11-24T00:00:00+00:00</updated><id>/blog/2015/11/24/DockerGit</id><content type="html" xml:base="/blog/2015/11/24/DockerGit/">&lt;p&gt;Some uses &lt;a href=&quot;https://docker.com&quot;&gt;Docker&lt;/a&gt; to run builds inside.&lt;/p&gt;

&lt;p&gt;Some uses it to run tests inside. 
Today I gonna cover my case, where I implement a command that runs inside a Docker container 
and call it thousands of times during &lt;a href=&quot;https://en.wikipedia.org/wiki/Continuous_integration&quot;&gt;CI&lt;/a&gt; 
integration tests build.&lt;/p&gt;

&lt;h2 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h2&gt;
&lt;p&gt;A project I work on uses &lt;a href=&quot;http://git-scm.com&quot;&gt;Git client&lt;/a&gt;. 
There are a number of Git client 
version available. My need was to create integration tests 
to make sure project works with a given Git client versions.&lt;/p&gt;

&lt;p&gt;Tests has to be implemented for Windows and Linux. Popular Git client 
versions should be covered.
For Windows I simply download binaries.
For Linux this did not worked well. Too tricky to use public packages. 
Let’s compile Git from sources.&lt;/p&gt;

&lt;h2 id=&quot;building-git-client&quot;&gt;Building Git Client&lt;/h2&gt;
&lt;p&gt;Git client is easy to checkout and compile. I use the following
snippet for that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  
&lt;span class=&quot;nv&quot;&gt;git_version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;a version of Git client to use&amp;gt;
&lt;span class=&quot;nv&quot;&gt;git_sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/gitz/src/git-${git_version}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;git_bin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/gitz/bin/git-${git_version}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;git_sh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;/git-${git_version}.sh&amp;quot;&lt;/span&gt;

mkdir -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sources&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
mkdir -p &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_bin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

wget -O &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sources&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/git.tar.gz https://www.kernel.org/pub/software/scm/git/git-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.tar.gz
tar xzf &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sources&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/git.tar.gz -C &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sources&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;pushd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sources&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/git-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_version&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
make &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_bin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; all &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;nv&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_bin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; install
&lt;span class=&quot;nb&quot;&gt;popd&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;#!/bin/bash&amp;#39;&lt;/span&gt; &amp;gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sh&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;GIT_EXEC_PATH=${git_bin}/libexec/git-core PATH=${git_bin}/bin:\$PATH GITPERLLIB=${git_bin}/perl/blib/lib ${git_bin}/bin/git \&amp;quot;\$@\&amp;quot;&amp;quot;&lt;/span&gt; &amp;gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sh&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
chmod a+rx &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;git_sh&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above generates a starter script for Git client (e.g. &lt;code&gt;/git-1.7.2.sh&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Git build also requires a set of packages to be installed on the OS (for my case on CentOS)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;yum update -y
yum groupinstall -y &lt;span class=&quot;s2&quot;&gt;&amp;quot;Development tools&amp;quot;&lt;/span&gt;
yum install -y tar wget m4
yum install -y autoconf
yum install -y gcc
yum install -y perl-ExtUtils-MakeMaker
yum install -y curl-devel expat-devel gettext-devel openssl-devel zlib-devel
yum clean all&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, building Git client&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;takes time&lt;/li&gt;
  &lt;li&gt;resources waste to re-build&lt;/li&gt;
  &lt;li&gt;requires
    &lt;ul&gt;
      &lt;li&gt;OS package install permissions  &lt;br /&gt;
=&amp;gt; (aka &lt;code&gt;root&lt;/code&gt; access to build machine),  &lt;br /&gt;
or&lt;/li&gt;
      &lt;li&gt;pre-configured CI build machines &lt;br /&gt;
=&amp;gt; (aka eternal pain to update machine packages)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How can we re-use Git binaries and have Git client available with no
extra packages, build machined pre-configuration and other maintenance 
activities?&lt;/p&gt;

&lt;h2 id=&quot;build-git-client-in-docker-container&quot;&gt;Build Git Client in Docker Container&lt;/h2&gt;
&lt;p&gt;What if I use Docker to build Git from binaries for all version I need?&lt;/p&gt;

&lt;p&gt;Well, benefits of Docker image and process are&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;isolation&lt;/li&gt;
  &lt;li&gt;recoverable configuration&lt;/li&gt;
  &lt;li&gt;no side-effects&lt;/li&gt;
  &lt;li&gt;no infrastructure maintenance costs&lt;/li&gt;
  &lt;li&gt;repeatable configuration&lt;/li&gt;
  &lt;li&gt;the only one requirement to have Docker installed on the CI machine&lt;/li&gt;
  &lt;li&gt;nearly no root access required (effectively Docker command means root access)&lt;/li&gt;
  &lt;li&gt;no dependency on CI machine packages / environment&lt;/li&gt;
  &lt;li&gt;binaries re-use via Docker image&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I created a &lt;code&gt;Dockerfile&lt;/code&gt; where I compile selected versions of Git client 
from sources and prepare bootstrap scripts (as shown above). All building 
tasks were put in one &lt;code&gt;RUN&lt;/code&gt; command to avoid too many 
&lt;a href=&quot;https://github.com/docker/docker/issues/1171&quot;&gt;layers&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Docker image I build is only updated to include new version of Git client.
This is done quite rarely. The only requirement for CI machine is Docker.&lt;/p&gt;

&lt;p&gt;Now in my CI builds I can start a Docker container form a pre-built image 
with required Git client version. This is the way to run repeatable
integration tests.&lt;/p&gt;

&lt;p&gt;But, now I need to make my tests run inside the same container. This 
is complicated…&lt;br /&gt;
and there are some packages were (not yet) installed in the container…&lt;/p&gt;

&lt;h2 id=&quot;calling-docker-container-from-a-script&quot;&gt;Calling Docker Container from a Script&lt;/h2&gt;
&lt;p&gt;The only requirement from integration tests is to have &lt;code&gt;git&lt;/code&gt; command of given version in &lt;code&gt;PATH&lt;/code&gt;.
Let’s wrap Docker container call into a bash script than!&lt;/p&gt;

&lt;p&gt;First of I created a script like that (see &lt;a href=&quot;https://docs.docker.com/engine/reference/run/&quot;&gt;docker run docs&lt;/a&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker run GIT_CLIENT_IMAGES &lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, it did not work, so I added volume with current directory: &lt;code&gt;-v $(pwd):/$(pwd)&lt;/code&gt; and switched working 
directory in Docker to it via &lt;code&gt;-w /$(pwd)&lt;/code&gt;.&lt;br /&gt;
NOTE. This will not work if our &lt;code&gt;git&lt;/code&gt; command is executed from non repository checkout root.&lt;/p&gt;

&lt;p&gt;Included &lt;code&gt;--rm&lt;/code&gt; to avoid garbage from finished containers.&lt;/p&gt;

&lt;p&gt;Added &lt;code&gt;-i&lt;/code&gt; to have the command run interactively.&lt;/p&gt;

&lt;p&gt;The only issue now was that all files changed or created in container were owned by root
(because in Docker container I was running it under root and owners and permissions are transparent here)&lt;/p&gt;

&lt;p&gt;There are two solutions for that&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;run &lt;code&gt;chown&lt;/code&gt; after each call&lt;/li&gt;
  &lt;li&gt;use same user in container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Running &lt;code&gt;chown&lt;/code&gt; is at least starting another process, dealing with exit codes and errors. I preferred 
the second option. The &lt;em&gt;same user&lt;/em&gt; means a user that has same &lt;a href=&quot;https://en.wikipedia.org/wiki/User_identifier&quot;&gt;UID&lt;/a&gt; 
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Group_identifier&quot;&gt;GID&lt;/a&gt;. 
I added &lt;code&gt;-u $(id -u):$(id -g)&lt;/code&gt; arguments.&lt;/p&gt;

&lt;p&gt;Finally, I implemented version selector as environment variable. There are also a number 
of &lt;a href=&quot;https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables&quot;&gt;Git specific environment variables&lt;/a&gt;
that are to be sent to the container. This is done via &lt;code&gt;--env&lt;/code&gt; arguments of Docker run command.&lt;/p&gt;

&lt;p&gt;Now I have&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a pre-built Docker image with all Git clients&lt;/li&gt;
  &lt;li&gt;a script that pretends to be &lt;code&gt;git&lt;/code&gt; command and delegates calls into a Docker container&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Having one dependency is better that having two. Let’s put it all together…&lt;/p&gt;

&lt;h2 id=&quot;putting-all-together&quot;&gt;Putting all together&lt;/h2&gt;
&lt;p&gt;It’s clear the start script depends on container. I put the script inside container. 
Default container command prints the &lt;code&gt;git&lt;/code&gt; script to STDOUT.&lt;/p&gt;

&lt;p&gt;The Git client setup bash script turned to be as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;docker pull GIT_CLIENT_IMAGE
docker run --rm GIT_CLIENT_IMAGE 2&amp;gt;/dev/null &amp;gt;git
chmod +x git
&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/git:&lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;PATH

&lt;span class=&quot;nv&quot;&gt;GIT_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;a version of Git client to use&amp;gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;GIT_VERSION

&lt;span class=&quot;c&quot;&gt;#call integration tests&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Host-OS independent way to run integration tests with different Git client versions.&lt;/li&gt;
  &lt;li&gt;It builds each Git client version only once.&lt;/li&gt;
  &lt;li&gt;Integration tests environment is not polluted with Git client build dependencies.&lt;/li&gt;
  &lt;li&gt;Can easily switch Linux distributive&lt;/li&gt;
  &lt;li&gt;Minimum overhead&lt;/li&gt;
  &lt;li&gt;Constant time Git client switch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;How it finally works. Custom &lt;code&gt;git&lt;/code&gt; script is added to &lt;code&gt;PATH&lt;/code&gt;. 
For every call the script starts a fresh Docker container to perform
the call. Git client of specified version is executed in it.
STD streams and signals are bound transparently.
Container is terminated and disposed at the end. 
Integration tests calls &lt;code&gt;git&lt;/code&gt; command hundreds times.&lt;/p&gt;

&lt;h2 id=&quot;real-life&quot;&gt;Real Life&lt;/h2&gt;
&lt;p&gt;I implemented the following infrastructure for my project. I use in-house 
Docker registry to host latest Git clients image. It uses default Linux build machine
image and it does not require specific permissions or packages, but Docker.&lt;/p&gt;

&lt;p&gt;Initial implementation was done in beginning of 2015, in the blog post I omitted 
some implementation details that are now seems to be done easier.&lt;/p&gt;

&lt;p&gt;Currently I run tests for up to 10 versions of Git client. My observations 
shows the slowdown about 2x in comparison with fully native Git client on Linux.
Frankly, I have not yet tried to optimize performance of my scripts.&lt;/p&gt;

&lt;p&gt;Containerize with Pleasure!&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="docker" /><category term="git" /><category term="integration tests" /><category term="ci" /><summary>Some uses Docker to run builds inside.

Some uses it to run tests inside. 
Today I gonna cover my case, where I implement a command that runs inside a Docker container 
and call it thousands of times during CI 
integration tests build.</summary></entry><entry><title>New Site. New Domain. New Technologies</title><link href="/blog/2015/11/22/MoveMoveMove/" rel="alternate" type="text/html" title="New Site. New Domain. New Technologies" /><published>2015-11-22T00:00:00+00:00</published><updated>2015-11-22T00:00:00+00:00</updated><id>/blog/2015/11/22/MoveMoveMove</id><content type="html" xml:base="/blog/2015/11/22/MoveMoveMove/">&lt;p&gt;Some days ago I realized it’s possible to have mostly any web site 
that is running behind &lt;a href=&quot;https://pages.github.com&quot;&gt;GitHub pages&lt;/a&gt;.
Finally I decided to update my current blog and to have a site on domain root.&lt;/p&gt;

&lt;p&gt;First of I started with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; instructions. 
There were a number of tricks and recommendation 
on GitHub on how to get it running in GitHub compatible way. I decided to
have &lt;em&gt;setup-as-a-code&lt;/em&gt;, to avoid complicated and no-repeatable configuration steps.
I found &lt;a href=&quot;https://github.com/jekyll/docker&quot;&gt;jekyll docker&lt;/a&gt;
and started using it on Mac OS. To run docker is used 
&lt;a href=&quot;https://docs.docker.com/machine/&quot;&gt;Docker Machine&lt;/a&gt;
The only trick were to open extra port in Virtual Box, and to docker-machine’s IP address to open site preview.
&lt;a href=&quot;https://github.com/jonnyzzz/jonnyzzz.com.jekyll/blob/master/jekyll.sh&quot;&gt;This&lt;/a&gt; is the script I use to run 
the container.&lt;/p&gt;

&lt;p&gt;Sample site was created. &lt;a href=&quot;https://help.github.com/articles/adding-a-cname-file-to-your-repository&quot;&gt;CNAME&lt;/a&gt;
was added. DNS was updated.&lt;/p&gt;

&lt;p&gt;Initially I created a repository called &lt;code&gt;jonnyzzz.github.io&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt; branch. Next I changed it 
to &lt;code&gt;jonnyzzz.com&lt;/code&gt; and put the site into &lt;code&gt;gh-pages&lt;/code&gt; branch. The second option looks better to me as I have 
several domains.&lt;/p&gt;

&lt;p&gt;I used &lt;a href=&quot;http://import.jekyllrb.com/docs/blogger&quot;&gt;jekyll-import&lt;/a&gt; to import my older blog posts
from Blogger.com. It was quite easy to run in my jekyll docker container. But I lost code formatting
in imported posts. Re-formatted snippets manually.&lt;/p&gt;

&lt;p&gt;Next I was looking for a suitable theme for jekyll pages. It was 
&lt;a href=&quot;https://github.com/mmistakes/so-simple-theme&quot;&gt;so-simple-theme&lt;/a&gt;
that I used and tuned. I event forked theme repository to have a change to 
apply there updates to my pages.&lt;/p&gt;

&lt;p&gt;Next I added cookie policy warning via &lt;a href=&quot;http://silktide.com/cookieconsent&quot;&gt;Silktide&lt;/a&gt;. 
Really simple to use and it works well&lt;/p&gt;

&lt;p&gt;Created favicons via &lt;a href=&quot;http://www.favicon-generator.org&quot;&gt;http://www.favicon-generator.org/&lt;/a&gt;. Had to install 
Gimp via Homebrew to crop avatar image.&lt;/p&gt;

&lt;p&gt;I uploaded sources to &lt;code&gt;gh-pages&lt;/code&gt; and it failed inside GitHub pages jekyll run. With only a 
notification that it failed. No logs or hints were there from GitHub error. I gave it up.&lt;/p&gt;

&lt;p&gt;I moved sources to &lt;code&gt;master&lt;/code&gt; branch and made &lt;code&gt;_site&lt;/code&gt; folder (a default generator output folder) to be 
another checkout repo checkout of &lt;code&gt;gh-pages&lt;/code&gt; branch. Now I commit sources and generated site together. 
I also added &lt;code&gt;.nojekyll&lt;/code&gt; file to site, to make sure GitHub’s jekyll is disabled.&lt;/p&gt;

&lt;p&gt;Hadi &lt;a href=&quot;http://hadihariri.com/2014/01/04/using-webstorm-to-maintain-a-jekyll-site&quot;&gt;wrote&lt;/a&gt; a 
guide on how to write Jekyll posts. I followed it and start using &lt;a href=&quot;https://www.jetbrains.com/webstorm/&quot;&gt;WebStorm&lt;/a&gt;.
So now I have two VCS Roots in the project to commit to. The &lt;code&gt;_site&lt;/code&gt; is updated automatically via running &lt;code&gt;jekyll server&lt;/code&gt; in Docker.&lt;/p&gt;

&lt;p&gt;HTTPS is implemented via &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;cloudflare.com&lt;/a&gt;. It was easy to install 
and nice to use. But you’ll need to change domain name servers to CloudFlare’s.&lt;/p&gt;

&lt;p&gt;Finally, I created yet another stub site to implement redirect from &lt;code&gt;jonnyzzz.name&lt;/code&gt;. In some weeks
I’ll create similar redirect from &lt;code&gt;blog.jonnyzzz.name&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;Now I can author posts in Markdown. I like it! Welcome to the new site and blog.&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="docker" /><category term="jekyll" /><category term="domain" /><category term="virtual-environment" /><category term="weekend" /><summary>Some days ago I realized it’s possible to have mostly any web site 
that is running behind GitHub pages.
Finally I decided to update my current blog and to have a site on domain root.</summary></entry><entry><title>TeamCity.AntMessages</title><link href="/blog/2015/05/07/teamcityantmessages/" rel="alternate" type="text/html" title="TeamCity.AntMessages" /><published>2015-05-07T00:50:00+00:00</published><updated>2015-05-07T00:50:00+00:00</updated><id>/blog/2015/05/07/teamcityantmessages</id><content type="html" xml:base="/blog/2015/05/07/teamcityantmessages/">&lt;p&gt;You may know about &lt;a
  href=&quot;https://confluence.jetbrains.com/display/TCD9/Build+Script+Interaction+with+TeamCity&quot;&gt;Service Messages&lt;/a&gt;
  that helps to integrate build with &lt;a href=&quot;http://jetbrains.com/TeamCity?jonnyzzz&quot;&gt;TeamCity&lt;/a&gt;. Some
  time ago I blogged about &lt;a href=&quot;/blog/2012/12/17/teeamcityservicemessages-v30/&quot;&gt;Service
    Messages Tasks for C#&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The &lt;a
  href=&quot;https://github.com/jonnyzzz/TeamCity.AntMessages&quot;&gt;TeamCity.AntMessages&lt;/a&gt; Ant task library
  contains necessary tasks for Ant! The usage is the follows: &lt;/p&gt;
&lt;script type=&quot;syntaxhighlighter&quot;
        class=&quot;brush:xml&quot;&gt;&lt;![CDATA[
&lt;project basedir=&quot;.&quot; default=&quot;test&quot;&gt;
    &lt;!-- here goes include --&gt;
    &lt;taskdef
            resource=&quot;teamcity-messages.xml&quot;&gt;
        &lt;classpath&gt;
            &lt;fileset dir=&quot;./build/libs-release&quot;
                     includes=&quot;TeamCity.AntMessages-*.jar&quot;/&gt;
        &lt;/classpath&gt;
    &lt;/taskdef&gt;

    &lt;!-- usage examples --&gt;
    &lt;target
            name=&quot;test&quot;&gt;
        &lt;teamcity-build-number number=&quot;222&quot;/&gt;
        &lt;teamcity-artifacts artifacts=&quot;222&quot;/&gt;
        &lt;teamcity-service-message
                name=&quot;name&quot; value=&quot;value&quot;/&gt;
        &lt;teamcity-service-message name=&quot;name&quot;&gt;
            &lt;param name=&quot;aaa&quot; value=&quot;vvv&quot;/&gt;
            &lt;param name=&quot;aa2a&quot; value=&quot;v2vv&quot;/&gt;
        &lt;/teamcity-service-message&gt;
    &lt;/target&gt;
&lt;/project&gt;]]&gt;
&lt;/script&gt;
&lt;h2&gt;Download and use&lt;/h2&gt;The sources and issue tracker is on &lt;a
  href=&quot;https://github.com/jonnyzzz/TeamCity.AntMessages&quot;&gt;Here&lt;/a&gt;Binaries can be downloaded from &lt;a
  href=&quot;https://github.com/jonnyzzz/TeamCity.AntMessages/releases/tag/release-0.1&quot;&gt;here&lt;/a&gt;License is MIT.
Some dependencies peaces are Apache 2.0</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="free-time" /><category term="opensource" /><category term="teamcity plugin" /><category term="teamcity" /><category term="teamcity api" /><category term="ant" /><category term="servicemessage" /><category term="java" /><category term="TeamCity.AntMessages" /></entry><entry><title>TeamCity.Node Update</title><link href="/blog/2014/11/02/teamcitynode-update/" rel="alternate" type="text/html" title="TeamCity.Node Update" /><published>2014-11-02T19:20:00+00:00</published><updated>2014-11-02T19:20:00+00:00</updated><id>/blog/2014/11/02/teamcitynode-update</id><content type="html" xml:base="/blog/2014/11/02/teamcitynode-update/">&lt;h2&gt;Updates&lt;/h2&gt;

&lt;p&gt;
Recently I closed the most voted feature of the plugin: Gulp support.
&lt;/p&gt;

&lt;p&gt;
  Finally we now have &lt;strong&gt;&lt;a href=&quot;http://gulpjs.com/&quot;&gt;Gulp&lt;/a&gt;&lt;/strong&gt;
  runner support in the
  &lt;a href=&quot;https://github.com/jonnyzzz/TeamCity.Node&quot;&gt;TeamCity.Node&lt;/a&gt; plugin.
&lt;/p&gt;

&lt;h2&gt;Downloading TeamCity.Node&lt;/h2&gt;

This plugin is provided under Apache 2.0 license. Sources (in Kotlin) are found on
&lt;a href=&quot;https://github.com/jonnyzzz/TeamCity.Node&quot;&gt;GitHub&lt;/a&gt;.
You may download compiled build from
&lt;a href=&quot;https://teamcity.jetbrains.com/viewType.html?buildTypeId=bt434&quot;&gt;TeamCity&lt;/a&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="teamcity plugin" /><category term="gulp" /><category term="javascript" /><category term="teamcity" /><category term="teamcity api" /><category term="feature" /><category term="kotlin" /><category term="grunt" /><category term="github" /><category term="java" /><category term="TeamCity.Node" /></entry><entry><title>Spring Framework Component Container Decomposition</title><link href="/blog/2014/05/14/spring-framework-component-container/" rel="alternate" type="text/html" title="Spring Framework Component Container Decomposition" /><published>2014-05-14T20:30:00+00:00</published><updated>2014-05-14T20:30:00+00:00</updated><id>/blog/2014/05/14/spring-framework-component-container</id><content type="html" xml:base="/blog/2014/05/14/spring-framework-component-container/">&lt;p&gt;
  In this post I explain how one could split one huge components container into a number
  of smaller ones
&lt;/p&gt;

&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;
  Spring Framework Component Container (or Spring Framework IoC Container) is an implementation of the
  &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Inversion_of_control&quot;&gt;Inversion of Control&lt;/a&gt;&lt;/em&gt; principle.
  This is also known as
  &lt;em&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Dependency_injection&quot;&gt;Dependency Injection&lt;/a&gt;&lt;/em&gt;.
  So a typical application is represented as a number of components (beans,
  services; read java classes) with dependencies (either declared or auto discovered). The Component Container uses
  an .xml configuration files and/or Annotations on java classes. For more details you may refer to the
  &lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/reference/beans.html&quot;&gt;Spring Framework documentation&lt;/a&gt;
&lt;/p&gt;
&lt;h2&gt;Problem statement&lt;/h2&gt;
&lt;p&gt;Say you have an Application that uses IoC. It is now very easy to
  add new components and to pass mostly every component as the dependency for the first one. But in the long run it
  could lead to several issues.
&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;first&lt;/strong&gt; one is that most of
  components tend to depend transitively from most of the other components. So the Application turns into a knot of
  undetachable dependencies. So unit tests transform into complex integration tests, where the most of the
  Application components has to be created.
&lt;/p&gt;
&lt;p&gt;
  The &lt;strong&gt;second&lt;/strong&gt;problem is
  with library dependencies classpath. One could easily use library A, while library B is used in the other part of
  the Application. Say A depends on C v1.0 and B depends on C v2.0. Here is the problem. The ideal solution is to
  remove A and B libraries from main classpath and load each separately to get rid of the need of resolving an ideal
  version of the library C.
&lt;/p&gt;
&lt;h2&gt;Splitting components&lt;/h2&gt;
&lt;p&gt;How could we solve those
  issues? My answer is to split the application container into a number of sub containers. So we could hide some
  component implementation details from the other components. We split one container into the root container and a
  number of sub containers. The split would provide enough isolation both for component dependencies and for
  classpaths.
&lt;/p&gt;
&lt;p&gt;The split process could be done in the following way. We take one big component
  (facade) and move all it's implementation details into a sub container. Iteratively we may hide all huge
  components implementations from the rest of the application and thus resolve the &lt;em&gt;first&lt;/em&gt; issue.
&lt;/p&gt;
&lt;p&gt;Speaking of the library dependencies. Each of sub container could load classes from extended
  classpath in a dedicated classloader. This helps to resolve the &lt;em&gt;second&lt;/em&gt; issue.
&lt;/p&gt;
&lt;p&gt;
  There
  are another solutions for dependency isolation. For example, you may take a look at
  &lt;a href=&quot;http://en.wikipedia.org/wiki/OSGi&quot;&gt;OSGi&lt;/a&gt; framework. The solution below would be a much easier
  and it is only up to you what solution to consider.
&lt;/p&gt;
&lt;h2&gt;Implementation&lt;/h2&gt;
&lt;p&gt;
  Say you decided to split one component container in a number of sub containers. There is the list of tasks to implement:
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create
    a sub container with parent of a root container (A)
  &lt;/li&gt;
  &lt;li&gt;Make sub container scan classes from a
    specific classloader (B)
  &lt;/li&gt;
  &lt;li&gt;Allow components from a sub container to depend from components from
    the root container (C)
  &lt;/li&gt;
  &lt;li&gt;Declaratively export some components from a sub container to root
    container (D)
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Simple Spring Sub Container (A, C)&lt;/h3&gt;

&lt;p&gt;A child Spring container (context) is created in the following way. Call the constructor of a
  &lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.0.M3/reference/html/ch05s07.html&quot;&gt;ClassPathXmlApplicationContext&lt;/a&gt;.
  Pass current container (from the
  &lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/api/org/springframework/context/ApplicationContextAware.html?is-external=true&quot;&gt;ApplicationContextAware&lt;/a&gt;
  interface implementation), specify configuration resources and the name.
&lt;/p&gt;
&lt;p&gt;
  The created sub
  container includes parent container components in the dependencies resolution.
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;NOTE&lt;/strong&gt;.
  Sub container configuration resources must &lt;strong&gt;NOT&lt;/strong&gt; overlap with configuration resources
  of any other container in the application. Otherwise sub container may re-load all components from the application
  and crash.
&lt;/p&gt;
&lt;p&gt;I recommend to consider &lt;em&gt;classpath*:META-INF/app-root-configuration-*.xml&lt;/em&gt;
  for the root context and &lt;em&gt;classpath*:META-INF/app-child-configuration-*.xml&lt;/em&gt; for a sub
  container to avoid the possible clash. Same applies for classes scan for annotations as well
&lt;/p&gt;
&lt;p&gt;
  We put a sub container creation code into the root container component. The component implements
  &lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/api/org/springframework/beans/factory/InitializingBean.html&quot;&gt;InitializingBean&lt;/a&gt;
  to trigger sub container start.
&lt;/p&gt;
&lt;h3&gt;Using Custom Classloader (B)&lt;/h3&gt;

&lt;p&gt;
  Spring Framework provides API to specify custom classloader for the container. This is done in the following way:
&lt;/p&gt;
&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush:java&quot;&gt;&lt;![CDATA[

final subLoader = createSubContextClassLoader(...);
new ClassPathXmlApplicationContext(..., myParentApplicationContext) {
  @Override
  protected void initBeanDefinitionReader(XmlBeanDefinitionReader reader) {
    super.initBeanDefinitionReader(reader);

    //here we set the right classloader
    reader.setBeanClassLoader(subLoader);
    setClassLoader(subLoader);
  }
};
]]&gt;&lt;/script&gt;
&lt;h3&gt;Exporting components to the root container (D)&lt;/h3&gt;
&lt;p&gt;There is an expected need to be able
  to export some component implementations back to the root container. This could be easily done via
  &lt;a href=&quot;http://docs.spring.io/spring/docs/3.0.x/reference/beans.html#beans-beanfactory&quot;&gt;BeanFactory&lt;/a&gt;.
  What we need is to declare a &lt;strong&gt;non generic&lt;/strong&gt; getter methods in the sub container creating
  component. The getter methods should be registered as factory methods in the root container (in .xml file or via
  annotations). For the getter implementation you may simply call a wrapping method with explicit type over
  &lt;em&gt;ApplicationContext#&amp;lt;T&amp;gt;getBean(Class&amp;lt;T&amp;gt; t) &lt;/em&gt;.
&lt;/p&gt;
&lt;p&gt;
  &lt;strong&gt;NOTE&lt;/strong&gt;. Using a generic factory method may leave the
  container without knowing the exact type of the component. So application may randomly fail to resolve a component
  dependencies in the container. That is only why I recommend to avoid generic factory methods for the scenario.
&lt;/p&gt;
&lt;h2&gt;Usage example&lt;/h2&gt;
&lt;p&gt;
  I decided to implement the pattern in the new application I
  started. The main reason for me was to split the application classpath in to several modules to hide nasty
  dependencies in them. I realised I need to avoid the dependency resolution hell.
&lt;/p&gt;
&lt;p&gt;
  Thanks to the
  pattern I split my application into several logical sub containers. This helped me to avoid dependencies hell. The
  pattern also forced me to hide implementation details. I have several components in the root container that are
  implemented by the number of internal components in sub containers. And each sub container depends on a number of
  libraries with intersecting transitive dependencies sets.
&lt;/p&gt;
&lt;p&gt;The definition of a sub-container in the application is the following:&lt;/p&gt;

&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush:java&quot;&gt;&lt;![CDATA[
@Component
public class SubContext extends SubContextLoader {
  public SubContext() {
    super(
      /*name:*/
      &quot;Sub Context&quot;,
      /*classpath dir:*/
      &quot;/WEB-INF/sub&quot;,
      /*spring config: */
      &quot;classpath*:/META-INF/vcs-service-hub-settings*.xml&quot;);
  }

  /** A SubFilter component implementation for
   ** the root container that created/loaded
   ** via sub container
   **/
  @Bean
  public SubFilter getFilterComponent() {
    return myApplicationContext.getBean(SubFilter.class);
  }
}
]]&gt;&lt;/script&gt;
&lt;p&gt;
  To add the next sub container I only need to add a similar class to the root container. And that is it!
&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;
  Crazy, but one may use this technique recursively to provide
  even better separation and/or interface/implementation design.
&lt;/p&gt;
&lt;p&gt;
  Hope I covered all details.
  Please let me know if you'd like me to cover some gaps
&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="IoC" /><category term="JRE" /><category term="Dependency Injection" /><category term="DI" /><category term="Component" /><category term="Spring Framework" /><category term="Spring IoC" /><category term="classloaders" /><category term="Spring" /><category term="Component Container" /><category term="java" /><summary>In this post I explain how one could split one huge components container into a number
  of smaller ones</summary></entry><entry><title>Named Stack Frames for the JVM</title><link href="/blog/2014/04/26/named-stack-frames-for-jvm/" rel="alternate" type="text/html" title="Named Stack Frames for the JVM" /><published>2014-04-26T18:49:00+00:00</published><updated>2014-04-26T18:49:00+00:00</updated><id>/blog/2014/04/26/named-stack-frames-for-jvm</id><content type="html" xml:base="/blog/2014/04/26/named-stack-frames-for-jvm/">&lt;p&gt;
  In this post I'd like to introduce my new Java library called &lt;em&gt;named-frames&lt;/em&gt;.
  The library allows including runtime-generated information into JVM/Java stack traces and thread dumps
&lt;/p&gt;

&lt;h2&gt;Motivation&lt;/h2&gt;
&lt;p&gt;
  Time from time I look into feedback emails and application logs. Some of
  such logs contain exceptions and thread dumps. It is always nice to know the build number of the product from
  which those dumps were captured. The truth is that the build number or the product version is usually not included
  in the dump.
&lt;/p&gt;
&lt;p&gt;
  I had a dream to include the build number of the application and some other
  meaningful data strait into execution call stack. So that every problem report contains those details, no matter
  how the report was generated.
&lt;/p&gt;
&lt;p&gt;
  In addition to the build number you may include much more
  information in the call stack. For example, current task names or any other data that is meaningful for faster
  debugging.
&lt;/p&gt;
&lt;h2&gt;The Library Usage&lt;/h2&gt;
&lt;p&gt;
  The application should wrap it's code into
  the call to the library in the following way:
&lt;/p&gt;

&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: java&quot;&gt;&lt;![CDATA[
NamedStackFrame.global().frame(&quot;this is my named frame&quot;, new Runnable() {
  @Override
  public void run() {
    //here goes the code
    //capture stacktrace when execution is here
  }
}); ]]&gt;&lt;/script&gt;

&lt;p&gt;
  The captured stacktrace is the following:
&lt;/p&gt;

&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: text&quot;&gt;&lt;![CDATA[
java.lang.Exception
  at com.some.corp.something.Some$1.run at _.this is my named frame._(JavaGeneratorTemplate.java:24)
  at org.jonnyzzz.stack.NamedStackFrame.frame(NamedStackFrame.java:29)
  at com.some.corp.something.toTheJob(SomeSource.java:50)
]]&gt;&lt;/script&gt;

&lt;p&gt;
  The most exciting part of the
  call stack is the line with &lt;strong&gt;dynamically generated&lt;/strong&gt; string inside:
&lt;/p&gt;

&lt;script type=&quot;syntaxhighlighter&quot; class=&quot;brush: text&quot;&gt;&lt;![CDATA[
at _.this is my named frame._(JavaGeneratorTemplate.java:24)
]]&gt;&lt;/script&gt;

&lt;p&gt;
  In the same way you may include as much &lt;em&gt;named
  stack frames&lt;/em&gt; as needed by wrapping each into a call to the &lt;em&gt;NamedStackFrame#frame()&lt;/em&gt;
  method.
&lt;/p&gt;
&lt;h2&gt;Implementation details&lt;/h2&gt;
&lt;p&gt;
  The library is implemented in pure Java 1.5, with Maven as a project model.
  I intentionally avoided any runtime dependencies in the library to avoid
  dependencies hell in usages.
&lt;/p&gt;
&lt;p&gt;The named method is added via dynamic code generation. I use the
  compiled class byte-code as the template for the code-generation. For each given unique stack frame name the
  library generates and loads a class into an internal classloader. The generated class is reused for all future
  calls for the same stack frame name.
&lt;/p&gt;
&lt;p&gt;
  It is important to notice, that each generated class
  consumes space in the PermGen of the JVM. (This is changed in Java 1.8). I recommend to check if the full possible
  set of the used names in your program is limited and will not lead to PermGen OOMs. Unused loaded classes can be
  garbage-collected by the JVM (depending on the provided JVM options)
&lt;/p&gt;
&lt;h2&gt;Sources &amp; Binaries&lt;/h2&gt;
&lt;p&gt;
  The
  library code is available under the &lt;strong&gt;MIT license&lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
  The library is available on GitHub: &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;https://github.com/jonnyzzz/named-java-frames&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;I published the snapshot build of the library into
  &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;a maven repository&lt;/a&gt;. In a several weeks I plan to apply for the Maven Central publishing
&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="library" /><category term="jvm" /><category term="opensource" /><category term="stacktrace" /><category term="frame" /><category term="stack" /><category term="java" /><category term="named-stack-frames" /><summary>In this post I'd like to introduce my new Java library called named-frames.
  The library allows including runtime-generated information into JVM/Java stack traces and thread dumps</summary></entry></feed>
