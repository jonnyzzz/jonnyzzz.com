<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="http://jonnyzzz.com/feed.xslt.xml"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link href="http://jonnyzzz.com/feed-internal.xml" rel="self" type="application/atom+xml" />
  <link href="http://jonnyzzz.com/" rel="alternate" type="text/html" />
  <updated>2018-06-13T05:27:02+00:00</updated>
  <id>/</id>

  
  <title type="html">Eugene Petrenko</title>
  

  
  <subtitle>@jonnyzzz personal page and blog</subtitle>
  

  

  
  
  <entry>
    <title type="html">Understanding isOSVersionAtLeast on macOS</title>
    <link href="http://jonnyzzz.com/blog/2018/06/13/link-error-3/" rel="alternate" type="text/html" title="Understanding isOSVersionAtLeast on macOS" />
    <published>2018-06-13T00:00:00+00:00</published>
    <updated>2018-06-13T00:00:00+00:00</updated>
    <id>/blog/2018/06/13/link-error-3</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2018/06/13/link-error-3/">&lt;p&gt;Understanding ___isOSVersionAtLeast on macOS is not defined&lt;/p&gt;

&lt;h2 id=&quot;include&quot;&gt;Include&lt;/h2&gt;

&lt;p&gt;I came across with the linker problem. My application was not able to link with the
&lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;___isOSVersionAtLeast symbol is undefined&lt;/a&gt; error.
It was the problem linking &lt;code&gt;curl&lt;/code&gt; with a
&lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt;
app. I did a tiny project to &lt;a href=&quot;https://github.com/jonnyzzz/demo-static-lib&quot;&gt;reproduce the linker error&lt;/a&gt;.
As a side effect, here is a &lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;Minimalistic C library and Kotlin/Native&lt;/a&gt;
example. And finally, the main &lt;a href=&quot;/blog/2018/06/05/link-error-2/&quot;&gt;rant and investigation post&lt;/a&gt;. The good part
is I got a suggestion to try.&lt;/p&gt;

&lt;h2 id=&quot;use-clang-not-ld&quot;&gt;Use clang not ld&lt;/h2&gt;

&lt;p&gt;The suggestion I got (and I say thank you for that) was to use &lt;code&gt;clang&lt;/code&gt; command, not the &lt;code&gt;ld&lt;/code&gt; one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;clang -mmacosx-version-min&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.10 -lc main.o lib.a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It did work. It was able to link. Next, we may try &lt;code&gt;-v&lt;/code&gt; switch to see how it works inside, 
with arguments split per lines and long paths simplified:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; clang -mmacosx-version-min=10.10 -lc main.o lib.a -v

Apple LLVM version 9.1.0 (clang-902.0.39.2)
Target: x86_64-apple-darwin17.6.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld 
    -demangle 
    -lto_library /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libLTO.dylib 
    -dynamic 
    -arch x86_64 
    -macosx_version_min 10.10.0 
    -o a.out 
    -lc 
    main.o 
    lib.a 
    -lSystem 
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.1.0/lib/darwin/libclang_rt.osx.a
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The right path (and I did it wrong in the &lt;a href=&quot;/blog/2018/06/05/link-error-2/&quot;&gt;previous post&lt;/a&gt;) is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.1.0/lib/darwin/libclang_rt.osx.a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still, the best way to use that commandline is to have no such commandline in the build.&lt;/p&gt;

&lt;h2 id=&quot;the-linker-error-solution&quot;&gt;The Linker Error Solution&lt;/h2&gt;

&lt;p&gt;The answer here is to use &lt;code&gt;clang&lt;/code&gt; command instead of &lt;code&gt;ld&lt;/code&gt; command. Note, that
command line options are different, and &lt;code&gt;clang&lt;/code&gt; calls
(specify &lt;code&gt;-v&lt;/code&gt; key to see that) &lt;code&gt;ld&lt;/code&gt; with additional arguments.&lt;/p&gt;

&lt;h1 id=&quot;linking-with-kotlinnative&quot;&gt;Linking with Kotlin/Native&lt;/h1&gt;

&lt;p&gt;At that point, we have a workable &lt;code&gt;inc.sh&lt;/code&gt; script to compile and link the static library with the executable
&lt;a href=&quot;https://github.com/jonnyzzz/demo-static-lib&quot;&gt;in the repository on GitHub&lt;/a&gt;. Time to fix &lt;code&gt;in.sh&lt;/code&gt; that links
the static C library with a &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt;
executable. You may want to have a look at the introductory post
&lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-dumb-approach&quot;&gt;A Dumb Approach&lt;/h2&gt;

&lt;p&gt;The very first (and dump) fix is to include the &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; path (see above) into the &lt;code&gt;konanc&lt;/code&gt; call with
the &lt;code&gt;-linkerOpts &amp;lt;path&amp;gt;/libclang_rt.osx.a&lt;/code&gt;. It make the code compile and run.&lt;/p&gt;

&lt;h2 id=&quot;right-approach&quot;&gt;Right Approach&lt;/h2&gt;

&lt;p&gt;Let’s debug how Kotlin/Native executes the linker first. You pass the &lt;code&gt;--verbose linker&lt;/code&gt; to see the verbose output 
from the linking phase (use &lt;code&gt;konanc --list_phases&lt;/code&gt; to learn all phases). The output on my machine is as follows, 
with arguments split per lines and long paths simplified:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; konanc -l lib.klib main.kt -linkerOpts  lib.a  -linkerOpts $L -o main.kexe --verbose linker

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld \
    -demangle
    -object_path_lto temporary.o 
    -lto_library /Users/jonnyzzz/.konan/dependencies/clang-llvm-5.0.0-darwin-macos/lib/libLTO.dylib 
    -dynamic 
    -arch x86_64 
    -macosx_version_min 10.11.0 
    -syslibroot /Applications/Xcode.app/&amp;lt;...&amp;gt;/SDKs/MacOSX10.13.sdk 
    -o &amp;lt;target folder&amp;gt;/main.kexe 
    &amp;lt;temp folder&amp;gt;/combined.o 
    -S 
    -lc++ 
    -lobjc 
    -framework Foundation 
    -lSystem &amp;lt;Konan Toolchaing path&amp;gt;/libffi.a 
    -alias _Konan_main _main 
    lib.a 
    &amp;lt;our hack path to&amp;gt;/libclang_rt.osx.a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s compare the commands. The linker executable is selected right from both sides. The sensible difference
is we miss &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; from the Kotlin/Native command. There are two ways to go:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;link the &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; with &lt;code&gt;lib.a&lt;/code&gt; before the final linking&lt;/li&gt;
  &lt;li&gt;infer path to &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; and include it into the linker command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checking &lt;code&gt;clang --help&lt;/code&gt; and I found the &lt;code&gt;-print-libgcc-file-name&lt;/code&gt; argument. It does provide hints, 
but it is not enough just now.&lt;/p&gt;

&lt;h1 id=&quot;the-outcome&quot;&gt;The Outcome&lt;/h1&gt;

&lt;p&gt;Frankly, I do not like linking with &lt;code&gt;libclang_rt&lt;/code&gt; explicitly. The library is a part
of toolchain internals. It will make builds too fragile or not incorrect.
The hack will not worth it in the long run.&lt;/p&gt;

&lt;p&gt;The right way, as I see it, is to fix the original library build to make 
sure it is pre-linked with all necessary internals.
That matches with the encapsulation principle. It simplifies the rest. 
The backup plan is to call &lt;code&gt;clang&lt;/code&gt; with &lt;code&gt;-v&lt;/code&gt; key, parse the command output
to get the path to the &lt;code&gt;libclang_rt&lt;/code&gt;, and use it as an explicit library.&lt;/p&gt;

&lt;h2 id=&quot;building-curl&quot;&gt;Building Curl&lt;/h2&gt;

&lt;p&gt;A pre-history. I first saw the missing &lt;code&gt;___isOSVersionAtLeast&lt;/code&gt; symbol error
while 
&lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;building and static linking&lt;/a&gt;
the &lt;a href=&quot;https://curl.haxx.se&quot;&gt;libcurl&lt;/a&gt;. My goal is to have a
self-contained static library out of it.&lt;/p&gt;

&lt;p&gt;I used the wrong artifact and build it incorrectly. I see the right static library 
is somewhere under &lt;code&gt;curl&lt;/code&gt; build directory. 
I did that wrong. Do that right. Respect the privacy and build internals.&lt;/p&gt;

&lt;p&gt;The right way is&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;to set install prefix path in &lt;code&gt;./configure&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;to call &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;use artifacts for the prefix path&lt;/li&gt;
  &lt;li&gt;deliver the &lt;code&gt;libclang_rt&lt;/code&gt; as dependency (or &lt;a href=&quot;https://stackoverflow.com/questions/3821916/how-to-merge-two-ar-static-libraries-into-one&quot;&gt;merge it in?&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The library under the prefix do contain reference to our 
favorite &lt;code&gt;___isOSVersionAtLeast&lt;/code&gt; symbol. The &lt;code&gt;make install&lt;/code&gt; package
looks reusable and reduces hard-coded build hacks, still.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <category term="curl" />
  
    <summary type="html">Understanding ___isOSVersionAtLeast on macOS is not defined</summary>
  
  </entry>
  
  <entry>
    <title type="html">Undefined isOSVersionAtLeast on macOS</title>
    <link href="http://jonnyzzz.com/blog/2018/06/05/link-error-2/" rel="alternate" type="text/html" title="Undefined isOSVersionAtLeast on macOS" />
    <published>2018-06-05T00:00:00+00:00</published>
    <updated>2018-06-05T00:00:00+00:00</updated>
    <id>/blog/2018/06/05/link-error-2</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2018/06/05/link-error-2/">&lt;p&gt;Solving ___isOSVersionAtLeast is undefined or CLang intrinsics.&lt;/p&gt;

&lt;p&gt;A few weeks ago I wrote about &lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;___isOSVersionAtLeast is undefined&lt;/a&gt; problem.
At some point I realized I did NOT find a solution.&lt;/p&gt;

&lt;p&gt;That time I focused on reproducing the problem with a tiny library of only a 
few code lines. I did that. A tiny static library.
It wrote details in the recent post
&lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;Minimalistic C library and Kotlin/Native&lt;/a&gt;.
Now I can check the linking either with 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt; 
or with a plain C.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;main.c&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;lib.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The result is %d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I call the following to compile and link &lt;code&gt;main.c&lt;/code&gt; with my &lt;code&gt;lib.a&lt;/code&gt; 
&lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;library&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gcc -c  main.c -o main.o
ld -macosx_version_min 10.10  -lc  main.o lib.a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I do the on macOS 10.13.3 with Xcode 9.3.1 and macOS 10.13.5, Xcode 9.4.&lt;/p&gt;

&lt;h2 id=&quot;the-linkage-error&quot;&gt;The Linkage Error&lt;/h2&gt;

&lt;p&gt;It was an assumption of mine to check for 
&lt;a href=&quot;https://clang.llvm.org/docs/LanguageExtensions.html&quot;&gt;Clang Language Extensions&lt;/a&gt;,
and finally, I was able to reproduce the linkage error with 
only the following code in &lt;code&gt;lib.c&lt;/code&gt; targeting macOS &lt;code&gt;10.10&lt;/code&gt;, but not macOS &lt;code&gt;10.13&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// that is a CLang extension&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__builtin_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the linker error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Undefined symbols for architecture x86_64:
  &amp;quot;___isOSVersionAtLeast&amp;quot;, referenced from:
      _foo in lib.a(lib.o)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I ran the &lt;code&gt;ld&lt;/code&gt; command with &lt;code&gt;-macosx_version_min 10.10&lt;/code&gt; to target macOS &lt;code&gt;10.10&lt;/code&gt;. The 
argument specifies the minimal version of macOS the created binary supports.&lt;/p&gt;

&lt;p&gt;More experiments with arguments help me to find that CLang is smart to optimize that 
code if the check makes no sense.
For example, CLang optimizes the call &lt;code&gt;__builtin_available(macOS 10.12,*)&lt;/code&gt; when I target
&lt;code&gt;10.12&lt;/code&gt; or &lt;code&gt;10.13&lt;/code&gt;. It also means no linkage error. 
The call &lt;code&gt;__builtin_available(macOS 10.14,*)&lt;/code&gt; is never optimized, as long as I cannot target
&lt;code&gt;10.14&lt;/code&gt; yet.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;linkage problem&lt;/a&gt; was not in the target version 
specification at all. Otherwise, the problem was with a missing library. I was missing the 
compiler-runtime library in my &lt;code&gt;ld&lt;/code&gt; call.
I found the hacky path (on &lt;a href=&quot;https://www.google.de/search?q=works+on+my+machine&quot; target=&quot;_blank&quot;&gt;my machine&lt;/a&gt;) 
to solve the linker error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/lib/darwin/libclang_rt.osx.a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That one defines the symbol I was missing. The only problem is the path hard-codes 
too many internals. It is too internal to be used directly from a build. It seems to 
be a part of Xcode 9.1.0, which is too old.&lt;/p&gt;

&lt;h2 id=&quot;compiler-rt&quot;&gt;compiler-rt&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://compiler-rt.llvm.org/&quot;&gt;LLVM “compiler-rt”&lt;/a&gt; that is the place with the documentation
of the LLVM and CLang features, that requires a runtime. It includes nice and helpful 
features inside. There is still no answer with the correct linker options.
I have no plans to build my own toolchain.&lt;/p&gt;

&lt;h2 id=&quot;the-right-fix&quot;&gt;The right fix&lt;/h2&gt;

&lt;p&gt;The best fix for &lt;code&gt;___isOSVersionAtLeast&lt;/code&gt; undefined symbol so far is to include the missing 
runtime library to an &lt;code&gt;ld&lt;/code&gt; command. It only needs a path to the static library with no other
arguments. Shall a build tool help here? I do not know yet.&lt;/p&gt;

&lt;p&gt;The worst here is one needs to generate the path manually. One need to know the Xcode (aka toolchain)
version to do that. And the trickiest is to make sure the path is updated once Xcode or something
else is updated.&lt;/p&gt;

&lt;p&gt;I am looking to find the best way to include the &lt;code&gt;compiler-rt&lt;/code&gt;. If you know something, 
please comment below.&lt;/p&gt;

&lt;p&gt;Continue reading the &lt;a href=&quot;/blog/2018/06/13/link-error-3/&quot;&gt;next part of the investigation&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <summary type="html">Solving ___isOSVersionAtLeast is undefined or CLang intrinsics.</summary>
  
  </entry>
  
  <entry>
    <title type="html">Minimalistic C library and Kotlin/Native</title>
    <link href="http://jonnyzzz.com/blog/2018/05/28/minimalistic-kn/" rel="alternate" type="text/html" title="Minimalistic C library and Kotlin/Native" />
    <published>2018-05-28T00:00:00+00:00</published>
    <updated>2018-05-28T00:00:00+00:00</updated>
    <id>/blog/2018/05/28/minimalistic-kn</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2018/05/28/minimalistic-kn/">&lt;p&gt;The most trivial &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt; 
example of using &lt;code&gt;C&lt;/code&gt; library&lt;/p&gt;

&lt;p&gt;Some time ago I stuck linking a C binary into an executable with 
&lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;___isOSVersionAtLeast is undefined&lt;/a&gt;. 
And thus I decided to simplify things to localize the problem. I will write 
a dedicated post with the solution for &lt;code&gt;___isOSVersionAtLeast is undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s focus on the most trivial library example. To start with, I assume 
you have &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt;
compiler in the OS Path. Have a look at 
&lt;a href=&quot;https://kotlinlang.org/docs/tutorials/native/basic-kotlin-native-app.html#obtaining-the-compiler&quot;&gt;the main tutorial&lt;/a&gt;
or merely download the compiler from &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/releases&quot; target=&quot;_blank&quot;&gt;GitHub Releases page&lt;/a&gt;.
Beware, the compiler will download the toolchain on the very first run.
The &lt;code&gt;konanc&lt;/code&gt; and &lt;code&gt;cinterop&lt;/code&gt; tools should be in the &lt;code&gt;PATH&lt;/code&gt; of your terminal or console.&lt;/p&gt;

&lt;p&gt;The rest of the post is created and tested on macOS. It should just work on Linux, but I did not check it. 
You shall have C/C++ toolchain installed too. On macOS, it is enough to install and run Xcode.&lt;/p&gt;

&lt;h2 id=&quot;c-library&quot;&gt;C Library&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;lib.h&lt;/code&gt; file looks as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef LIB2_H_INCLUDED&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LIB2_H_INCLUDED&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LIB2_H_INCLUDED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; block is not needed (unless you use C++) and left here 
for &lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C++ compatibility&lt;/a&gt;.
Thus you may shrink the file to &lt;code&gt;lib.h&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef LIB2_H_INCLUDED&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LIB2_H_INCLUDED&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LIB2_H_INCLUDED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1653958/why-are-ifndef-and-define-used-in-c-header-files&quot;&gt;#include guards&lt;/a&gt;
in your &lt;code&gt;.h&lt;/code&gt; files are a standard ritual. They are necessary for multiple &lt;code&gt;.h&lt;/code&gt; files projects.&lt;/p&gt;

&lt;p&gt;The code above declares one function for export &lt;code&gt;int foo()&lt;/code&gt;. We use the &lt;code&gt;.h&lt;/code&gt; file later 
with Kotlin/Native &lt;code&gt;cinterop&lt;/code&gt; tool import the function into Kotlin/Native.&lt;/p&gt;

&lt;p&gt;Let’s create a &lt;code&gt;lib.c&lt;/code&gt; for implementation for the &lt;code&gt;foo&lt;/code&gt; function in C:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;lib.h&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we compile the C sources into a C library. For that we call &lt;code&gt;gcc&lt;/code&gt; to compile (and link)
the &lt;code&gt;.c&lt;/code&gt; sources into a C static library:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gcc -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;-I$(pwd)&amp;quot;&lt;/span&gt; lib.c -o lib.o
ar rcs lib.a lib.o&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will be a bit more complicated if you have several &lt;code&gt;.c&lt;/code&gt; source files.&lt;/p&gt;

&lt;p&gt;At that moment we have&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lib.h&lt;/code&gt; – the header&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.c&lt;/code&gt; – the implementation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.o&lt;/code&gt; – the intermediate object file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.a&lt;/code&gt; – the compiled static library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;importing-to-kotlinnative&quot;&gt;Importing to Kotlin/Native&lt;/h2&gt;

&lt;p&gt;We need to import the C library to be used with Kotlin/Native. It is as tricky as 
calling a &lt;code&gt;cinterop&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cinterop&lt;/code&gt; tool uses the definition file for my library &lt;code&gt;lib.def&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;header = lib.h&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The file helps to specify all necessary options for bigger libraries.&lt;/p&gt;

&lt;p&gt;Not it is the time to call the &lt;code&gt;cinterop&lt;/code&gt; with the following options:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cinterop -def lib.def -compilerOpts &lt;span class=&quot;s2&quot;&gt;&amp;quot;-I$(pwd)&amp;quot;&lt;/span&gt; -o lib.klib&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result is a &lt;code&gt;lib.klib&lt;/code&gt; file. A Kotlin/Native library file. It contains Kotlin APIs for 
our &lt;code&gt;lib.h&lt;/code&gt;. It bridges C types and Kotlin/Native types (trivial &lt;code&gt;Int&lt;/code&gt; in our case) and helps
to deal with memory management (not needed for our example).&lt;/p&gt;

&lt;p&gt;At that moment we have&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lib.h&lt;/code&gt; – the header&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.c&lt;/code&gt; – the implementation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.o&lt;/code&gt; – the intermediate object file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.a&lt;/code&gt; – the compiled static library&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.def&lt;/code&gt; – the definitions for &lt;code&gt;cinterop&lt;/code&gt;, reference to &lt;code&gt;lib.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.klib&lt;/code&gt; – the compiled Kotlin/Native library to access API from &lt;code&gt;lib.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compiling-with-kotlinnative&quot;&gt;Compiling with Kotlin/Native&lt;/h2&gt;

&lt;p&gt;We need an entry point and Kotlin sources. I created the &lt;code&gt;main.kt&lt;/code&gt; file for that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The foo() from lib.h returned $z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And I compile it with the following command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;konanc -l lib.klib main.kt -linkerOpts lib.a -o main.kexe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and run the &lt;code&gt;./main.kexe&lt;/code&gt; to see the resulting text is being printed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./main.kexe
The foo() from lib.h returned 42

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That is a trivial C library linking case. For something real, you’ll probably want to 
use &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/GRADLE_PLUGIN.md&quot;&gt;Gradle build&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://kotlinlang.org/docs/tutorials/native/interop-with-c.html&quot;&gt;Interop with C libraries&lt;/a&gt; tutorial
or the list of &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/PLATFORM_LIBS.md&quot;&gt;Platform libraries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may find it useful to check the 
&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/LIBRARIES.md&quot;&gt;C Interop docs&lt;/a&gt; 
or &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/OBJC_INTEROP.md&quot;&gt;Interop with Swift and Objective-C&lt;/a&gt; page.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <summary type="html">The most trivial Kotlin/Native example of using C library</summary>
  
  </entry>
  
  <entry>
    <title type="html">Undefined Symbol on macOS</title>
    <link href="http://jonnyzzz.com/blog/2018/05/16/link-error/" rel="alternate" type="text/html" title="Undefined Symbol on macOS" />
    <published>2018-05-16T00:00:00+00:00</published>
    <updated>2018-05-16T00:00:00+00:00</updated>
    <id>/blog/2018/05/16/link-error</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2018/05/16/link-error/">&lt;p&gt;___isOSVersionAtLeast is undefined. How I spent several days compiling curl and linking it.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt; to create a 
tiny command line utility for Windows, Linux, and macOS. I believe the best app is the app without
dependencies, and thus without requirements and dependencies hassle. That is easier than 
baking os-specific packages or installers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://curl.haxx.se/&quot;&gt;Curl&lt;/a&gt; is one of my dependencies for this project. So I compiled it to 
&lt;code&gt;libcurl.a&lt;/code&gt; and lined to &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;Kotlin/Native&lt;/a&gt;
easily with a few lines of Gradle script.&lt;/p&gt;

&lt;p&gt;It failed with something cryptic on my macOS 10.13.4 with Xcode 9.3.1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Undefined symbols for architecture x86_64:
  &quot;___isOSVersionAtLeast&quot;, referenced from:
      _singleipconnect in libcurl.a(libcurl_la-connect.o)
      _darwinssl_connect_common in libcurl.a(libcurl_la-darwinssl.o)
      _darwinssl_version_from_curl in libcurl.a(libcurl_la-darwinssl.o)
ld: symbol(s) not found for architecture x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Digging internet did not help. And that is mostly why I am blogging that one. Changing or patching the 
way I build curl was useless too. Nikolay suggested me to check target version of my binaries. That was it.
Kudos Nikolay!&lt;/p&gt;

&lt;p&gt;I should have compiled the curl with &lt;code&gt;10.13&lt;/code&gt; as min version for Mac. I did that by setting
&lt;code&gt;CFLAGS&lt;/code&gt; environment variable to &lt;code&gt;-mmacosx-version-min=10.13&lt;/code&gt; for &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;Continue reading the &lt;a href=&quot;/blog/2018/06/05/link-error-2/&quot;&gt;next part of the investigation&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <category term="curl" />
  
    <summary type="html">___isOSVersionAtLeast is undefined. How I spent several days compiling curl and linking it.</summary>
  
  </entry>
  
  <entry>
    <title type="html">MacBook Fix Tilde Key</title>
    <link href="http://jonnyzzz.com/blog/2017/12/04/macos-keys/" rel="alternate" type="text/html" title="MacBook Fix Tilde Key" />
    <published>2017-12-04T00:00:00+00:00</published>
    <updated>2017-12-04T00:00:00+00:00</updated>
    <id>/blog/2017/12/04/macos-keys</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/12/04/macos-keys/">&lt;p&gt;A tiny trick to remap keys on macOS X&lt;/p&gt;

&lt;p&gt;Recently I switched from an EN-US MacBook Pro Keyboard to a DE keyboard. Suddenly, I found
an unexpected problem with keys layout.&lt;/p&gt;

&lt;p&gt;There are several differences in the layout. 
You may have a look to all possible keyboard layouts 
&lt;a href=&quot;https://keyshorts.com/blogs/blog/37615873-how-to-identify-macbook-keyboard-localization&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main difference is that in EU version of the keyboard we have additional
buttons, Enter key is vertical, Left Shift key is shorted to give a room for 
an extra key.&lt;/p&gt;

&lt;p&gt;The problem is as follows: &lt;code&gt;tilde&lt;/code&gt; key is near &lt;code&gt;1&lt;/code&gt; in the EN-US keyboard (and other PC keyboards),
while it is between Shift and Z in the EU keyboards.&lt;/p&gt;

&lt;p&gt;Also, on Mac OS we use &lt;code&gt;CMD+tilde&lt;/code&gt; to switch between windows on the same App. I have even
installed &lt;a href=&quot;https://neosmart.net/EasySwitch/&quot; target=&quot;_blank&quot;&gt;Easy Window Switcher&lt;/a&gt; to have the same 
experience on Windows!&lt;/p&gt;

&lt;p&gt;It is hard for me to learn the trick. And it will not work correctly, if you remap a key. Namely,
in Russian keyboard layout the remapped shortcut will not work. Yeah! MacOS System shortcuts DO 
depend on keyboard layout. Sad story.&lt;/p&gt;

&lt;p&gt;I can across a tiny and nice article to remap keys on MacOS. 
&lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2450/_index.html&quot; target=&quot;_blank&quot;&gt;TN2450&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the way to re-map keys is the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
hidutil property --set '{&quot;UserKeyMapping&quot;:[{&quot;HIDKeyboardModifierMappingSrc&quot;:0x700000064,&quot;HIDKeyboardModifierMappingDst&quot;:0x700000035},{&quot;HIDKeyboardModifierMappingSrc&quot;:0x700000035,&quot;HIDKeyboardModifierMappingDst&quot;:0x700000064}]}'
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That is all you need. Next you’d need to have a patched Russian keyboard to fix Ё character. For the fix I use 
&lt;a href=&quot;http://scripts.sil.org/ukelele&quot; target=&quot;_blank&quot;&gt;ukelele&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, you do not need to install ANY third-party apps to solve the key-remapping problems&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="keys" />
  
    <summary type="html">A tiny trick to remap keys on macOS X</summary>
  
  </entry>
  
  <entry>
    <title type="html">Kotlin DSL for Test Data</title>
    <link href="http://jonnyzzz.com/blog/2017/11/02/gradle-dsl/" rel="alternate" type="text/html" title="Kotlin DSL for Test Data" />
    <published>2017-11-02T00:00:00+00:00</published>
    <updated>2017-11-02T00:00:00+00:00</updated>
    <id>/blog/2017/11/02/gradle-dsl</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/11/02/gradle-dsl/">&lt;p&gt;Kotlin DSLs can be used to replace a boring test data strings with correct and an easy to read a code.&lt;/p&gt;

&lt;p&gt;That time I was working on &lt;a href=&quot;/blog/2017/10/18/java9c/&quot;&gt;java9c&lt;/a&gt; plugin for Gradle, I created
integration tests. In my case all those tests were of the following pattern: create sample Gradle
project, execute it, check results. I decided to run a fun experiment and replace boring string
constants with a Gradle-looking DSL.&lt;/p&gt;

&lt;p&gt;Namely, instead of (and many Gradle plugin integration tests have similar)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;apply plugin: &amp;#39;java-library&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;repositories {\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;  mavenCentral()\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;}\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;dependencies {\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;  implementation &amp;#39;junit:junit:4.12&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;}\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I created a tiny DSL that looks (and parses) like a Gradle script. 
The DSL generates test-data files for me. Kotlin compiler and IDE 
helps to prevent errors before a test is executed. Code completion 
makes a new test authoring easier. Here is the DSL usage example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;java-library&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;junit:junit:4.12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More examples are on &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;GitHub&lt;/a&gt; in &lt;code&gt;java9c&lt;/code&gt; plugin test sources.&lt;/p&gt;

&lt;p&gt;The example looks like a Gradle script. There was no goal to make it 100% same looking. Also, 
there is an amazing &lt;a href=&quot;https://github.com/gradle/kotlin-dsl&quot;&gt;project&lt;/a&gt; run by Gradle to support
Kotlin DSLs in Gradle, natively. That DSL is not 100% same looking to a Gradle-Groovy scripts too.&lt;/p&gt;

&lt;p&gt;The implementation of that my magic DSL fits in 
&lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c/blob/master/test-common/src/main/java/org/jonnyzzz/gradle/java9c/files.kt&quot;&gt;one file&lt;/a&gt;,
and it’s about 150 lines.&lt;/p&gt;

&lt;p&gt;Next, I’ll explain how one can create similar DSLs for their own needs. With Kotlin you may target 
JVM, Android, JS, and Native, reusing same pure-Kotlin code.&lt;/p&gt;

&lt;h1 id=&quot;dsl-basics&quot;&gt;DSL Basics&lt;/h1&gt;

&lt;p&gt;We need to create a text generator DSL. The primary decision if either to generate a bare text or to use an API of a library. 
You may consider &lt;a href=&quot;https://www.w3.org/DOM/&quot;&gt;XML DOM&lt;/a&gt; or &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt;. 
There are &lt;a href=&quot;https://github.com/square/kotlinpoet&quot;&gt;kotlinpoet&lt;/a&gt; or &lt;a href=&quot;https://github.com/square/javapoet&quot;&gt;javapoet&lt;/a&gt;
to generate Kotlin or Java code via an API. I bet there are many other libraries. 
&lt;a href=&quot;https://github.com/nebula-plugins/gradle-lint-plugin&quot;&gt;Nebula Gradle Lint Plugin&lt;/a&gt; can read/write 
Gradle scripts too.&lt;/p&gt;

&lt;p&gt;There is a trade-off. Dealing with a library may be complicated and time-consuming, but way more stable.&lt;/p&gt;

&lt;p&gt;For the sake of &lt;a href=&quot;/blog/2017/10/18/java9c/&quot;&gt;java9c&lt;/a&gt; tests, I decided to implement the generator 
based on bare text output. And it’d be me who covers all risks and bugs from the implementation. 
It is only about 150 lines (now) of 
&lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c/blob/master/test-common/src/main/java/org/jonnyzzz/gradle/java9c/files.kt&quot;&gt;code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;writer-interface&quot;&gt;Writer Interface&lt;/h2&gt;

&lt;p&gt;I started with a line writer interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the interface, I use unary minus, e.g., &lt;code&gt;-&quot;foo&quot;&lt;/code&gt; as the function to write a line. It reads better in DSLs, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;lineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;line of text&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, you may decide to have a &lt;code&gt;fun line(text: String)&lt;/code&gt; instead. That does not change the rest, so, please
feel free to use a function instead of an operator. Alternatively, you may use &lt;code&gt;String.unaryPlus&lt;/code&gt;, so that
you’d have &lt;code&gt;+&quot;foo&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://kotlinlang.org/docs/reference/operator-overloading.html&quot;&gt;Operator Overloading&lt;/a&gt; documentation
or ask me, if you need to clarify the trick.&lt;/p&gt;

&lt;h2 id=&quot;a-trivial-writer-implementation&quot;&gt;A Trivial Writer Implementation&lt;/h2&gt;

&lt;p&gt;The implementation of the interface could be something trivial, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateDSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appendln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The usage could be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;line of text&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;generateDSL&lt;/code&gt; receives a &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver&quot;&gt;lambda with receiver&lt;/a&gt;
and returns resulting string. It is the implementation detail to pass the instance of 
&lt;code&gt;LineWriter&lt;/code&gt; to the lambda. Inside the lambda, the receiver is &lt;code&gt;LineWriter&lt;/code&gt;, it means, that &lt;code&gt;this&lt;/code&gt; keyword 
resolves to an instance of &lt;code&gt;LineWriter&lt;/code&gt;. Of course, &lt;code&gt;this.&lt;/code&gt; can be omitted and all methods are resolved
against &lt;code&gt;LineWriter&lt;/code&gt; instance. It follows that &lt;code&gt;- &quot;foo&quot;&lt;/code&gt; calls resolves to &lt;code&gt;String.unaryMinus()&lt;/code&gt; function
of &lt;code&gt;LineWriter&lt;/code&gt; inside the lambda scope.&lt;/p&gt;

&lt;p&gt;For short, we may compact the &lt;code&gt;generateDSL&lt;/code&gt; function to the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateDSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;appendln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I use a &lt;code&gt;fun buildString(builderAction: StringBuilder.() -&amp;gt; Unit): String&lt;/code&gt; function from the Kotlin standard library. 
It receives yet another &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver&quot;&gt;lambda with receiver&lt;/a&gt; 
on &lt;code&gt;StringBuilder&lt;/code&gt; type so that &lt;code&gt;appendln&lt;/code&gt; is a function from it.&lt;/p&gt;

&lt;p&gt;Theoretically, you may have several different entry point functions (e.g., &lt;code&gt;generateDSL&lt;/code&gt;)
to, say, generate a string, a file or something else. The rest does not depend on a particular 
&lt;code&gt;generate*&lt;/code&gt; function.&lt;/p&gt;

&lt;h1 id=&quot;indenting-and-blocks&quot;&gt;Indenting and Blocks&lt;/h1&gt;

&lt;p&gt;Text generation for languages like Gradle requires indenting. We have blocks, and it’s nice
to simplify blocks generation. At first, I created an &lt;code&gt;offset&lt;/code&gt; function for it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;-(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function is an &lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension function&lt;/a&gt;. It makes
no need to change the original &lt;code&gt;LineWriter&lt;/code&gt; interface, but it still reads as a method call.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;block&lt;/code&gt; function is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$name {&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I use &lt;a href=&quot;https://kotlinlang.org/docs/reference/idioms.html#string-interpolation&quot;&gt;string interpolation&lt;/a&gt;
to simplify code of the first line.&lt;/p&gt;

&lt;p&gt;At that point I can write the DSL snippets like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jonnyzzz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And it yields&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jonnyzzz {
  test
}  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nice, isn’t it?&lt;/p&gt;

&lt;h1 id=&quot;gradle-specific-constructs&quot;&gt;Gradle Specific Constructs&lt;/h1&gt;

&lt;p&gt;With &lt;code&gt;block&lt;/code&gt; function one can create all necessary functions to generate blocks like &lt;code&gt;repositories&lt;/code&gt;, &lt;code&gt;dependencies&lt;/code&gt; and so on. 
Now it is time to implement specific parts of the DSL and allow some constructs only inside other constructs.&lt;/p&gt;

&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;Let’s consider &lt;code&gt;repositories&lt;/code&gt; block. Inside we have pre-defined functions for &lt;code&gt;mavenCentral()&lt;/code&gt; and &lt;code&gt;jcenter()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, we need a builder interface and implementation. It can be done as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;interface RepositoriesWriter : LineWriter {
  fun mavenCentral() { -&amp;quot;mavenCentral()&amp;quot; }
  fun mavenLocal() { -&amp;quot;mavenLocal()&amp;quot; }
  fun jcenter() { -&amp;quot;jcenter()&amp;quot; }
}

fun RepositoriesHolder.repositories(builder: RepositoriesWriter.() -&amp;gt; Unit) =
        block(&amp;quot;repositories&amp;quot;) {
          object : RepositoriesWriter, LineWriter by it {
          }.builder()
        }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We define an interface &lt;code&gt;RepositoriesWriter&lt;/code&gt; to play as the scope of the generation. In the interface,
we have &lt;code&gt;mavenLocal&lt;/code&gt; and other functions with trivial implementations. Those functions can be alternatively 
implemented as extension functions of inside the &lt;code&gt;repositories&lt;/code&gt; function. That is up to the author.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;repositories&lt;/code&gt; function, I use &lt;a href=&quot;https://kotlinlang.org/docs/reference/delegation.html&quot;&gt;class delegation&lt;/a&gt; aka &lt;code&gt;by&lt;/code&gt;
keyword to implement &lt;code&gt;LineWriter&lt;/code&gt; from &lt;code&gt;RepositoriesWriter&lt;/code&gt; to delegate to another instance of &lt;code&gt;LineWriter&lt;/code&gt;. 
So short to write and powerful!&lt;/p&gt;

&lt;p&gt;As the result, we can have&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;generateDSL {
  repositories {
     mavenCentral()
     -&amp;quot;// another line&amp;quot;
  }
}   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same way I created the whole bunch of functions to support the subset of Gradle scripts I 
was using in my tests. You may take a look 
&lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c/blob/master/test/src/test/java/org/jonnyzzz/gradle/java9c/test-4.2.1.kt&quot;&gt;here for more details&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;specific-dsl-alternatives&quot;&gt;Specific DSL Alternatives&lt;/h2&gt;

&lt;p&gt;It was another design decision to allow &lt;code&gt;LineWriter&lt;/code&gt; functions and extension functions (e.g., &lt;code&gt;block&lt;/code&gt;) 
of the scope of &lt;code&gt;RepositoriesWriter&lt;/code&gt; lambda. We might have decided opposite. In the case, we would need
&lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html#scope-control-dslmarker-since-11&quot;&gt;DslMarker&lt;/a&gt;
annotation to make sure &lt;code&gt;LineWriter&lt;/code&gt; functions and extension functions are not resolved to the 
outer scope. We probably have a &lt;code&gt;generateDSL&lt;/code&gt; function call on the top.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h1&gt;

&lt;p&gt;DSLs are nice. In the post, I presented the DSL building pattern. 
Use it to create your DSLs. Ask me if you have questions. 
You may also check &lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html&quot;&gt;this&lt;/a&gt; article from Kotlin 
documentation or &lt;a href=&quot;https://www.youtube.com/watch?v=BnTtjywqAX8&quot;&gt;a video of a talk by Hadi&lt;/a&gt;.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="gradle" />
  
    <category term="java9" />
  
    <category term="opensource" />
  
    <category term="plugin" />
  
    <category term="java9c" />
  
    <category term="kotlin" />
  
    <category term="dsl" />
  
    <summary type="html">Kotlin DSLs can be used to replace a boring test data strings with correct and an easy to read a code.</summary>
  
  </entry>
  
  <entry>
    <title type="html">A Gradle Plugin to Detect Package Conflicts for Migration to Java 9 Modules</title>
    <link href="http://jonnyzzz.com/blog/2017/10/18/java9c/" rel="alternate" type="text/html" title="A Gradle Plugin to Detect Package Conflicts for Migration to Java 9 Modules" />
    <published>2017-10-18T00:00:00+00:00</published>
    <updated>2017-10-18T00:00:00+00:00</updated>
    <id>/blog/2017/10/18/java9c</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/10/18/java9c/">&lt;p&gt;helps to detect problems with split packages prior to the migration&lt;/p&gt;

&lt;p&gt;It was an amazing journey to the &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; this year. 
There I had a great chance to &lt;a href=&quot;https://www.youtube.com/watch?v=UNg9lmk60sg&amp;amp;feature=youtu.be&amp;amp;t=6903&quot;&gt;present&lt;/a&gt; 
some features of &lt;a href=&quot;https://www.jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; on the huge 
&lt;a href=&quot;../../../../../talks/&quot;&gt;stage&lt;/a&gt;. I liked it. I was also amazed by the backstage processes. So many people are involved in there.&lt;/p&gt;

&lt;p&gt;During those crazy times, I realized there is a problem for anyone willing to switch to Java 
modules. The problem is in packages. Every package is now allowed to be used only in 
one entry in the module path. It is still ok if you’re on classpath. For more information, 
you may consider &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/&quot;&gt;project jigsaw&lt;/a&gt;, 
&lt;a href=&quot;http://openjdk.java.net/jeps/261&quot;&gt;JEP 261&lt;/a&gt;,
&lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/spec/issues/#AvoidConcealedPackageConflicts&quot;&gt;AvoidConcealedPackageConflicts&lt;/a&gt;, 
&lt;a href=&quot;https://blog.codefx.org/java/java-9-migration-guide/#Split-Packages&quot;&gt;Split Packages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step in the migration to modules is to make sure there are no package name clashes 
between files. The best way to know that for sure is to have a tool that analyze 
classpath for conflicts. So I created the plugin for Gradle.&lt;/p&gt;

&lt;p&gt;Usage is pretty simple.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.java9c&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.2.1&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;/// Mind the updates!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the plugin is applied, it adds the &lt;code&gt;java9c&lt;/code&gt; task. The task itself depends on several generated tasks for 
every source set, e.g., &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;. &lt;code&gt;java9c&lt;/code&gt; task, prints out the detected package conflicts for each source set.&lt;/p&gt;

&lt;p&gt;For the demonstration, I created a tiny project that has classes in the junit’s main package. The report looks like that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jonnyzzz.com/images/posts/2017-10-18-task-output.png&quot; alt=&quot;java9c task out example image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For multiple project Gradle projects, you may include the plugin in the following way, or, alternatively, 
you may select only specific projects to check.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.java9c&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.2.1&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;/// Mind the updates!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.java9c&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The plugin is open source. You may find sources on &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is so easy to create so many different features. This time I decided to create a feature-poor plugin. 
Meanwhile, I reserved the &lt;code&gt;java9c&lt;/code&gt; extension in Gradle for future features for the plugin.
Let me know if there is something I missed. Also, you may create a pull 
request &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;sources--binaries&quot;&gt;Sources &amp;amp; Binaries&lt;/h1&gt;

&lt;p&gt;Sources are on &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plugin page on &lt;a href=&quot;https://plugins.gradle.org/plugin/org.jonnyzzz.java9c&quot;&gt;Gradle Plugins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The plugin is implemented in pure &lt;a href=&quot;https://kotlinlang.org&quot;&gt;kotlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have fun! And let me know if it helps.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="gradle" />
  
    <category term="java" />
  
    <category term="jigsaw" />
  
    <category term="java9" />
  
    <category term="modules" />
  
    <category term="opensource" />
  
    <category term="plugin" />
  
    <category term="java9c" />
  
    <category term="kotlin" />
  
    <summary type="html">helps to detect problems with split packages prior to the migration</summary>
  
  </entry>
  
  <entry>
    <title type="html">A Sudden SSH out-of-memory</title>
    <link href="http://jonnyzzz.com/blog/2017/08/23/ssh-oom/" rel="alternate" type="text/html" title="A Sudden SSH out-of-memory" />
    <published>2017-08-23T00:00:00+00:00</published>
    <updated>2017-08-23T00:00:00+00:00</updated>
    <id>/blog/2017/08/23/ssh-oom</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/08/23/ssh-oom/">&lt;p&gt;An accident and investigation of the server failure&lt;/p&gt;

&lt;p&gt;In this post, I am going to share an accident I had recently with
in-house production.&lt;/p&gt;

&lt;p&gt;Let’s assume we have an SSH server. Clients who call
commands through it. Quite simple, right?&lt;/p&gt;

&lt;p&gt;Of course, we cannot have only one SSH server. Instead, we run 
several SSH servers and use HAProxy to load-balance traffic 
to them. It is way more safe to have several servers, 
instead of one. For example, it simplifies maintenance, allows 
to easily implement 
&lt;a href=&quot;https://en.wikipedia.org/wiki/Rolling_release&quot;&gt;Rolling Updates&lt;/a&gt;
or say 
&lt;a href=&quot;https://en.wikipedia.org/wiki/A/B_testing&quot;&gt;A/B Testing&lt;/a&gt;.
I &lt;a href=&quot;/blog/2017/05/24/ssh-haproxy/&quot;&gt;wrote in a previous post&lt;/a&gt;
more details on our HAProxy setup some time ago&lt;/p&gt;

&lt;h1 id=&quot;the-outage-as-seen-by-users&quot;&gt;The outage as seen by users&lt;/h1&gt;

&lt;p&gt;At some day, our users (as I can recreate from reports) started to see
strange connection timeouts from SSH server calls. The call they did was 
to download several gigabytes of data.&lt;/p&gt;

&lt;p&gt;From a user perspective, it’s totally OK to retry a command once it failed 
for the very first time. So they did it.&lt;/p&gt;

&lt;p&gt;After several retries, they tend to give up. At that time our system
was no longer capable of serving any SSH requests at all&lt;/p&gt;

&lt;h1 id=&quot;the-outage-as-seen-from-the-server-side&quot;&gt;The outage as seen from the server-side&lt;/h1&gt;

&lt;p&gt;We are running several SSH servers behind HAProxy. Servers were running 
in JVM. I use amazing &lt;a href=&quot;https://mina.apache.org/sshd-project/&quot;&gt;Apache Mina SSHD&lt;/a&gt;
to implement our &lt;a href=&quot;http://jonnyzzz.com/contrib/#apache-mina-sshd&quot;&gt;SSH server&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Alerts appeared for our SSH servers. HAProxy started to drain traffic from dead SSH 
servers, based on health checks. It was good since other requests were still 
able to execute on still live servers.&lt;/p&gt;

&lt;p&gt;There were only two servers in our setup. So the system was too fast to be killed.&lt;/p&gt;

&lt;p&gt;All dead server had an out-of-memory (OOM) before death. Sadly, but it is 
hard to write an application that is can survive OOMs and continue to function. In our case, OOM
tended to kill either SSH server socket processing for either SSH or HTTP.&lt;/p&gt;

&lt;p&gt;The good side was that those SSH servers had not sensible state. Thus it was easy to restart
them to be back in business. So we had the workaround&lt;/p&gt;

&lt;h1 id=&quot;java-heap-dump-analysis&quot;&gt;Java heap dump analysis&lt;/h1&gt;

&lt;p&gt;By that time I had several memory dumps (.hprof) files from failed servers. It was
time to analyze what is there. 
All those failures were only because a send buffer was full of data, consuming the 
rest of heap memory. More detailed, I found a massive SSH session object.&lt;/p&gt;

&lt;p&gt;With more analysis, I found the whole memory was consumed by the write queue.&lt;/p&gt;

&lt;p&gt;A closer look in memory dumps and I was able to figure out the outage was caused by
a fresh &lt;a href=&quot;https://www.chiark.greenend.org.uk/~sgtatham/putty/&quot;&gt;Putty&lt;/a&gt; client on Windows, e.g. 
&lt;code&gt;SSH-2.0-PuTTY_Release_0.69&lt;/code&gt;. At the time of the accident, it was the most recent version.&lt;/p&gt;

&lt;p&gt;The state was that I had an OOM issue downloading several gigabytes of data over the 
SSH with Putty client. It was time to write integration tests to reproduce the problem. 
I did it. I was able to test every putty client version. I tried &lt;code&gt;0.67&lt;/code&gt;, &lt;code&gt;0.68&lt;/code&gt; and &lt;code&gt;0.69&lt;/code&gt;.
The OOM problem was likely to be introduced in &lt;code&gt;0.68&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;client-problem-and-users&quot;&gt;Client problem and users&lt;/h1&gt;

&lt;p&gt;Memory snapshot analysis was helpful to realize the problem was with a specific 
version of an SSH client. I also knew, only users with fresh computers we reporting 
the issue too.&lt;/p&gt;

&lt;p&gt;It was evident I cannot do anything with the client. Users decided to use it for 
their reasons. Also, my SSH server implementation did not support the client 
filtering. Anyway, I’d be too hard to explain everyone the problem is probably with 
recent update of their software.&lt;/p&gt;

&lt;h1 id=&quot;debugging-the-problem&quot;&gt;Debugging the problem&lt;/h1&gt;

&lt;p&gt;Thanks to integration tests I did, I was also able to debug the problem and realize
the cause of the issue.&lt;/p&gt;

&lt;p&gt;I found the method, which handles all writes on the server: 
&lt;code&gt;org.apache.sshd.common.session.AbstractSession#writePacket(org.apache.sshd.common.util.buffer.Buffer)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Apache Mina SSHD server is async. Instead of writing data directly to the socket it 
enqueues the data and sends once the OS is ready for it.&lt;/p&gt;

&lt;p&gt;Also, the implementation writes messages to a dedicated queue while 
re-key process is running. This method is called for every SSH command 
channel writes too. SSH window size is checked before calling the method, so
the command writer is blocked to wait while queued messages are sent.&lt;/p&gt;

&lt;p&gt;In memory dumps of the session object, I saw the window was barely unlimited.
&lt;img src=&quot;/images/posts/2017-08-23-snapshot.jpg&quot; alt=&quot;Memory Snapshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Having unlimited window and a slow network is enough for a server to consume all memory
with messages queue. In my case SSH, command was streaming several gigabytes of data from memory.&lt;/p&gt;

&lt;p&gt;There are two questions:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Why is it happening only now?&lt;/li&gt;
  &lt;li&gt;How can we avoid the problem?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;ssh-window-abuse&quot;&gt;SSH window abuse&lt;/h1&gt;

&lt;p&gt;As we know, SSH protocol uses windows to limit the number of data being queued. Why didn’t it work?&lt;/p&gt;

&lt;p&gt;It was easy to debug. I found out Putty was sending 2GB (e.g., signed integer max value) as the size 
of the receive window. Well, I saw no reason why. But having such a huge send window makes 
SSH server enqueue up to 2GB of data per session.&lt;/p&gt;

&lt;p&gt;An optimistic approach, as we are a victim of it, is to trust SSH client and use the window as-is.&lt;/p&gt;

&lt;p&gt;A defensive approach is to have an additional send window in SSH server to avoid blindly trusting a client.&lt;/p&gt;

&lt;h1 id=&quot;sshd-patch&quot;&gt;SSHD patch&lt;/h1&gt;

&lt;p&gt;Now it was more or less clear. The problem was in unlimited write queue and infinite send window. 
I created an issue for the Apache Mina SSHD project to let anyone know there is such a problem.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://issues.apache.org/jira/browse/SSHD-754&quot;&gt;https://issues.apache.org/jira/browse/SSHD-754&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I did a trivial patch on for the server. I decided to limit write queue for channel messages
to block the sender even in the case send window is unlimited. I simply use a semaphore for it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;CHANNEL_STDOUT_LOCK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PressureLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;CHANNEL_STDERR_LOCK&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PressureLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;writePacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoWriteFuture&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The workaround for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// https://issues.apache.org/jira/browse/SSHD-754&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the trick is to block writer thread once there are more&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// than 100 messages in either rekey wait queue or nio write queue&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rpos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;SshConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSH_MSG_CHANNEL_DATA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHANNEL_STDOUT_LOCK&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;SshConstants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SSH_MSG_CHANNEL_EXTENDED_DATA&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CHANNEL_STDERR_LOCK&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;future&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writePacket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code above is included in my inheritor of the &lt;code&gt;org.apache.sshd.common.session.AbstractSession&lt;/code&gt;.
I like Apache Mina SSHD library is designed in an extensible way making such workaround possible.&lt;/p&gt;

&lt;p&gt;And the &lt;code&gt;PressureLock&lt;/code&gt; was implemented this way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PressureLock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;listener&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SshFutureListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IoWriteFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;operationComplete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;future&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IoWriteFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SshFutureListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IoWriteFuture&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;acquire&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listener&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I checked the fix with my tests. The problem was solved.&lt;/p&gt;

&lt;h1 id=&quot;putty-changes&quot;&gt;Putty changes&lt;/h1&gt;

&lt;p&gt;With integration tests, I was able to detect that it started 
to fail only with Putty 0.68. Putty 0.67 was working great. 
Also, all our problems were only from putty SSH clients on Windows.&lt;/p&gt;

&lt;p&gt;I decided to dig dipper and see, that change was it. 
Sadly, there were so many changes between 0.67 and 0.68. 
Also, it took several years for them too.&lt;/p&gt;

&lt;p&gt;I knew I was looking the change to windows size. I confirmed in debugger,
Putty 0.67 was using 16K for it.&lt;/p&gt;

&lt;p&gt;And I found the change &lt;a href=&quot;https://git.tartarus.org/?p=simon/putty.git;a=commit;h=b22c0b6f3e6f5254270a89f86df3edfc4da829d2&quot;&gt;b22c0b6f3e6f5254270a89f86df3edfc4da829d2&lt;/a&gt;
and the &lt;a href=&quot;https://git.tartarus.org/?p=simon/putty.git;a=blobdiff;f=windows/winplink.c;h=99e269fdc106687e7edff5c51fb778ee22d545b7;hp=a0458b39a878b0ad8af99d9a7294e2129b3bf787;hb=b22c0b6f3e6f5254270a89f86df3edfc4da829d2;hpb=34add87ad249205d4ed36381bfb506a431dc0e7a&quot;&gt;winplink.c file&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-diff&quot; data-lang=&quot;diff&quot;&gt;&lt;span class=&quot;gd&quot;&gt;--- a/windows/winplink.c&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+++ b/windows/winplink.c&lt;/span&gt;
&lt;span class=&quot;gu&quot;&gt;@@ -618,6 +618,17 @@ int main(int argc, char **argv)&lt;/span&gt;
        return 1;
     }
 
&lt;span class=&quot;gi&quot;&gt;+    /*&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+     * Plink doesn&amp;#39;t provide any way to add forwardings after the&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+     * connection is set up, so if there are none now, we can safely set&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+     * the &amp;quot;simple&amp;quot; flag.&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+     */&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+    if (conf_get_int(conf, CONF_protocol) == PROT_SSH &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+       !conf_get_int(conf, CONF_x11_forward) &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+       !conf_get_int(conf, CONF_agentfwd) &amp;amp;&amp;amp;&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+       !conf_get_str_nthstrkey(conf, CONF_portfwd, 0))&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+       conf_set_int(conf, CONF_ssh_simple, TRUE);&lt;/span&gt;
&lt;span class=&quot;gi&quot;&gt;+&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The change was to flip &lt;code&gt;CONF_ssh_simple&lt;/code&gt; mode on Windows. The change 
did enable 2GB receive window, as you may see from the usages.&lt;/p&gt;

&lt;p&gt;In &lt;code&gt;ssh.c&lt;/code&gt; in &lt;a href=&quot;https://the.earth.li/~sgtatham/putty/latest/putty-0.70.tar.gz&quot;&gt;Putty 0.70&lt;/a&gt; we have defines:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#define OUR_V2_BIGWIN 0x7fffffff&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define OUR_V2_WINSIZE 16384&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the code-block:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ssh_is_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Ssh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * We use the &amp;#39;simple&amp;#39; variant of the SSH protocol if we&amp;#39;re asked&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * to, except not if we&amp;#39;re also doing connection-sharing (either&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * tunnelling our packets over an upstream or expecting to be&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * tunnelled over ourselves), since then the assumption that we&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * have only one channel to worry about is not true after all.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf_get_int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CONF_ssh_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bare_connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connshare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Set up most of a new ssh_channel.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ssh_channel_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh_channel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Ssh&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;localid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc_channel_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;closes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pending_eof&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throttling_conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;FALSE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locwindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locmaxwin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remlocwin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;ssh_is_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OUR_V2_BIGWIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUR_V2_WINSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chanreq_head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;throttle_state&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNTHROTTLED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;bufchain_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outbuffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;add234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;channels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The windows size is computed by the following expression:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;	&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locwindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locmaxwin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;remlocwin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
	    &lt;span class=&quot;n&quot;&gt;ssh_is_simple&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;OUR_V2_BIGWIN&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OUR_V2_WINSIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The windows sizes are exactly the same as I saw in debugger both for
&lt;code&gt;0.67&lt;/code&gt; and &lt;code&gt;0.69&lt;/code&gt; versions.&lt;/p&gt;

&lt;p&gt;That was it. And it was in April 2016. It took more than a year 
for the change to cause the issues I was debugging.&lt;/p&gt;

&lt;p&gt;Thanks to the opensource, I was able to dig that deep to see the source
of the problem. I liked it.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I was running these SSH servers for more than a year. I like people 
say, ‘Hey, I did no changes to anything, why is it failing now?’&lt;/p&gt;

&lt;p&gt;It was indeed the change. And the system started to fail. It was
the outer world that changed.&lt;/p&gt;

&lt;p&gt;I found the source of the issue and did a patch to make the server
work again with new SSH clients. That was fun!&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="git" />
  
    <category term="ssh" />
  
    <category term="java" />
  
    <category term="oom" />
  
    <category term="putty" />
  
    <category term="opensource" />
  
    <category term="debug" />
  
    <category term="service" />
  
    <summary type="html">An accident and investigation of the server failure</summary>
  
  </entry>
  
  <entry>
    <title type="html">A Bash Test Runner for TeamCity</title>
    <link href="http://jonnyzzz.com/blog/2017/08/09/test-runner/" rel="alternate" type="text/html" title="A Bash Test Runner for TeamCity" />
    <published>2017-08-09T00:00:00+00:00</published>
    <updated>2017-08-09T00:00:00+00:00</updated>
    <id>/blog/2017/08/09/test-runner</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/08/09/test-runner/">&lt;p&gt;An ad-hoc bash test runner with TeamCity support&lt;/p&gt;

&lt;p&gt;That time I was playing with a tiny &lt;a href=&quot;https://golang.org&quot;&gt;Go&lt;/a&gt; project. I was doing a console tool 
to update &lt;a href=&quot;https://www.consul.io/&quot;&gt;Consul KV&lt;/a&gt; in the required way, with transaction and domain specifics.&lt;/p&gt;

&lt;p&gt;Why the tool? Well, I was needed to update several keys from our &lt;a href=&quot;https://www.ansible.com/&quot;&gt;Ansible&lt;/a&gt; deployment
scripts. And &lt;a href=&quot;https://www.consul.io/api/txn.html&quot;&gt;transactions&lt;/a&gt; were the nice way
to run an atomic update. Secondly, it is better to offload tricky domain specific code to a dedicated 
place, which has better tests and build process. The alternative in my case was to 
use &lt;code&gt;curl&lt;/code&gt; or similar to run Consul KV transactions with no easy way to test it easily.&lt;/p&gt;

&lt;p&gt;By the time I realized it is better to call the tool from a command line to test it
does correct changed to the KV. So I was looking for a test runner.&lt;/p&gt;

&lt;p&gt;After some research, I decided to use 
&lt;a href=&quot;https://confluence.jetbrains.com/display/TCD10/Build+Script+Interaction+with+TeamCity&quot;&gt;TeamCity Service Messages&lt;/a&gt;
to report test progress back to the CI.&lt;/p&gt;

&lt;p&gt;The idea of tests is as follows. Each test is created as an &lt;code&gt;.sh&lt;/code&gt; file under &lt;code&gt;tests&lt;/code&gt; folder. Exit code is used to tell 
a failure from success. That is necessary to be able to run every test and only one test locally while developing.&lt;/p&gt;

&lt;p&gt;Finally, I created the following test runner:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e -x -u
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$( cd &amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;${BASH_SOURCE[0]}&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Running integration tests...&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;FAILED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;span class=&quot;nv&quot;&gt;TC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;##teamcity&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; ${TC}[testSuiteStarted name=&amp;#39;integration-tests&amp;#39;] &amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; TEST in tests/* &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;TEST_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;basename &lt;span class=&quot;nv&quot;&gt;$TEST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; ${TC}[testStarted name=&amp;#39;$TEST_NAME&amp;#39; captureStandardOutput=&amp;#39;true&amp;#39;] &amp;quot;&lt;/span&gt;
  ./&lt;span class=&quot;nv&quot;&gt;$TEST&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; ${TC}[testFailed name=&amp;#39;$TEST_NAME&amp;#39;] &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; ${TC}[testFinished name=&amp;#39;$TEST_NAME&amp;#39;] &amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; ${TC}[testSuiteFinished name=&amp;#39;integration-tests&amp;#39;] &amp;quot;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;By the time, I’m still uncertain, if I need to use this one. Or, maybe I should switch to &lt;code&gt;go test&lt;/code&gt; in the future. 
The best feature of the test above is it supported by &lt;a href=&quot;https://jetbrains.com/teamcity&quot;&gt;TeamCity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Yoy may find the actual version of it on GitHub. 
&lt;a href=&quot;https://github.com/jonnyzzz/teamcity-test-script&quot;&gt;https://github.com/jonnyzzz/teamcity-test-script&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;UPD. I have re-evaluated approaches and decided to implement integration tests with 
&lt;a href=&quot;https://golang.org/pkg/testing/&quot;&gt;go test&lt;/a&gt; instead. The main problem was that I need to pass many 
parameters to my tool to start it in a test. Hard-coding those parameters for every test was not worth it. 
In Go it was easier to create an assertions API to check Consul KV state too. The API helps to setup 
necessary KV state too. The whole approach makes it simpler to write tests.&lt;/p&gt;

&lt;p&gt;I’m able to run all of my tests from &lt;a href=&quot;https://www.jetbrains.com/go/&quot;&gt;Gogland&lt;/a&gt;. 
The test assumes Consul is running by checking a particular file under the &lt;code&gt;GOPATH&lt;/code&gt;. 
There is a setup bash script that downloads and starts Consul dev server both for development and continuous integration. 
I extended the &lt;a href=&quot;/blog/2017/07/05/go-build/&quot;&gt;bash script&lt;/a&gt; for that.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="teamcity" />
  
    <category term="test" />
  
    <category term="testrunner" />
  
    <category term="shell" />
  
    <category term="bash" />
  
    <category term="ci" />
  
    <category term="go" />
  
    <category term="build" />
  
    <summary type="html">An ad-hoc bash test runner with TeamCity support</summary>
  
  </entry>
  
  <entry>
    <title type="html">Building Go Project</title>
    <link href="http://jonnyzzz.com/blog/2017/07/05/go-build/" rel="alternate" type="text/html" title="Building Go Project" />
    <published>2017-07-05T00:00:00+00:00</published>
    <updated>2017-07-05T00:00:00+00:00</updated>
    <id>/blog/2017/07/05/go-build</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/07/05/go-build/">&lt;p&gt;No Silver-Go-Bullet. Yet another ad-hoc build.&lt;/p&gt;

&lt;p&gt;I was doing a small Go command line tool project. All the time I was starting Go codebase, I looking for 
the proper way to setup project and to build it.&lt;/p&gt;

&lt;p&gt;The right build to me is the build which is reproducible. Such build is likely to be isolated 
from a machine where you run it. Be it Linux, Mac or Windows. 
Also, the right build should have all dependencies fixed. Otherwise, we have merely no chances
to recreated it in the future.&lt;/p&gt;

&lt;p&gt;As the very first example, I decided to use the approach from &lt;a href=&quot;https://github.com/hashicorp/consul-template&quot;&gt;Consul Template&lt;/a&gt;.
That time (May 2017) it was a &lt;code&gt;make&lt;/code&gt; based build which was using the official Docker container to run.
It was great! I was able to kick-start the project and to focus on development. But, it was crazy slow. 
It took seconds to compile a tiny project. It was also unable to run on Windows.&lt;/p&gt;

&lt;p&gt;I did research. Found several approaches to building Go with Gradle. I decided to try 
&lt;a href=&quot;https://github.com/gogradle/gogradle&quot;&gt;Gogradle&lt;/a&gt;. Also, there is &lt;a href=&quot;https://github.com/echocat/gradle-golang-plugin&quot;&gt;gradle-golang-plugin&lt;/a&gt;.
Overall, the story did not play well because some issues I came across. And again, the solution was heavy!&lt;/p&gt;

&lt;p&gt;Isolation. Docker. Cool stuff. But, the best stuff, it to think Docker, and event avoid it. The Go itself 
is amazing in that sense. The go binaries have zero dependencies. And this means we are able to zero-copy
dependencies.&lt;/p&gt;

&lt;p&gt;Finally, I created the following script. A still waiting for something better, and easier to use.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$( cd &amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;${BASH_SOURCE[0]}&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; -e -x -u

&lt;span class=&quot;nv&quot;&gt;GOVERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1.8.1

&lt;span class=&quot;nv&quot;&gt;LOCAL_DIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(pwd)/dist&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;LOCAL_GO_HOME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$LOCAL_DIST/go-$(uname)-$GOVERSION&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! -f &lt;span class=&quot;nv&quot;&gt;$LOCAL_GO_HOME&lt;/span&gt;/bin/go &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;GO_PKG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL_DIST&lt;/span&gt;/go-pkg-&lt;span class=&quot;nv&quot;&gt;$GOVERSION&lt;/span&gt;/go-binary.tar.gz
  &lt;span class=&quot;nv&quot;&gt;GO_UNPACK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL_DIST&lt;/span&gt;/go-pkg-&lt;span class=&quot;nv&quot;&gt;$GOVERSION&lt;/span&gt;/unpack

  rm -rf   &lt;span class=&quot;nv&quot;&gt;$GO_UNPACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;  &lt;/span&gt;mkdir -p &lt;span class=&quot;nv&quot;&gt;$GO_UNPACK&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$( uname )&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ .*&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Dd&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;arwin.* &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
    curl -o &lt;span class=&quot;nv&quot;&gt;$GO_PKG&lt;/span&gt; https://storage.googleapis.com/golang/go&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOVERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.darwin-amd64.tar.gz
  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
    curl -o &lt;span class=&quot;nv&quot;&gt;$GO_PKG&lt;/span&gt; https://storage.googleapis.com/golang/go&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;GOVERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.linux-amd64.tar.gz
  &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

  tar -xf &lt;span class=&quot;nv&quot;&gt;$GO_PKG&lt;/span&gt; -C &lt;span class=&quot;nv&quot;&gt;$GO_UNPACK&lt;/span&gt;

  rm -rf &lt;span class=&quot;nv&quot;&gt;$LOCAL_GO_HOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;  &lt;/span&gt;mkdir -p &lt;span class=&quot;nv&quot;&gt;$LOCAL_GO_HOME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;  &lt;/span&gt;mv &lt;span class=&quot;nv&quot;&gt;$GO_UNPACK&lt;/span&gt;/go/** &lt;span class=&quot;nv&quot;&gt;$LOCAL_GO_HOME&lt;/span&gt;/

  rm -f &lt;span class=&quot;nv&quot;&gt;$GO_PKG&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;PATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$LOCAL_GO_HOME/bin:$PATH&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$LOCAL_GO_HOME&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;GOPATH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;PATH
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;GOROOT
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;GOPATH
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CGO_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(which go)&amp;quot;&lt;/span&gt; !&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;$LOCAL_GO_HOME/bin/go&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Incorrect go binary is still used: $(which go)&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[[&lt;/span&gt; ! &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(go version)&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~ &lt;span class=&quot;s2&quot;&gt;&amp;quot;go${GOVERSION} &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Failed to install required Go version. &amp;quot;&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The script downloads Go binaries for Mac or Linux to a build folder. It does not update the folder if
there is Go already.&lt;/p&gt;

&lt;p&gt;You may find the actual version on GitHub. &lt;a href=&quot;https://github.com/jonnyzzz/go-build-script&quot;&gt;https://github.com/jonnyzzz/go-build-script&lt;/a&gt;
And let me know if you know the better way to Go.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="shell" />
  
    <category term="bash" />
  
    <category term="ci" />
  
    <category term="go" />
  
    <category term="build" />
  
    <summary type="html">No Silver-Go-Bullet. Yet another ad-hoc build.</summary>
  
  </entry>
  
</feed>
