<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="https://jonnyzzz.com/feed.xslt.xml"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link href="https://jonnyzzz.com/feed-internal.xml" rel="self" type="application/atom+xml" />
  <link href="https://jonnyzzz.com/" rel="alternate" type="text/html" />
  <updated>2018-07-23T20:34:05+00:00</updated>
  <id>/</id>

  
  <title type="html">Eugene Petrenko</title>
  

  
  <subtitle>@jonnyzzz personal page and blog</subtitle>
  

  

  
  
  <entry>
    <title type="html">Condition in Terraform and API Gateway</title>
    <link href="https://jonnyzzz.com/blog/2018/07/23/terraform-if/" rel="alternate" type="text/html" title="Condition in Terraform and API Gateway" />
    <published>2018-07-23T00:00:00+00:00</published>
    <updated>2018-07-23T00:00:00+00:00</updated>
    <id>/blog/2018/07/23/terraform-if</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/07/23/terraform-if/">&lt;p&gt;Create an AWS API Gateway resource based on conditions&lt;/p&gt;

&lt;p&gt;You may know &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;, the tool to create infrastructure
as a code. I use it for several &lt;a href=&quot;https://aws.amazon.com/&quot;&gt;AWS&lt;/a&gt; experiments, I do. 
It is declarative and uses HCL language to declare resources to create. Let’s see how
one can create resources based on a condition.&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I wrote scripts to create &lt;a href=&quot;https://aws.amazon.com/api-gateway/&quot;&gt;API Gateway&lt;/a&gt; for my project.
The API Gateway service is tricky, and in Terraform one uses several resources to make it work.&lt;/p&gt;

&lt;p&gt;You start with adding the
&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/api_gateway_rest_api.html&quot;&gt;aws_api_gateway_api&lt;/a&gt;
resource, which defines the API Gateway itself. Handler paths are represented 
as a &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_(data_structure)&quot;&gt;tree structure&lt;/a&gt;. The root of the 
tree matches to the empty path. The root node ID is returned from the &lt;code&gt;root_resource_id&lt;/code&gt; output
parameter of the &lt;code&gt;aws_api_gateway_api&lt;/code&gt; resource.&lt;/p&gt;

&lt;p&gt;I use Terraform &lt;a href=&quot;https://www.terraform.io/docs/modules/usage.html&quot;&gt;Modules&lt;/a&gt; in my scripts
to reduce complexity. Modules are the same as functions in other programming languages. 
It helps to reuse code and reduce duplicates.&lt;/p&gt;

&lt;h2 id=&quot;the-need-of-a-condition&quot;&gt;The Need of a Condition&lt;/h2&gt;

&lt;p&gt;I have a module to define API Gateway handlers. That module accepts a handler path and the 
&lt;code&gt;root_resource_id&lt;/code&gt; parameter. In the module, I have to decide either
to create new resource 
&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/api_gateway_resource.html&quot;&gt;aws_api_gateway_resource&lt;/a&gt;,
for non-empty path, or to use the base &lt;code&gt;root_resource_id&lt;/code&gt; instead, for the empty one.&lt;/p&gt;

&lt;p&gt;In a pseudo-code the problem looks as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;root_resource_id&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;aws_api_gateway_resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;a-condition-implementation&quot;&gt;A Condition Implementation&lt;/h2&gt;

&lt;p&gt;I head that story from my friend Mikhail Kuzmin several years ago. I have no idea,
how I recalled that, but still. He told me something about the &lt;code&gt;count&lt;/code&gt; parameter is helpful
to implement a condition in Terraform.&lt;/p&gt;

&lt;p&gt;Also, I found that in Terraform we have 
&lt;a href=&quot;https://www.terraform.io/docs/configuration/interpolation.html#conditionals&quot;&gt;ternary operator expression&lt;/a&gt;,
aka &lt;code&gt;condition ? foo : bar&lt;/code&gt;, which helps me to extract the right resource ID at the end.&lt;/p&gt;

&lt;p&gt;The overall condition for a resource did not look trivial. I decided to extract it as a dedicated module
from the very beginning. That is what I created:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;variable &amp;quot;api_gateway_id&amp;quot; {}
variable &amp;quot;parent_resource_id&amp;quot; {}

variable &amp;quot;path_part&amp;quot; {
  description = &amp;quot;Resource path or empty string to use parent_resource_id&amp;quot;
}

resource &amp;quot;aws_api_gateway_resource&amp;quot; &amp;quot;handler&amp;quot; {
  parent_id   = &amp;quot;${var.parent_resource_id}&amp;quot;
  rest_api_id = &amp;quot;${var.api_gateway_id}&amp;quot;

  path_part   = &amp;quot;${var.path_part}&amp;quot;

  count       = &amp;quot;${var.path_part == &amp;quot;&amp;quot; ? 0 : 1 }&amp;quot;
}

output &amp;quot;handler_id&amp;quot; {
  value = &amp;quot;${
    var.path_part == &amp;quot;&amp;quot;
    ? var.parent_resource_id
    : element(concat(aws_api_gateway_resource.handler.*.id, list(&amp;quot;&amp;quot;)),0)
  }&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I do several tricks in that module. The first trick is to set &lt;code&gt;count&lt;/code&gt; for &lt;code&gt;aws_api_gateway_resource&lt;/code&gt;
to zero when I need no resource created. Otherwise, I put &lt;code&gt;count = 1&lt;/code&gt;, which is the default.&lt;/p&gt;

&lt;p&gt;The second trick is in the &lt;code&gt;hardler_id&lt;/code&gt; output parameters. I select
either the created ID or the &lt;code&gt;parent_resource_id&lt;/code&gt; parameter.&lt;/p&gt;

&lt;h2 id=&quot;ternary-expression-and-complexity&quot;&gt;Ternary Expression and Complexity&lt;/h2&gt;

&lt;p&gt;You may want to ask, why is it so complicated, me too. I started with the more 
trivial variant of the second condition:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;output &amp;quot;handler_id&amp;quot; {
  value = &amp;quot;${
    var.path_part == &amp;quot;&amp;quot;
    ? var.parent_resource_id
    : element(aws_api_gateway_resource.handler.*.id,0)
  }&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then, I found out that Terraform computes both expressions in the ternary
expression. It differs from the semantics we got used from C-like languages. And so, 
I had to have a non-empty list in the second expression. I use the &lt;code&gt;concat&lt;/code&gt; to 
join two lists, and &lt;code&gt;list(&quot;&quot;)&lt;/code&gt; to create a new list with one element.
Finally, &lt;code&gt;concat(aws_api_gateway_resource.handler.*.id, list(&quot;&quot;)&lt;/code&gt; does the trick 
making a list contain at least one element, even if the &lt;code&gt;count&lt;/code&gt; was equal to &lt;code&gt;0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;That is how I found the workable condition expression from the full example above.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-ternary-operator&quot;&gt;Avoiding Ternary Operator&lt;/h2&gt;

&lt;p&gt;I was speaking with a colleague on that, and realized, the code can be simplified. 
Instead of the conditional operator, 
now I join two lists and pick the first element:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;output &amp;quot;handler_id&amp;quot; {
  value = &amp;quot;${
    element(concat(aws_api_gateway_resource.handler.*.id, list(root_resource_id)), 0) 
  }&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;aws_api_gateway_resource.handler.*.id&lt;/code&gt; gives me an empty list if &lt;code&gt;count = 0&lt;/code&gt;.
That works the same way, but better and shorter. We have only one real condition in 
the code now.&lt;/p&gt;

&lt;h2 id=&quot;recursive-creation&quot;&gt;Recursive Creation&lt;/h2&gt;

&lt;p&gt;I got yet another crazy idea. What if I wish to support &lt;code&gt;long/path/to/create&lt;/code&gt; in my module.
What shall I do? The idea was to call the same module recursively for all needed path parts
to build the resources tree.&lt;/p&gt;

&lt;p&gt;I failed.&lt;/p&gt;

&lt;p&gt;There are several problems, I came across. The first one. It is not possible to have a
&lt;code&gt;count&lt;/code&gt; parameter on Terraform module usage.&lt;/p&gt;

&lt;p&gt;https://github.com/hashicorp/terraform/issues/953&lt;/p&gt;

&lt;p&gt;I tried to include the same module from itself. It turned out, Terraform does not
support such inclusion and starts an infinite resolution in &lt;code&gt;terraform init&lt;/code&gt; call.&lt;/p&gt;

&lt;p&gt;What if I fix &lt;code&gt;source&lt;/code&gt; attribute? 
It is not possible too. One is not allowed to use a non-constant expression for the &lt;code&gt;source&lt;/code&gt; 
parameter of a module.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I recalled and implemented the common pattern in Terraform to handle a conditional resources
creation and applied it for AWS API Gateway resources. It plays well for my project, 
and I hope it will help you too.&lt;/p&gt;

&lt;p&gt;Note. It cost me hours of endless debugging. One needs to call
&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/api_gateway_deployment.html&quot;&gt;api_gateway_deployment&lt;/a&gt;
after &lt;em&gt;any&lt;/em&gt; change in the API Gateway configuration is done. 
That is hard to code all dependencies in Terraform correctly for it. It is even harder
if you have modules around.&lt;/p&gt;

&lt;p&gt;I code Terraform scripts in 
&lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; with 
the fantastic plugin done by a friend of mine: 
&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support&quot;&gt;Terraform Support plugin&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="terraform" />
  
    <category term="aws" />
  
    <category term="api gateway" />
  
    <category term="cloud" />
  
    <category term="infrastructure" />
  
    <summary type="html">Create an AWS API Gateway resource based on conditions</summary>
  
  </entry>
  
  <entry>
    <title type="html">Java Builders with Kotlin</title>
    <link href="https://jonnyzzz.com/blog/2018/07/18/kotlin-builder/" rel="alternate" type="text/html" title="Java Builders with Kotlin" />
    <published>2018-07-18T00:00:00+00:00</published>
    <updated>2018-07-18T00:00:00+00:00</updated>
    <id>/blog/2018/07/18/kotlin-builder</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/07/18/kotlin-builder/">&lt;p&gt;A higher order function to simplify Java builders usage&lt;/p&gt;

&lt;p&gt;I was working with &lt;a href=&quot;https://auth0.com/&quot;&gt;auth0&lt;/a&gt;’s &lt;a href=&quot;https://github.com/auth0/java-jwt&quot;&gt;java library&lt;/a&gt;
to issue and verify &lt;a href=&quot;https://tools.ietf.org/html/rfc7519&quot;&gt;JWT&lt;/a&gt; tokens. The library
is &lt;a href=&quot;https://twitter.com/jonnyzzz/status/1016575537257607168&quot;&gt;easy to use and pretty strait-forward&lt;/a&gt;.
At some point, I had a Kotlin code to issue a JWT token:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JWT&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
       &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withIssuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISSUER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;userId&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;serviceId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;serviceId&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The code is trivial. I create a new JWT token and fill claims with some data.
I put a claim only if a respective data is not &lt;code&gt;null&lt;/code&gt;. 
The code above is long and hard to read. Typically, one writes it with a copy-paste
approach. I’m not an exception here too. I even did a typoe copying 
things: &lt;code&gt;&quot;userId&quot;&lt;/code&gt; is used twice:&lt;/p&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-conversation=&quot;none&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;And that I had before &lt;a href=&quot;https://t.co/2grxbvpKnP&quot;&gt;pic.twitter.com/2grxbvpKnP&lt;/a&gt;&lt;/p&gt;&amp;mdash; Eugene Petrenko (@jonnyzzz) &lt;a href=&quot;https://twitter.com/jonnyzzz/status/1016602927102820352?ref_src=twsrc%5Etfw&quot;&gt;July 10, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;h1 id=&quot;immutability&quot;&gt;Immutability&lt;/h1&gt;

&lt;p&gt;The best programs, so far, are immutable programs. Let’s make the &lt;code&gt;builder&lt;/code&gt; variable immutable.
Here is the trick I like in Kotlin. Usually, a builder function returns a builder instance, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Something&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You never know, if a returned &lt;code&gt;Builder&lt;/code&gt; is the same as the &lt;code&gt;Builder&lt;/code&gt; you call a &lt;code&gt;with*()&lt;/code&gt; 
method on. As of &lt;code&gt;Builder&lt;/code&gt; implementation, it is hard to return a new instance of a
builder every time. People tend
to &lt;code&gt;return this&lt;/code&gt; from builder functions, it is just easier and does not require tricks.&lt;/p&gt;

&lt;p&gt;I see the dilemma here. Do we assume the &lt;code&gt;Builder&lt;/code&gt; is mutable or not?&lt;/p&gt;

&lt;p&gt;Kotlin &lt;a href=&quot;https://kotlinlang.org/docs/reference/data-classes.html&quot;&gt;data classes&lt;/a&gt; and &lt;code&gt;copy(...)&lt;/code&gt; function
makes it easier, no you know it.&lt;/p&gt;

&lt;h2 id=&quot;mutable-builder&quot;&gt;Mutable Builder&lt;/h2&gt;

&lt;p&gt;Let’s assume the &lt;code&gt;Builder&lt;/code&gt; returns &lt;code&gt;this&lt;/code&gt; from &lt;code&gt;with*(...)&lt;/code&gt; methods.
And trivially, we may turn the &lt;code&gt;builder&lt;/code&gt; variable to be immutable 
and call &lt;code&gt;with*(...)&lt;/code&gt; methods:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;userId&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;...&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I do not like that assumption. A sudden change of the builder 
implementation will introduce a hard to find a bug in the code.&lt;/p&gt;

&lt;h2 id=&quot;immutable-or-mutable-builder&quot;&gt;Immutable or Mutable Builder&lt;/h2&gt;

&lt;p&gt;Now, let’s assume we have no assumptions on &lt;code&gt;Builder&lt;/code&gt; implementation. It is 
allowed and not forced to return same &lt;code&gt;this&lt;/code&gt; from a &lt;code&gt;with*()&lt;/code&gt; functions. We still need either 
a mutable variable &lt;code&gt;builder&lt;/code&gt; or a longer expression.&lt;/p&gt;

&lt;h2 id=&quot;expression-and-extension-functions&quot;&gt;Expression and Extension Functions&lt;/h2&gt;

&lt;p&gt;But, here we need a function call that takes &lt;code&gt;Builder&lt;/code&gt; as the receiver, 
aka &lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension function&lt;/a&gt;,
and the function should check and call something in the builder.&lt;/p&gt;

&lt;p&gt;I created the following function:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ƒ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ƒ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That one allows me to turn the whole method into:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withIssuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISSUER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;userId&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;serviceId&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I like that one. It is shorted and read better!&lt;/p&gt;

&lt;h2 id=&quot;reflection-and-callable-references&quot;&gt;Reflection and Callable References&lt;/h2&gt;

&lt;p&gt;I got the question from my friend on Twitter&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;Is it possible to get rid of strings, too?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote class=&quot;twitter-tweet&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Is it possible to get rid of strings, too?&lt;/p&gt;&amp;mdash; Eugeny Schepotiev (@zeckson) &lt;a href=&quot;https://twitter.com/zeckson/status/1016965146424426496?ref_src=twsrc%5Etfw&quot;&gt;July 11, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;It is possible, for that, you use
&lt;a href=&quot;https://kotlinlang.org/docs/reference/reflection.html#property-references&quot;&gt;property references&lt;/a&gt;
and &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.reflect/-k-property/index.html&quot;&gt;KProperty&lt;/a&gt;
to grab property name at the runtime:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;KProperty0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&amp;gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Builder&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JWT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withIssuer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ISSUER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withClaim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sign&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;algorithm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
        &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I use &lt;code&gt;principal::userId&lt;/code&gt; and &lt;code&gt;principal::serviceId&lt;/code&gt; to pass both the property name 
and the function to get the property value. It makes the code shorter.
We do not have the explicit names anymore.&lt;/p&gt;

&lt;p&gt;One should understand the &lt;em&gt;risk&lt;/em&gt;. A sudden
refactoring and rename of &lt;code&gt;userId&lt;/code&gt; or &lt;code&gt;serviceId&lt;/code&gt; properties of the &lt;code&gt;principal&lt;/code&gt; class 
will change the names we use in the builder. It may
cause trouble on a production. Several unit 
tests (or integration tests) will help to preserve the API.&lt;/p&gt;

&lt;p&gt;The same trick with &lt;a href=&quot;https://kotlinlang.org/docs/reference/reflection.html#callable-references&quot;&gt;callable references&lt;/a&gt;
works for functions too. You might check the whole documentation page on
&lt;a href=&quot;https://kotlinlang.org/docs/reference/reflection.html&quot;&gt;reflection in Kotlin&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I checked, and it is not required (at least with Kotlin/JVM v1.2.51) to have &lt;code&gt;kotlin-reflect&lt;/code&gt; library to make the example above
work.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="java" />
  
    <category term="builder" />
  
    <category term="dsl" />
  
    <summary type="html">A higher order function to simplify Java builders usage</summary>
  
  </entry>
  
  <entry>
    <title type="html">Terraform Wrapper</title>
    <link href="https://jonnyzzz.com/blog/2018/07/05/terraform-wrapper/" rel="alternate" type="text/html" title="Terraform Wrapper" />
    <published>2018-07-05T00:00:00+00:00</published>
    <updated>2018-07-05T00:00:00+00:00</updated>
    <id>/blog/2018/07/05/terraform-wrapper</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/07/05/terraform-wrapper/">&lt;p&gt;Use Terraform without install&lt;/p&gt;

&lt;p&gt;It is always a problem to have the right tools installed. Right versions often mean the
versions specific to a given project or branch. What if you need several at a time?&lt;/p&gt;

&lt;p&gt;I like to zero-configuration approach, where one does not change the global state
of the machine. And it plays nicely if you have several working machines too!&lt;/p&gt;

&lt;p&gt;Here is what I do to use Terraform in &lt;code&gt;bash&lt;/code&gt;, tested on macOS:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$( cd &amp;quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; dirname &lt;span class=&quot;s2&quot;&gt;&amp;quot;${BASH_SOURCE[0]}&amp;quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;amp;&amp;amp; pwd )&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TERRAFORM_ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(cd &amp;quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$DIR&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot; &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; pwd)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;AWS_ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;$(cd ~/.aws &amp;amp;&amp;amp; pwd)&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;TERRAFORM_VERSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.11.7

docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --rm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          -it &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --dns &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;dig +short &amp;lt;YOUR DNS&amp;gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; tail -1&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --volume &lt;span class=&quot;s2&quot;&gt;&amp;quot;$TERRAFORM_ROOT:$TERRAFORM_ROOT&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --volume &lt;span class=&quot;s2&quot;&gt;&amp;quot;$AWS_ROOT:/root/.aws:ro&amp;quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          --workdir &lt;span class=&quot;s2&quot;&gt;&amp;quot;$(pwd)&amp;quot;&lt;/span&gt;  &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
          hashicorp/terraform:&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TERRAFORM_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$*&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I code Terraform scripts in 
&lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; with 
the amazing plugin done by a friend of mine: 
&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support&quot;&gt;Terraform Support plugin&lt;/a&gt;
.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="terraform" />
  
    <category term="devops" />
  
    <category term="aws" />
  
    <category term="docker" />
  
    <summary type="html">Use Terraform without install</summary>
  
  </entry>
  
  <entry>
    <title type="html">Understanding isOSVersionAtLeast on macOS</title>
    <link href="https://jonnyzzz.com/blog/2018/06/13/link-error-3/" rel="alternate" type="text/html" title="Understanding isOSVersionAtLeast on macOS" />
    <published>2018-06-13T00:00:00+00:00</published>
    <updated>2018-06-13T00:00:00+00:00</updated>
    <id>/blog/2018/06/13/link-error-3</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/06/13/link-error-3/">&lt;p&gt;Understanding ___isOSVersionAtLeast on macOS is not defined&lt;/p&gt;

&lt;h2 id=&quot;include&quot;&gt;Include&lt;/h2&gt;

&lt;p&gt;I came across with the linker problem. My application was not able to link with the
&lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;___isOSVersionAtLeast symbol is undefined&lt;/a&gt; error.
It was the problem linking &lt;code&gt;curl&lt;/code&gt; with a
&lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt;
app. I did a tiny project to &lt;a href=&quot;https://github.com/jonnyzzz/demo-static-lib&quot;&gt;reproduce the linker error&lt;/a&gt;.
As a side effect, here is a &lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;Minimalistic C library and Kotlin/Native&lt;/a&gt;
example. And finally, the main &lt;a href=&quot;/blog/2018/06/05/link-error-2/&quot;&gt;rant and investigation post&lt;/a&gt;. The good part
is I got a suggestion to try.&lt;/p&gt;

&lt;h2 id=&quot;use-clang-not-ld&quot;&gt;Use clang not ld&lt;/h2&gt;

&lt;p&gt;The suggestion I got (and I say thank you for that) was to use &lt;code&gt;clang&lt;/code&gt; command, not the &lt;code&gt;ld&lt;/code&gt; one:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;clang -mmacosx-version-min&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.10 -lc main.o lib.a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It did work. It was able to link. Next, we may try &lt;code&gt;-v&lt;/code&gt; switch to see how it works inside, 
with arguments split per lines and long paths simplified:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; clang -mmacosx-version-min=10.10 -lc main.o lib.a -v

Apple LLVM version 9.1.0 (clang-902.0.39.2)
Target: x86_64-apple-darwin17.6.0
Thread model: posix
InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld 
    -demangle 
    -lto_library /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/libLTO.dylib 
    -dynamic 
    -arch x86_64 
    -macosx_version_min 10.10.0 
    -o a.out 
    -lc 
    main.o 
    lib.a 
    -lSystem 
    /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.1.0/lib/darwin/libclang_rt.osx.a
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The right path (and I did it wrong in the &lt;a href=&quot;/blog/2018/06/05/link-error-2/&quot;&gt;previous post&lt;/a&gt;) is&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/clang/9.1.0/lib/darwin/libclang_rt.osx.a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Still, the best way to use that commandline is to have no such commandline in the build.&lt;/p&gt;

&lt;h2 id=&quot;the-linker-error-solution&quot;&gt;The Linker Error Solution&lt;/h2&gt;

&lt;p&gt;The answer here is to use &lt;code&gt;clang&lt;/code&gt; command instead of &lt;code&gt;ld&lt;/code&gt; command. Note, that
command line options are different, and &lt;code&gt;clang&lt;/code&gt; calls
(specify &lt;code&gt;-v&lt;/code&gt; key to see that) &lt;code&gt;ld&lt;/code&gt; with additional arguments.&lt;/p&gt;

&lt;h1 id=&quot;linking-with-kotlinnative&quot;&gt;Linking with Kotlin/Native&lt;/h1&gt;

&lt;p&gt;At that point, we have a workable &lt;code&gt;inc.sh&lt;/code&gt; script to compile and link the static library with the executable
&lt;a href=&quot;https://github.com/jonnyzzz/demo-static-lib&quot;&gt;in the repository on GitHub&lt;/a&gt;. Time to fix &lt;code&gt;in.sh&lt;/code&gt; that links
the static C library with a &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt;
executable. You may want to have a look at the introductory post
&lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;a-dumb-approach&quot;&gt;A Dumb Approach&lt;/h2&gt;

&lt;p&gt;The very first (and dump) fix is to include the &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; path (see above) into the &lt;code&gt;konanc&lt;/code&gt; call with
the &lt;code&gt;-linkerOpts &amp;lt;path&amp;gt;/libclang_rt.osx.a&lt;/code&gt;. It make the code compile and run.&lt;/p&gt;

&lt;h2 id=&quot;right-approach&quot;&gt;Right Approach&lt;/h2&gt;

&lt;p&gt;Let’s debug how Kotlin/Native executes the linker first. You pass the &lt;code&gt;--verbose linker&lt;/code&gt; to see the verbose output 
from the linking phase (use &lt;code&gt;konanc --list_phases&lt;/code&gt; to learn all phases). The output on my machine is as follows, 
with arguments split per lines and long paths simplified:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;gt; konanc -l lib.klib main.kt -linkerOpts  lib.a  -linkerOpts $L -o main.kexe --verbose linker

/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/ld \
    -demangle
    -object_path_lto temporary.o 
    -lto_library /Users/jonnyzzz/.konan/dependencies/clang-llvm-5.0.0-darwin-macos/lib/libLTO.dylib 
    -dynamic 
    -arch x86_64 
    -macosx_version_min 10.11.0 
    -syslibroot /Applications/Xcode.app/&amp;lt;...&amp;gt;/SDKs/MacOSX10.13.sdk 
    -o &amp;lt;target folder&amp;gt;/main.kexe 
    &amp;lt;temp folder&amp;gt;/combined.o 
    -S 
    -lc++ 
    -lobjc 
    -framework Foundation 
    -lSystem &amp;lt;Konan Toolchaing path&amp;gt;/libffi.a 
    -alias _Konan_main _main 
    lib.a 
    &amp;lt;our hack path to&amp;gt;/libclang_rt.osx.a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s compare the commands. The linker executable is selected right from both sides. The sensible difference
is we miss &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; from the Kotlin/Native command. There are two ways to go:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;link the &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; with &lt;code&gt;lib.a&lt;/code&gt; before the final linking&lt;/li&gt;
  &lt;li&gt;infer path to &lt;code&gt;libclang_rt.osx.a&lt;/code&gt; and include it into the linker command&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Checking &lt;code&gt;clang --help&lt;/code&gt; and I found the &lt;code&gt;-print-libgcc-file-name&lt;/code&gt; argument. It does provide hints, 
but it is not enough just now.&lt;/p&gt;

&lt;h1 id=&quot;the-outcome&quot;&gt;The Outcome&lt;/h1&gt;

&lt;p&gt;Frankly, I do not like linking with &lt;code&gt;libclang_rt&lt;/code&gt; explicitly. The library is a part
of toolchain internals. It will make builds too fragile or not incorrect.
The hack will not worth it in the long run.&lt;/p&gt;

&lt;p&gt;The right way, as I see it, is to fix the original library build to make 
sure it is pre-linked with all necessary internals.
That matches with the encapsulation principle. It simplifies the rest. 
The backup plan is to call &lt;code&gt;clang&lt;/code&gt; with &lt;code&gt;-v&lt;/code&gt; key, parse the command output
to get the path to the &lt;code&gt;libclang_rt&lt;/code&gt;, and use it as an explicit library.&lt;/p&gt;

&lt;h2 id=&quot;building-curl&quot;&gt;Building Curl&lt;/h2&gt;

&lt;p&gt;A pre-history. I first saw the missing &lt;code&gt;___isOSVersionAtLeast&lt;/code&gt; symbol error
while 
&lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;building and static linking&lt;/a&gt;
the &lt;a href=&quot;https://curl.haxx.se&quot;&gt;libcurl&lt;/a&gt;. My goal is to have a
self-contained static library out of it.&lt;/p&gt;

&lt;p&gt;I used the wrong artifact and build it incorrectly. I see the right static library 
is somewhere under &lt;code&gt;curl&lt;/code&gt; build directory. 
I did that wrong. Do that right. Respect the privacy and build internals.&lt;/p&gt;

&lt;p&gt;The right way is&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;to set install prefix path in &lt;code&gt;./configure&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;to call &lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;use artifacts for the prefix path&lt;/li&gt;
  &lt;li&gt;deliver the &lt;code&gt;libclang_rt&lt;/code&gt; as dependency (or &lt;a href=&quot;https://stackoverflow.com/questions/3821916/how-to-merge-two-ar-static-libraries-into-one&quot;&gt;merge it in?&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The library under the prefix do contain reference to our 
favorite &lt;code&gt;___isOSVersionAtLeast&lt;/code&gt; symbol. The &lt;code&gt;make install&lt;/code&gt; package
looks reusable and reduces hard-coded build hacks, still.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <category term="curl" />
  
    <summary type="html">Understanding ___isOSVersionAtLeast on macOS is not defined</summary>
  
  </entry>
  
  <entry>
    <title type="html">Undefined isOSVersionAtLeast on macOS</title>
    <link href="https://jonnyzzz.com/blog/2018/06/05/link-error-2/" rel="alternate" type="text/html" title="Undefined isOSVersionAtLeast on macOS" />
    <published>2018-06-05T00:00:00+00:00</published>
    <updated>2018-06-05T00:00:00+00:00</updated>
    <id>/blog/2018/06/05/link-error-2</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/06/05/link-error-2/">&lt;p&gt;Solving ___isOSVersionAtLeast is undefined or CLang intrinsics.&lt;/p&gt;

&lt;p&gt;A few weeks ago I wrote about &lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;___isOSVersionAtLeast is undefined&lt;/a&gt; problem.
At some point I realized I did NOT find a solution.&lt;/p&gt;

&lt;p&gt;That time I focused on reproducing the problem with a tiny library of only a 
few code lines. I did that. A tiny static library.
It wrote details in the recent post
&lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;Minimalistic C library and Kotlin/Native&lt;/a&gt;.
Now I can check the linking either with 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt; 
or with a plain C.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;main.c&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;lib.h&amp;quot;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The result is %d&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I call the following to compile and link &lt;code&gt;main.c&lt;/code&gt; with my &lt;code&gt;lib.a&lt;/code&gt; 
&lt;a href=&quot;/blog/2018/05/28/minimalistic-kn/&quot;&gt;library&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gcc -c  main.c -o main.o
ld -macosx_version_min 10.10  -lc  main.o lib.a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I do the on macOS 10.13.3 with Xcode 9.3.1 and macOS 10.13.5, Xcode 9.4.&lt;/p&gt;

&lt;h2 id=&quot;the-linkage-error&quot;&gt;The Linkage Error&lt;/h2&gt;

&lt;p&gt;It was an assumption of mine to check for 
&lt;a href=&quot;https://clang.llvm.org/docs/LanguageExtensions.html&quot;&gt;Clang Language Extensions&lt;/a&gt;,
and finally, I was able to reproduce the linkage error with 
only the following code in &lt;code&gt;lib.c&lt;/code&gt; targeting macOS &lt;code&gt;10.10&lt;/code&gt;, but not macOS &lt;code&gt;10.13&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;/// that is a CLang extension&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__builtin_available&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;macOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;iOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tvOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;9.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;watchOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And the linker error:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Undefined symbols for architecture x86_64:
  &amp;quot;___isOSVersionAtLeast&amp;quot;, referenced from:
      _foo in lib.a(lib.o)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I ran the &lt;code&gt;ld&lt;/code&gt; command with &lt;code&gt;-macosx_version_min 10.10&lt;/code&gt; to target macOS &lt;code&gt;10.10&lt;/code&gt;. The 
argument specifies the minimal version of macOS the created binary supports.&lt;/p&gt;

&lt;p&gt;More experiments with arguments help me to find that CLang is smart to optimize that 
code if the check makes no sense.
For example, CLang optimizes the call &lt;code&gt;__builtin_available(macOS 10.12,*)&lt;/code&gt; when I target
&lt;code&gt;10.12&lt;/code&gt; or &lt;code&gt;10.13&lt;/code&gt;. It also means no linkage error. 
The call &lt;code&gt;__builtin_available(macOS 10.14,*)&lt;/code&gt; is never optimized, as long as I cannot target
&lt;code&gt;10.14&lt;/code&gt; yet.&lt;/p&gt;

&lt;p&gt;My &lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;linkage problem&lt;/a&gt; was not in the target version 
specification at all. Otherwise, the problem was with a missing library. I was missing the 
compiler-runtime library in my &lt;code&gt;ld&lt;/code&gt; call.
I found the hacky path (on &lt;a href=&quot;https://www.google.de/search?q=works+on+my+machine&quot; target=&quot;_blank&quot;&gt;my machine&lt;/a&gt;) 
to solve the linker error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/Library/Developer/CommandLineTools/usr/lib/clang/9.1.0/lib/darwin/libclang_rt.osx.a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That one defines the symbol I was missing. The only problem is the path hard-codes 
too many internals. It is too internal to be used directly from a build. It seems to 
be a part of Xcode 9.1.0, which is too old.&lt;/p&gt;

&lt;h2 id=&quot;compiler-rt&quot;&gt;compiler-rt&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://compiler-rt.llvm.org/&quot;&gt;LLVM “compiler-rt”&lt;/a&gt; that is the place with the documentation
of the LLVM and CLang features, that requires a runtime. It includes nice and helpful 
features inside. There is still no answer with the correct linker options.
I have no plans to build my own toolchain.&lt;/p&gt;

&lt;h2 id=&quot;the-right-fix&quot;&gt;The right fix&lt;/h2&gt;

&lt;p&gt;The best fix for &lt;code&gt;___isOSVersionAtLeast&lt;/code&gt; undefined symbol so far is to include the missing 
runtime library to an &lt;code&gt;ld&lt;/code&gt; command. It only needs a path to the static library with no other
arguments. Shall a build tool help here? I do not know yet.&lt;/p&gt;

&lt;p&gt;The worst here is one needs to generate the path manually. One need to know the Xcode (aka toolchain)
version to do that. And the trickiest is to make sure the path is updated once Xcode or something
else is updated.&lt;/p&gt;

&lt;p&gt;I am looking to find the best way to include the &lt;code&gt;compiler-rt&lt;/code&gt;. If you know something, 
please comment below.&lt;/p&gt;

&lt;p&gt;Continue reading the &lt;a href=&quot;/blog/2018/06/13/link-error-3/&quot;&gt;next part of the investigation&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <summary type="html">Solving ___isOSVersionAtLeast is undefined or CLang intrinsics.</summary>
  
  </entry>
  
  <entry>
    <title type="html">Minimalistic C library and Kotlin/Native</title>
    <link href="https://jonnyzzz.com/blog/2018/05/28/minimalistic-kn/" rel="alternate" type="text/html" title="Minimalistic C library and Kotlin/Native" />
    <published>2018-05-28T00:00:00+00:00</published>
    <updated>2018-05-28T00:00:00+00:00</updated>
    <id>/blog/2018/05/28/minimalistic-kn</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/05/28/minimalistic-kn/">&lt;p&gt;The most trivial &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt; 
example of using &lt;code&gt;C&lt;/code&gt; library&lt;/p&gt;

&lt;p&gt;Some time ago I stuck linking a C binary into an executable with 
&lt;a href=&quot;/blog/2018/05/16/link-error/&quot;&gt;___isOSVersionAtLeast is undefined&lt;/a&gt;. 
And thus I decided to simplify things to localize the problem. I will write 
a dedicated post with the solution for &lt;code&gt;___isOSVersionAtLeast is undefined&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let’s focus on the most trivial library example. To start with, I assume 
you have &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt;
compiler in the OS Path. Have a look at 
&lt;a href=&quot;https://kotlinlang.org/docs/tutorials/native/basic-kotlin-native-app.html#obtaining-the-compiler&quot;&gt;the main tutorial&lt;/a&gt;
or merely download the compiler from &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/releases&quot; target=&quot;_blank&quot;&gt;GitHub Releases page&lt;/a&gt;.
Beware, the compiler will download the toolchain on the very first run.
The &lt;code&gt;konanc&lt;/code&gt; and &lt;code&gt;cinterop&lt;/code&gt; tools should be in the &lt;code&gt;PATH&lt;/code&gt; of your terminal or console.&lt;/p&gt;

&lt;p&gt;The rest of the post is created and tested on macOS. It should just work on Linux, but I did not check it. 
You shall have C/C++ toolchain installed too. On macOS, it is enough to install and run Xcode.&lt;/p&gt;

&lt;h2 id=&quot;c-library&quot;&gt;C Library&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;lib.h&lt;/code&gt; file looks as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef LIB2_H_INCLUDED&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LIB2_H_INCLUDED&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;“&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;”&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef __cplusplus&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LIB2_H_INCLUDED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;extern &quot;C&quot;&lt;/code&gt; block is not needed (unless you use C++) and left here 
for &lt;a href=&quot;https://stackoverflow.com/questions/1041866/what-is-the-effect-of-extern-c-in-c&quot;&gt;C++ compatibility&lt;/a&gt;.
Thus you may shrink the file to &lt;code&gt;lib.h&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#ifndef LIB2_H_INCLUDED&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define LIB2_H_INCLUDED&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif &lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//LIB2_H_INCLUDED&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;a href=&quot;https://stackoverflow.com/questions/1653958/why-are-ifndef-and-define-used-in-c-header-files&quot;&gt;#include guards&lt;/a&gt;
in your &lt;code&gt;.h&lt;/code&gt; files are a standard ritual. They are necessary for multiple &lt;code&gt;.h&lt;/code&gt; files projects.&lt;/p&gt;

&lt;p&gt;The code above declares one function for export &lt;code&gt;int foo()&lt;/code&gt;. We use the &lt;code&gt;.h&lt;/code&gt; file later 
with Kotlin/Native &lt;code&gt;cinterop&lt;/code&gt; tool import the function into Kotlin/Native.&lt;/p&gt;

&lt;p&gt;Let’s create a &lt;code&gt;lib.c&lt;/code&gt; for implementation for the &lt;code&gt;foo&lt;/code&gt; function in C:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;quot;lib.h&amp;quot;&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we compile the C sources into a C library. For that we call &lt;code&gt;gcc&lt;/code&gt; to compile (and link)
the &lt;code&gt;.c&lt;/code&gt; sources into a C static library:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;gcc -c &lt;span class=&quot;s2&quot;&gt;&amp;quot;-I$(pwd)&amp;quot;&lt;/span&gt; lib.c -o lib.o
ar rcs lib.a lib.o&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It will be a bit more complicated if you have several &lt;code&gt;.c&lt;/code&gt; source files.&lt;/p&gt;

&lt;p&gt;At that moment we have&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lib.h&lt;/code&gt; – the header&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.c&lt;/code&gt; – the implementation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.o&lt;/code&gt; – the intermediate object file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.a&lt;/code&gt; – the compiled static library&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;importing-to-kotlinnative&quot;&gt;Importing to Kotlin/Native&lt;/h2&gt;

&lt;p&gt;We need to import the C library to be used with Kotlin/Native. It is as tricky as 
calling a &lt;code&gt;cinterop&lt;/code&gt; tool.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cinterop&lt;/code&gt; tool uses the definition file for my library &lt;code&gt;lib.def&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;header = lib.h&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The file helps to specify all necessary options for bigger libraries.&lt;/p&gt;

&lt;p&gt;Not it is the time to call the &lt;code&gt;cinterop&lt;/code&gt; with the following options:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;cinterop -def lib.def -compilerOpts &lt;span class=&quot;s2&quot;&gt;&amp;quot;-I$(pwd)&amp;quot;&lt;/span&gt; -o lib.klib&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result is a &lt;code&gt;lib.klib&lt;/code&gt; file. A Kotlin/Native library file. It contains Kotlin APIs for 
our &lt;code&gt;lib.h&lt;/code&gt;. It bridges C types and Kotlin/Native types (trivial &lt;code&gt;Int&lt;/code&gt; in our case) and helps
to deal with memory management (not needed for our example).&lt;/p&gt;

&lt;p&gt;At that moment we have&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;lib.h&lt;/code&gt; – the header&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.c&lt;/code&gt; – the implementation&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.o&lt;/code&gt; – the intermediate object file&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.a&lt;/code&gt; – the compiled static library&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.def&lt;/code&gt; – the definitions for &lt;code&gt;cinterop&lt;/code&gt;, reference to &lt;code&gt;lib.h&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;lib.klib&lt;/code&gt; – the compiled Kotlin/Native library to access API from &lt;code&gt;lib.h&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;compiling-with-kotlinnative&quot;&gt;Compiling with Kotlin/Native&lt;/h2&gt;

&lt;p&gt;We need an entry point and Kotlin sources. I created the &lt;code&gt;main.kt&lt;/code&gt; file for that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;The foo() from lib.h returned $z&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And I compile it with the following command&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;konanc -l lib.klib main.kt -linkerOpts lib.a -o main.kexe&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and run the &lt;code&gt;./main.kexe&lt;/code&gt; to see the resulting text is being printed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./main.kexe
The foo() from lib.h returned 42

&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That is a trivial C library linking case. For something real, you’ll probably want to 
use &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/GRADLE_PLUGIN.md&quot;&gt;Gradle build&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look at the &lt;a href=&quot;https://kotlinlang.org/docs/tutorials/native/interop-with-c.html&quot;&gt;Interop with C libraries&lt;/a&gt; tutorial
or the list of &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/PLATFORM_LIBS.md&quot;&gt;Platform libraries&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You may find it useful to check the 
&lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/LIBRARIES.md&quot;&gt;C Interop docs&lt;/a&gt; 
or &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/OBJC_INTEROP.md&quot;&gt;Interop with Swift and Objective-C&lt;/a&gt; page.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <summary type="html">The most trivial Kotlin/Native example of using C library</summary>
  
  </entry>
  
  <entry>
    <title type="html">Undefined Symbol on macOS</title>
    <link href="https://jonnyzzz.com/blog/2018/05/16/link-error/" rel="alternate" type="text/html" title="Undefined Symbol on macOS" />
    <published>2018-05-16T00:00:00+00:00</published>
    <updated>2018-05-16T00:00:00+00:00</updated>
    <id>/blog/2018/05/16/link-error</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/05/16/link-error/">&lt;p&gt;___isOSVersionAtLeast is undefined. How I spent several days compiling curl and linking it.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://kotlinlang.org/docs/reference/native-overview.html&quot;&gt;Kotlin/Native&lt;/a&gt; to create a 
tiny command line utility for Windows, Linux, and macOS. I believe the best app is the app without
dependencies, and thus without requirements and dependencies hassle. That is easier than 
baking os-specific packages or installers.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://curl.haxx.se/&quot;&gt;Curl&lt;/a&gt; is one of my dependencies for this project. So I compiled it to 
&lt;code&gt;libcurl.a&lt;/code&gt; and lined to &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/blob/master/INTEROP.md&quot;&gt;Kotlin/Native&lt;/a&gt;
easily with a few lines of Gradle script.&lt;/p&gt;

&lt;p&gt;It failed with something cryptic on my macOS 10.13.4 with Xcode 9.3.1.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Undefined symbols for architecture x86_64:
  &quot;___isOSVersionAtLeast&quot;, referenced from:
      _singleipconnect in libcurl.a(libcurl_la-connect.o)
      _darwinssl_connect_common in libcurl.a(libcurl_la-darwinssl.o)
      _darwinssl_version_from_curl in libcurl.a(libcurl_la-darwinssl.o)
ld: symbol(s) not found for architecture x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Digging internet did not help. And that is mostly why I am blogging that one. Changing or patching the 
way I build curl was useless too. Nikolay suggested me to check target version of my binaries. That was it.
Kudos Nikolay!&lt;/p&gt;

&lt;p&gt;I should have compiled the curl with &lt;code&gt;10.13&lt;/code&gt; as min version for Mac. I did that by setting
&lt;code&gt;CFLAGS&lt;/code&gt; environment variable to &lt;code&gt;-mmacosx-version-min=10.13&lt;/code&gt; for &lt;code&gt;./configure&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; commands.&lt;/p&gt;

&lt;p&gt;Continue reading the &lt;a href=&quot;/blog/2018/06/05/link-error-2/&quot;&gt;next part of the investigation&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="linker" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <category term="curl" />
  
    <summary type="html">___isOSVersionAtLeast is undefined. How I spent several days compiling curl and linking it.</summary>
  
  </entry>
  
  <entry>
    <title type="html">MacBook Fix Tilde Key</title>
    <link href="https://jonnyzzz.com/blog/2017/12/04/macos-keys/" rel="alternate" type="text/html" title="MacBook Fix Tilde Key" />
    <published>2017-12-04T00:00:00+00:00</published>
    <updated>2017-12-04T00:00:00+00:00</updated>
    <id>/blog/2017/12/04/macos-keys</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2017/12/04/macos-keys/">&lt;p&gt;A tiny trick to remap keys on macOS X&lt;/p&gt;

&lt;p&gt;Recently I switched from an EN-US MacBook Pro Keyboard to a DE keyboard. Suddenly, I found
an unexpected problem with keys layout.&lt;/p&gt;

&lt;p&gt;There are several differences in the layout. 
You may have a look to all possible keyboard layouts 
&lt;a href=&quot;https://keyshorts.com/blogs/blog/37615873-how-to-identify-macbook-keyboard-localization&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The main difference is that in EU version of the keyboard we have additional
buttons, Enter key is vertical, Left Shift key is shorted to give a room for 
an extra key.&lt;/p&gt;

&lt;p&gt;The problem is as follows: &lt;code&gt;tilde&lt;/code&gt; key is near &lt;code&gt;1&lt;/code&gt; in the EN-US keyboard (and other PC keyboards),
while it is between Shift and Z in the EU keyboards.&lt;/p&gt;

&lt;p&gt;Also, on Mac OS we use &lt;code&gt;CMD+tilde&lt;/code&gt; to switch between windows on the same App. I have even
installed &lt;a href=&quot;https://neosmart.net/EasySwitch/&quot; target=&quot;_blank&quot;&gt;Easy Window Switcher&lt;/a&gt; to have the same 
experience on Windows!&lt;/p&gt;

&lt;p&gt;It is hard for me to learn the trick. And it will not work correctly, if you remap a key. Namely,
in Russian keyboard layout the remapped shortcut will not work. Yeah! MacOS System shortcuts DO 
depend on keyboard layout. Sad story.&lt;/p&gt;

&lt;p&gt;I can across a tiny and nice article to remap keys on MacOS. 
&lt;a href=&quot;https://developer.apple.com/library/content/technotes/tn2450/_index.html&quot; target=&quot;_blank&quot;&gt;TN2450&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And the way to re-map keys is the following:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
hidutil property --set '{&quot;UserKeyMapping&quot;:[{&quot;HIDKeyboardModifierMappingSrc&quot;:0x700000064,&quot;HIDKeyboardModifierMappingDst&quot;:0x700000035},{&quot;HIDKeyboardModifierMappingSrc&quot;:0x700000035,&quot;HIDKeyboardModifierMappingDst&quot;:0x700000064}]}'
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That is all you need. Next you’d need to have a patched Russian keyboard to fix Ё character. For the fix I use 
&lt;a href=&quot;http://scripts.sil.org/ukelele&quot; target=&quot;_blank&quot;&gt;ukelele&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Anyway, you do not need to install ANY third-party apps to solve the key-remapping problems&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="mac" />
  
    <category term="macOS" />
  
    <category term="keys" />
  
    <summary type="html">A tiny trick to remap keys on macOS X</summary>
  
  </entry>
  
  <entry>
    <title type="html">Kotlin DSL for Test Data</title>
    <link href="https://jonnyzzz.com/blog/2017/11/02/gradle-dsl/" rel="alternate" type="text/html" title="Kotlin DSL for Test Data" />
    <published>2017-11-02T00:00:00+00:00</published>
    <updated>2017-11-02T00:00:00+00:00</updated>
    <id>/blog/2017/11/02/gradle-dsl</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2017/11/02/gradle-dsl/">&lt;p&gt;Kotlin DSLs can be used to replace a boring test data strings with correct and an easy to read a code.&lt;/p&gt;

&lt;p&gt;That time I was working on &lt;a href=&quot;/blog/2017/10/18/java9c/&quot;&gt;java9c&lt;/a&gt; plugin for Gradle, I created
integration tests. In my case all those tests were of the following pattern: create sample Gradle
project, execute it, check results. I decided to run a fun experiment and replace boring string
constants with a Gradle-looking DSL.&lt;/p&gt;

&lt;p&gt;Namely, instead of (and many Gradle plugin integration tests have similar)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;apply plugin: &amp;#39;java-library&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;repositories {\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;  mavenCentral()\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;}\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;dependencies {\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;  implementation &amp;#39;junit:junit:4.12&amp;#39;\n&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&amp;quot;}\n&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I created a tiny DSL that looks (and parses) like a Gradle script. 
The DSL generates test-data files for me. Kotlin compiler and IDE 
helps to prevent errors before a test is executed. Code completion 
makes a new test authoring easier. Here is the DSL usage example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;java-library&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;junit:junit:4.12&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;More examples are on &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;GitHub&lt;/a&gt; in &lt;code&gt;java9c&lt;/code&gt; plugin test sources.&lt;/p&gt;

&lt;p&gt;The example looks like a Gradle script. There was no goal to make it 100% same looking. Also, 
there is an amazing &lt;a href=&quot;https://github.com/gradle/kotlin-dsl&quot;&gt;project&lt;/a&gt; run by Gradle to support
Kotlin DSLs in Gradle, natively. That DSL is not 100% same looking to a Gradle-Groovy scripts too.&lt;/p&gt;

&lt;p&gt;The implementation of that my magic DSL fits in 
&lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c/blob/master/test-common/src/main/java/org/jonnyzzz/gradle/java9c/files.kt&quot;&gt;one file&lt;/a&gt;,
and it’s about 150 lines.&lt;/p&gt;

&lt;p&gt;Next, I’ll explain how one can create similar DSLs for their own needs. With Kotlin you may target 
JVM, Android, JS, and Native, reusing same pure-Kotlin code.&lt;/p&gt;

&lt;h1 id=&quot;dsl-basics&quot;&gt;DSL Basics&lt;/h1&gt;

&lt;p&gt;We need to create a text generator DSL. The primary decision if either to generate a bare text or to use an API of a library. 
You may consider &lt;a href=&quot;https://www.w3.org/DOM/&quot;&gt;XML DOM&lt;/a&gt; or &lt;a href=&quot;https://github.com/FasterXML/jackson&quot;&gt;Jackson&lt;/a&gt;. 
There are &lt;a href=&quot;https://github.com/square/kotlinpoet&quot;&gt;kotlinpoet&lt;/a&gt; or &lt;a href=&quot;https://github.com/square/javapoet&quot;&gt;javapoet&lt;/a&gt;
to generate Kotlin or Java code via an API. I bet there are many other libraries. 
&lt;a href=&quot;https://github.com/nebula-plugins/gradle-lint-plugin&quot;&gt;Nebula Gradle Lint Plugin&lt;/a&gt; can read/write 
Gradle scripts too.&lt;/p&gt;

&lt;p&gt;There is a trade-off. Dealing with a library may be complicated and time-consuming, but way more stable.&lt;/p&gt;

&lt;p&gt;For the sake of &lt;a href=&quot;/blog/2017/10/18/java9c/&quot;&gt;java9c&lt;/a&gt; tests, I decided to implement the generator 
based on bare text output. And it’d be me who covers all risks and bugs from the implementation. 
It is only about 150 lines (now) of 
&lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c/blob/master/test-common/src/main/java/org/jonnyzzz/gradle/java9c/files.kt&quot;&gt;code&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;writer-interface&quot;&gt;Writer Interface&lt;/h2&gt;

&lt;p&gt;I started with a line writer interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;operator&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Inside the interface, I use unary minus, e.g., &lt;code&gt;-&quot;foo&quot;&lt;/code&gt; as the function to write a line. It reads better in DSLs, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;lineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;line of text&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Well, you may decide to have a &lt;code&gt;fun line(text: String)&lt;/code&gt; instead. That does not change the rest, so, please
feel free to use a function instead of an operator. Alternatively, you may use &lt;code&gt;String.unaryPlus&lt;/code&gt;, so that
you’d have &lt;code&gt;+&quot;foo&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://kotlinlang.org/docs/reference/operator-overloading.html&quot;&gt;Operator Overloading&lt;/a&gt; documentation
or ask me, if you need to clarify the trick.&lt;/p&gt;

&lt;h2 id=&quot;a-trivial-writer-implementation&quot;&gt;A Trivial Writer Implementation&lt;/h2&gt;

&lt;p&gt;The implementation of the interface could be something trivial, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateDSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;StringBuilder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appendln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The usage could be:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;line of text&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code&gt;generateDSL&lt;/code&gt; receives a &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver&quot;&gt;lambda with receiver&lt;/a&gt;
and returns resulting string. It is the implementation detail to pass the instance of 
&lt;code&gt;LineWriter&lt;/code&gt; to the lambda. Inside the lambda, the receiver is &lt;code&gt;LineWriter&lt;/code&gt;, it means, that &lt;code&gt;this&lt;/code&gt; keyword 
resolves to an instance of &lt;code&gt;LineWriter&lt;/code&gt;. Of course, &lt;code&gt;this.&lt;/code&gt; can be omitted and all methods are resolved
against &lt;code&gt;LineWriter&lt;/code&gt; instance. It follows that &lt;code&gt;- &quot;foo&quot;&lt;/code&gt; calls resolves to &lt;code&gt;String.unaryMinus()&lt;/code&gt; function
of &lt;code&gt;LineWriter&lt;/code&gt; inside the lambda scope.&lt;/p&gt;

&lt;p&gt;For short, we may compact the &lt;code&gt;generateDSL&lt;/code&gt; function to the following:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;generateDSL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buildString&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;appendln&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I use a &lt;code&gt;fun buildString(builderAction: StringBuilder.() -&amp;gt; Unit): String&lt;/code&gt; function from the Kotlin standard library. 
It receives yet another &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html#function-literals-with-receiver&quot;&gt;lambda with receiver&lt;/a&gt; 
on &lt;code&gt;StringBuilder&lt;/code&gt; type so that &lt;code&gt;appendln&lt;/code&gt; is a function from it.&lt;/p&gt;

&lt;p&gt;Theoretically, you may have several different entry point functions (e.g., &lt;code&gt;generateDSL&lt;/code&gt;)
to, say, generate a string, a file or something else. The rest does not depend on a particular 
&lt;code&gt;generate*&lt;/code&gt; function.&lt;/p&gt;

&lt;h1 id=&quot;indenting-and-blocks&quot;&gt;Indenting and Blocks&lt;/h1&gt;

&lt;p&gt;Text generation for languages like Gradle requires indenting. We have blocks, and it’s nice
to simplify blocks generation. At first, I created an &lt;code&gt;offset&lt;/code&gt; function for it:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;outer&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;: &lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LineWriter&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unaryMinus&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;s&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;outer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;p&quot;&gt;-(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;  &amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The function is an &lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension function&lt;/a&gt;. It makes
no need to change the original &lt;code&gt;LineWriter&lt;/code&gt; interface, but it still reads as a method call.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;block&lt;/code&gt; function is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LineWriter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$name {&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here I use &lt;a href=&quot;https://kotlinlang.org/docs/reference/idioms.html#string-interpolation&quot;&gt;string interpolation&lt;/a&gt;
to simplify code of the first line.&lt;/p&gt;

&lt;p&gt;At that point I can write the DSL snippets like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;generateDSL&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;jonnyzzz&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And it yields&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;jonnyzzz {
  test
}  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Nice, isn’t it?&lt;/p&gt;

&lt;h1 id=&quot;gradle-specific-constructs&quot;&gt;Gradle Specific Constructs&lt;/h1&gt;

&lt;p&gt;With &lt;code&gt;block&lt;/code&gt; function one can create all necessary functions to generate blocks like &lt;code&gt;repositories&lt;/code&gt;, &lt;code&gt;dependencies&lt;/code&gt; and so on. 
Now it is time to implement specific parts of the DSL and allow some constructs only inside other constructs.&lt;/p&gt;

&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;Let’s consider &lt;code&gt;repositories&lt;/code&gt; block. Inside we have pre-defined functions for &lt;code&gt;mavenCentral()&lt;/code&gt; and &lt;code&gt;jcenter()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;First, we need a builder interface and implementation. It can be done as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;interface RepositoriesWriter : LineWriter {
  fun mavenCentral() { -&amp;quot;mavenCentral()&amp;quot; }
  fun mavenLocal() { -&amp;quot;mavenLocal()&amp;quot; }
  fun jcenter() { -&amp;quot;jcenter()&amp;quot; }
}

fun RepositoriesHolder.repositories(builder: RepositoriesWriter.() -&amp;gt; Unit) =
        block(&amp;quot;repositories&amp;quot;) {
          object : RepositoriesWriter, LineWriter by it {
          }.builder()
        }&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We define an interface &lt;code&gt;RepositoriesWriter&lt;/code&gt; to play as the scope of the generation. In the interface,
we have &lt;code&gt;mavenLocal&lt;/code&gt; and other functions with trivial implementations. Those functions can be alternatively 
implemented as extension functions of inside the &lt;code&gt;repositories&lt;/code&gt; function. That is up to the author.&lt;/p&gt;

&lt;p&gt;In the &lt;code&gt;repositories&lt;/code&gt; function, I use &lt;a href=&quot;https://kotlinlang.org/docs/reference/delegation.html&quot;&gt;class delegation&lt;/a&gt; aka &lt;code&gt;by&lt;/code&gt;
keyword to implement &lt;code&gt;LineWriter&lt;/code&gt; from &lt;code&gt;RepositoriesWriter&lt;/code&gt; to delegate to another instance of &lt;code&gt;LineWriter&lt;/code&gt;. 
So short to write and powerful!&lt;/p&gt;

&lt;p&gt;As the result, we can have&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;generateDSL {
  repositories {
     mavenCentral()
     -&amp;quot;// another line&amp;quot;
  }
}   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The same way I created the whole bunch of functions to support the subset of Gradle scripts I 
was using in my tests. You may take a look 
&lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c/blob/master/test/src/test/java/org/jonnyzzz/gradle/java9c/test-4.2.1.kt&quot;&gt;here for more details&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;specific-dsl-alternatives&quot;&gt;Specific DSL Alternatives&lt;/h2&gt;

&lt;p&gt;It was another design decision to allow &lt;code&gt;LineWriter&lt;/code&gt; functions and extension functions (e.g., &lt;code&gt;block&lt;/code&gt;) 
of the scope of &lt;code&gt;RepositoriesWriter&lt;/code&gt; lambda. We might have decided opposite. In the case, we would need
&lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html#scope-control-dslmarker-since-11&quot;&gt;DslMarker&lt;/a&gt;
annotation to make sure &lt;code&gt;LineWriter&lt;/code&gt; functions and extension functions are not resolved to the 
outer scope. We probably have a &lt;code&gt;generateDSL&lt;/code&gt; function call on the top.&lt;/p&gt;

&lt;h1 id=&quot;wrapping-up&quot;&gt;Wrapping Up&lt;/h1&gt;

&lt;p&gt;DSLs are nice. In the post, I presented the DSL building pattern. 
Use it to create your DSLs. Ask me if you have questions. 
You may also check &lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html&quot;&gt;this&lt;/a&gt; article from Kotlin 
documentation or &lt;a href=&quot;https://www.youtube.com/watch?v=BnTtjywqAX8&quot;&gt;a video of a talk by Hadi&lt;/a&gt;.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="gradle" />
  
    <category term="java9" />
  
    <category term="opensource" />
  
    <category term="plugin" />
  
    <category term="java9c" />
  
    <category term="kotlin" />
  
    <category term="dsl" />
  
    <summary type="html">Kotlin DSLs can be used to replace a boring test data strings with correct and an easy to read a code.</summary>
  
  </entry>
  
  <entry>
    <title type="html">A Gradle Plugin to Detect Package Conflicts for Migration to Java 9 Modules</title>
    <link href="https://jonnyzzz.com/blog/2017/10/18/java9c/" rel="alternate" type="text/html" title="A Gradle Plugin to Detect Package Conflicts for Migration to Java 9 Modules" />
    <published>2017-10-18T00:00:00+00:00</published>
    <updated>2017-10-18T00:00:00+00:00</updated>
    <id>/blog/2017/10/18/java9c</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2017/10/18/java9c/">&lt;p&gt;helps to detect problems with split packages prior to the migration&lt;/p&gt;

&lt;p&gt;It was an amazing journey to the &lt;a href=&quot;https://www.oracle.com/javaone/index.html&quot;&gt;JavaOne&lt;/a&gt; this year. 
There I had a great chance to &lt;a href=&quot;https://www.youtube.com/watch?v=UNg9lmk60sg&amp;amp;feature=youtu.be&amp;amp;t=6903&quot;&gt;present&lt;/a&gt; 
some features of &lt;a href=&quot;https://www.jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; on the huge 
&lt;a href=&quot;../../../../../talks/&quot;&gt;stage&lt;/a&gt;. I liked it. I was also amazed by the backstage processes. So many people are involved in there.&lt;/p&gt;

&lt;p&gt;During those crazy times, I realized there is a problem for anyone willing to switch to Java 
modules. The problem is in packages. Every package is now allowed to be used only in 
one entry in the module path. It is still ok if you’re on classpath. For more information, 
you may consider &lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/&quot;&gt;project jigsaw&lt;/a&gt;, 
&lt;a href=&quot;http://openjdk.java.net/jeps/261&quot;&gt;JEP 261&lt;/a&gt;,
&lt;a href=&quot;http://openjdk.java.net/projects/jigsaw/spec/issues/#AvoidConcealedPackageConflicts&quot;&gt;AvoidConcealedPackageConflicts&lt;/a&gt;, 
&lt;a href=&quot;https://blog.codefx.org/java/java-9-migration-guide/#Split-Packages&quot;&gt;Split Packages&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step in the migration to modules is to make sure there are no package name clashes 
between files. The best way to know that for sure is to have a tool that analyze 
classpath for conflicts. So I created the plugin for Gradle.&lt;/p&gt;

&lt;p&gt;Usage is pretty simple.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.java9c&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.2.1&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;/// Mind the updates!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once the plugin is applied, it adds the &lt;code&gt;java9c&lt;/code&gt; task. The task itself depends on several generated tasks for 
every source set, e.g., &lt;code&gt;main&lt;/code&gt; or &lt;code&gt;test&lt;/code&gt;. &lt;code&gt;java9c&lt;/code&gt; task, prints out the detected package conflicts for each source set.&lt;/p&gt;

&lt;p&gt;For the demonstration, I created a tiny project that has classes in the junit’s main package. The report looks like that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jonnyzzz.com/images/posts/2017-10-18-task-output.png&quot; alt=&quot;java9c task out example image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;For multiple project Gradle projects, you may include the plugin in the following way, or, alternatively, 
you may select only specific projects to check.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.java9c&amp;#39;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;0.2.1&amp;#39;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;/// Mind the updates!&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;subprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;org.jonnyzzz.java9c&amp;#39;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The plugin is open source. You may find sources on &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is so easy to create so many different features. This time I decided to create a feature-poor plugin. 
Meanwhile, I reserved the &lt;code&gt;java9c&lt;/code&gt; extension in Gradle for future features for the plugin.
Let me know if there is something I missed. Also, you may create a pull 
request &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;sources--binaries&quot;&gt;Sources &amp;amp; Binaries&lt;/h1&gt;

&lt;p&gt;Sources are on &lt;a href=&quot;https://github.com/jonnyzzz/gradle-java9c&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Plugin page on &lt;a href=&quot;https://plugins.gradle.org/plugin/org.jonnyzzz.java9c&quot;&gt;Gradle Plugins&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The plugin is implemented in pure &lt;a href=&quot;https://kotlinlang.org&quot;&gt;kotlin&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Have fun! And let me know if it helps.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="gradle" />
  
    <category term="java" />
  
    <category term="jigsaw" />
  
    <category term="java9" />
  
    <category term="modules" />
  
    <category term="opensource" />
  
    <category term="plugin" />
  
    <category term="java9c" />
  
    <category term="kotlin" />
  
    <summary type="html">helps to detect problems with split packages prior to the migration</summary>
  
  </entry>
  
</feed>
