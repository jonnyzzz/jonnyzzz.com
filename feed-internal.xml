<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="http://jonnyzzz.com/feed.xslt.xml"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link href="http://jonnyzzz.com/feed-internal.xml" rel="self" type="application/atom+xml" />
  <link href="http://jonnyzzz.com/" rel="alternate" type="text/html" />
  <updated>2017-06-22T17:20:56+00:00</updated>
  <id>/</id>

  
  <title type="html">Eugene Petrenko</title>
  

  
  <subtitle>@jonnyzzz personal page and blog</subtitle>
  

  

  
  
  <entry>
    <title type="html">A Kotlin Coroutine for an OutputStream Filtering</title>
    <link href="http://jonnyzzz.com/blog/2017/06/21/coroutine-to-process-data/" rel="alternate" type="text/html" title="A Kotlin Coroutine for an OutputStream Filtering" />
    <published>2017-06-21T00:00:00+00:00</published>
    <updated>2017-06-21T00:00:00+00:00</updated>
    <id>/blog/2017/06/21/coroutine-to-process-data</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/06/21/coroutine-to-process-data/">&lt;p&gt;Kotlin coroutines for OutputStream.&lt;/p&gt;

&lt;p&gt;In this post, we consider a low-level implementation for specific 
coroutines that are used to process streams in a server-side Java application. 
There is an existing code that writes the output to a given &lt;code&gt;OutputStream&lt;/code&gt; object. 
One may write it in Java as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExistingService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;callExistingCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resultOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We need to intercept the output that is bing written by the &lt;code&gt;#callExistingCode&lt;/code&gt; function.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;
&lt;p&gt;Say the &lt;code&gt;ExistingService&lt;/code&gt; replies with an HTML, and the goal is to extract some part of it, say a &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;
with a given &lt;code&gt;id&lt;/code&gt;.
Or an &lt;code&gt;ExistingService&lt;/code&gt; may be returning a ZIP archive, and the goal can be to add a file in it.&lt;/p&gt;

&lt;p&gt;There are many similar cases, where an &lt;code&gt;OutputStream&lt;/code&gt; post processing can be necessary.&lt;/p&gt;

&lt;h1 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h1&gt;
&lt;p&gt;Suppose the &lt;code&gt;ExistingService&lt;/code&gt; writes output in the following format:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(&amp;lt;SIZE&amp;gt;&amp;lt;CHANNEL-ID&amp;gt;&amp;lt;DATA&amp;gt;)*&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where &lt;code&gt;&amp;lt;SIZE&amp;gt;&lt;/code&gt; is 4 bytes length message. &lt;code&gt;&amp;lt;CHANNEL-ID&amp;gt;&lt;/code&gt; is a one-byte message. &lt;code&gt;&amp;lt;DATA&amp;gt;&lt;/code&gt; is a 
byte sequence of given size.&lt;/p&gt;

&lt;p&gt;The such or similar format is widely used to send several streams within one connection. For example,
it is used in &lt;a href=&quot;https://www.ietf.org/rfc/rfc4251.txt&quot;&gt;SSH-2&lt;/a&gt;, &lt;a href=&quot;https://tools.ietf.org/html/rfc7540&quot;&gt;HTTP/2&lt;/a&gt;
or &lt;a href=&quot;https://github.com/git/git/blob/master/Documentation/technical/pack-protocol.txt&quot;&gt;Git&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Out goal is to include additional messages to the stream on the fly, while it is being generated 
by the call to an &lt;code&gt;ExistingService&lt;/code&gt;.
We just need to implement the method:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weaveStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;a-trivial-java-implementation&quot;&gt;A Trivial Java Implementation&lt;/h1&gt;

&lt;p&gt;In Java we have &lt;code&gt;PipedOutputStream&lt;/code&gt;/&lt;code&gt;PipedInputStream&lt;/code&gt; classes that may turn an OutputStream 
into an &lt;code&gt;InputStream&lt;/code&gt;. Next, the processing can be done easily.&lt;/p&gt;

&lt;p&gt;We have a thread, that reads data from an &lt;code&gt;InputStream&lt;/code&gt;, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weaveStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PipedOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PipeOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;PipedInputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pis&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PipedInputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;runInThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;weaveStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weaveStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;InputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;//omitted error processing here&lt;/span&gt;
      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLastBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractChannelId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;

      &lt;span class=&quot;n&quot;&gt;writeHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;copyBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The cost here is high. We need an additional thread to implement that. Additionally, 
the whole data is copied to a buffer from which a &lt;code&gt;PipedInputStream&lt;/code&gt; is reading. 
Finally, piped streams implementation uses a level of synchronization to wait for 
next data portion to arrive. That can be problematic for some loads.&lt;/p&gt;

&lt;h1 id=&quot;a-smart-java-implementation&quot;&gt;A Smart Java Implementation&lt;/h1&gt;

&lt;p&gt;One can do a smarter implementation. Directly implement the &lt;code&gt;OutputStream&lt;/code&gt; and do the processing
and patching the output in there.&lt;/p&gt;

&lt;p&gt;What we do here is to add a state to our &lt;code&gt;OutputStream&lt;/code&gt; implementation. Each call to &lt;code&gt;write&lt;/code&gt; method
yields an update of the state.&lt;/p&gt;

&lt;p&gt;A &lt;em&gt;State Machine&lt;/em&gt;. That is what the code from here is about. It is up to programmer if to have a state
explicitly or not. Think about maintainability of such code first.&lt;/p&gt;

&lt;p&gt;The implementation here can be quite complex. As an example, I show a byte-by-byte 
processing. In real cases, it can be way more efficient to implement 
&lt;code&gt;write(byte[], int, int)&lt;/code&gt; method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weaveStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReadingSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;readMoreSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; 
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isReadingChannelId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;readMoreChannelId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isProcessingData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;processModeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Unexpected state&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The benefit here is that we no longer need an extra thread to pipe the output as input. Sill, code 
is getting more complex.&lt;/p&gt;

&lt;h1 id=&quot;a-coroutine-state-machine&quot;&gt;A Coroutine State Machine&lt;/h1&gt;

&lt;p&gt;In Kotlin 1.1 we have &lt;a href=&quot;http://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;coroutines&lt;/a&gt;. The alternative way 
to implement a state machine with the help of compiler, with way more readable, linear-looking code.&lt;/p&gt;

&lt;p&gt;First, we need to declare an interface with &lt;code&gt;suspend&lt;/code&gt; functions, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataReader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;
  
  &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;to:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Also, we need an implementation of the &lt;code&gt;OutputStream&lt;/code&gt; that allows us to use the &lt;code&gt;DataReader&lt;/code&gt;. That is 
the function &lt;code&gt;inverseRead&lt;/code&gt;. We’ll turn back to the implementation a bit later.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inverseRead&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;reader:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Finally, we are able to implement the data processing:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;weaveStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;target:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inverseRead&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;readStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;source:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;target:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractSize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isLastBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extractChannelId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;writeHeader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check the code above. It is quite similar to what we had in &lt;em&gt;A Trivial Java Implementation&lt;/em&gt;. The difference
is huge. Every call to &lt;code&gt;suspend&lt;/code&gt; function pauses the execution of a method, so the execution turns to
the &lt;code&gt;write&lt;/code&gt; method implementation of &lt;code&gt;OutputStream&lt;/code&gt; in &lt;code&gt;inverseRead&lt;/code&gt;. We are able now to write
a linear looking code, that is executed in a piece-by-piece manner.&lt;/p&gt;

&lt;h1 id=&quot;implementation-of-the-coroutine&quot;&gt;Implementation of the Coroutine&lt;/h1&gt;

&lt;p&gt;The only missing part is the &lt;code&gt;inverseRead&lt;/code&gt;. We follow the &lt;a href=&quot;http://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;coroutines documentation&lt;/a&gt;
to implement that. Great is there are many examples too.&lt;/p&gt;

&lt;p&gt;We implement &lt;code&gt;DataReader#read&lt;/code&gt; and &lt;code&gt;DataReader#pipe&lt;/code&gt; functions to suspend execution until there is enough data
send to &lt;code&gt;OutputStream#write&lt;/code&gt; method. We have the following state object for that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataReaderState&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;readByteContinuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;?&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;pipeContinuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;pipeTarget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;pipeSizeToWrite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next, we are able to implement the &lt;code&gt;DataReader&lt;/code&gt; interface in the following way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataReaderImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReaderState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspendCoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeContinuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeSizeToWrite&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sz&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeTarget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspendCoroutine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readByteContinuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All we have here is a call to the specific &lt;code&gt;suspendCoroutine&lt;/code&gt; function in Kotlin, which does the suspend. I decided
to omit for simplicity a defensive asserts that one may have in both &lt;code&gt;pipe&lt;/code&gt; and &lt;code&gt;read&lt;/code&gt; function implementation.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;OutputStream&lt;/code&gt; implementation in the example is executing next suspended function in a loop. The current
implementation does not check the state at the end of data too. The straightforward implementation is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataReaderOutputStreamImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReaderState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;byteArrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()))&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tailrec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ByteArray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;readOneByte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readByteContinuation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;readOneByte&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;readOneByte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toInt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeContinuation&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;toPipe&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeSizeToWrite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pipeTarget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;toPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;toPipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Illegal state&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At that moment we are ready to implement the &lt;code&gt;inverseRead&lt;/code&gt; function.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;inverseRead&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;state&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReaderState&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;outputStream&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReaderOutputStreamImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;dataReader&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReaderImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;continuation&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataReaderContinuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;createCoroutine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;continuation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resume&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputStream&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;coroutine-vs-state-machine&quot;&gt;Coroutine vs State Machine&lt;/h1&gt;

&lt;p&gt;It turned out we still needed to implement a state machine (via &lt;code&gt;DataReaderState&lt;/code&gt; class). It 
was necessary to add a state for each &lt;code&gt;suspend&lt;/code&gt; function of &lt;code&gt;DataReader&lt;/code&gt; interface. That was 
the code we need to write as building block (and there 
are &lt;a href=&quot;https://github.com/Kotlin/kotlinx.coroutines&quot;&gt;amazing libraries&lt;/a&gt; for most 
of the cases)&lt;/p&gt;

&lt;p&gt;The good part is that the rest part of the code, where we do the actual data decoding (the &lt;code&gt;readStream&lt;/code&gt; function)
now free from an explicit state machine style programming. One can have code written as easy
as possible. It’s easier to understand and to check. And, for example, we may use loops, try-catches 
and any other code constructs we like using for ordinary programs.&lt;/p&gt;

&lt;p&gt;In other words, with the help of Kotlin suspend functions we may minimize the number of complex functions and
concentrate on the actual development.&lt;/p&gt;

&lt;p&gt;For more information on coroutines power in Kotlin, you may refer to 
&lt;a href=&quot;https://vimeo.com/221264980/b3ac7f9001&quot;&gt;GeekOut Talk by Roman Elizarov&lt;/a&gt;
or to &lt;a href=&quot;http://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;the documentation&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="coroutine" />
  
    <summary type="html">Kotlin coroutines for OutputStream.</summary>
  
  </entry>
  
  <entry>
    <title type="html">A post per 2 weeks</title>
    <link href="http://jonnyzzz.com/blog/2017/06/07/a-post-every-two-weeks/" rel="alternate" type="text/html" title="A post per 2 weeks" />
    <published>2017-06-07T00:00:00+00:00</published>
    <updated>2017-06-07T00:00:00+00:00</updated>
    <id>/blog/2017/06/07/a-post-every-two-weeks</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/06/07/a-post-every-two-weeks/">&lt;p&gt;a process to blog regularly&lt;/p&gt;

&lt;p&gt;From February 2017 I decided to update this blog regularly. It randomly 
turned out I update it once in 2 weeks.&lt;/p&gt;

&lt;p&gt;By the time of this post, I have eight updates published on a regular basis.&lt;/p&gt;

&lt;h1 id=&quot;pipeline&quot;&gt;Pipeline&lt;/h1&gt;

&lt;p&gt;To make sure I meet the pace, I decided to queue all posts. It may turn out I have
a post that is left in a queue for weeks or months. Nevertheless, this reasonable, to make
sure I will not have gaps in the schedule.&lt;/p&gt;

&lt;p&gt;The actual post lifetime is the following&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;authoring the main content (several attempts)&lt;/li&gt;
  &lt;li&gt;proofreading (several attempts)&lt;/li&gt;
  &lt;li&gt;spellchecking &amp;amp; publishing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In average it takes 3-4 evenings for a post to be ready to go. I like to leave a post
in a draft for some time. Fresh re-read always helps to improve.&lt;/p&gt;

&lt;p&gt;I use Git repository and Markdown to store all my posts. There is the older post with
more &lt;a href=&quot;/blog/2015/11/22/MoveMoveMove/&quot;&gt;info&lt;/a&gt; on the technical part of the process.&lt;/p&gt;

&lt;h1 id=&quot;channels&quot;&gt;Channels&lt;/h1&gt;

&lt;p&gt;This blog generates RSS feed with all contents. I have no idea, how many 
readers I have out of RSS.&lt;/p&gt;

&lt;p&gt;All posts are also announced on Twitter / Facebook / VK. It looks like the
best time for announcing is an evening in CET timezone, and morning in PDT.
Posting in the CET morning does not play well on Twitter.&lt;/p&gt;

&lt;p&gt;I update Facebook and VK. It mostly looks like there is no sense doing that, 
maybe I should measure that somehow.&lt;/p&gt;

&lt;h1 id=&quot;feedburner&quot;&gt;Feedburner&lt;/h1&gt;

&lt;p&gt;I’m not using FeedBurner. Well, I decided to set it up. Hope it’ll shed light
to the posts I write here.&lt;/p&gt;

&lt;p&gt;I installed the FeedBurner feed on April, 15-th 2017. All RSS Feed readers of the older feed
were kindly asked to switch to another RSS Feed URL. It was not possible to implement
good tracking without altering the URL for this static blog.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jonnyzzz.com/images/posts/2017-06-07-feedburner.png&quot; alt=&quot;Feedburner&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;analytics&quot;&gt;Analytics&lt;/h1&gt;

&lt;p&gt;The site has Google Analytics. Let me show what I have out of the analytics.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jonnyzzz.com/images/posts/2017-06-07-analytics3.png&quot; alt=&quot;Google Analytics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That is +37% in sessions, and +58% in users.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;My goal is to share ideas, discoveries, and problems I solve. Now it is
time for the feedback from you, my readers. If you read my stories, please, don’t
hesitate to share what you think in comments.&lt;/p&gt;

&lt;p&gt;You may also follow me on &lt;a href=&quot;https://twitter.com/jonnyzzz&quot;&gt;Twitter&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I will be happy to have feedback from you, my readers&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="blog" />
  
    <summary type="html">a process to blog regularly</summary>
  
  </entry>
  
  <entry>
    <title type="html">Load Balancing SSH</title>
    <link href="http://jonnyzzz.com/blog/2017/05/24/ssh-haproxy/" rel="alternate" type="text/html" title="Load Balancing SSH" />
    <published>2017-05-24T00:00:00+00:00</published>
    <updated>2017-05-24T00:00:00+00:00</updated>
    <id>/blog/2017/05/24/ssh-haproxy</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/05/24/ssh-haproxy/">&lt;p&gt;More SSH servers behind the same hostname&lt;/p&gt;

&lt;p&gt;Say you have an SSH server on your premises. And say you have a huge load on that service.&lt;/p&gt;

&lt;p&gt;Example? Sure. Git repository. Any git ‘server’ is such a use-case.&lt;/p&gt;

&lt;h1 id=&quot;ssh-backgrounds&quot;&gt;SSH backgrounds&lt;/h1&gt;

&lt;p&gt;SSH acronym means &lt;code&gt;The Secure Shell&lt;/code&gt;. More precisely, we’ll be talking about SSH2 protocol, which is
a de-facto standard. This protocol is covered by the &lt;a href=&quot;https://tools.ietf.org/html/rfc4253&quot;&gt;RFC 4253&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Barely (as simply as possible), the connection is done as follows. A client opens new TCP connection 
to the server. It checks server public key(s) (using the &lt;code&gt;known_hosts&lt;/code&gt; file). Then server 
and client do key exchange, authentication and open channels to run commands or 
interactive sessions.&lt;/p&gt;

&lt;p&gt;More precisely, SSH protocol runs on top of TCP connection. This protocol is secure. We need 
to load balance TCP connections, aka &lt;a href=&quot;https://en.wikipedia.org/wiki/OSI_model&quot;&gt;L4&lt;/a&gt; level 
load balancing.&lt;/p&gt;

&lt;h1 id=&quot;dns-load-balancing&quot;&gt;DNS Load Balancing&lt;/h1&gt;

&lt;p&gt;We need to have several SSH server running. All IP addresses are registered in the DNS for the 
same hostname. The &lt;a href=&quot;https://en.wikipedia.org/wiki/Round-robin_DNS&quot;&gt;DNS round-robin&lt;/a&gt; will make
it play as load balancing.&lt;/p&gt;

&lt;p&gt;The problem here is in the DNS update latency. DNS is cached all over the place. And we 
are not able to have more (or less) servers fast. In practice, it may take days to propagate
the update.&lt;/p&gt;

&lt;p&gt;Also, this approach requires as much IP addresses as we have SSH servers.&lt;/p&gt;

&lt;h1 id=&quot;haproxy-approach&quot;&gt;HAProxy Approach&lt;/h1&gt;

&lt;p&gt;There are many balances, we consider &lt;a href=&quot;http://www.haproxy.org/&quot;&gt;HAProxy&lt;/a&gt; 
for &lt;a href=&quot;https://www.quora.com/What-is-the-difference-between-layer-3-and-layer-4-load-balancing-Why-is-layer-7-LB-used-inspite-of-its-drawbacks-of-being-a-bottleneck&quot;&gt;L4&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The configuration is quite simple.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;listen ssh 0.0.0.0:{{ app.ports.ssh.active }}
    mode tcp

    server &amp;lt;SERVER_NAME_1&amp;gt; &amp;lt;SERVER_HOST_1&amp;gt;:&amp;lt;SERVER_PORT_1&amp;gt; weight &amp;lt;WEIGHT_1&amp;gt;
    server &amp;lt;SERVER_NAME_2&amp;gt; &amp;lt;SERVER_HOST_2&amp;gt;:&amp;lt;SERVER_PORT_2&amp;gt; weight &amp;lt;WEIGHT_2&amp;gt;
    ...
    server &amp;lt;SERVER_NAME_N&amp;gt; &amp;lt;SERVER_HOST_N&amp;gt;:&amp;lt;SERVER_PORT_N&amp;gt; weight &amp;lt;WEIGHT_N&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This configuration is enough to make HAProxy run in the L4 mode to route traffic from the main service IP(s)
to all backends.&lt;/p&gt;

&lt;p&gt;Running several HAProxy instances behind different IP addresses is possible for redundancy and throughput.&lt;/p&gt;

&lt;h1 id=&quot;ssh-server-server-keys&quot;&gt;SSH Server Server Keys&lt;/h1&gt;

&lt;p&gt;It is necessary to have same server keys on all &lt;code&gt;SERVERN_1&lt;/code&gt; … &lt;code&gt;SERVER_N&lt;/code&gt; family, otherwise an SSH client 
will warn a possible MIIM attach, as client likely to access any SSH server from the same IP. And the &lt;code&gt;known_hosts&lt;/code&gt;
file stores server public key info for each known IP.&lt;/p&gt;

&lt;h1 id=&quot;tcp-balancing-issues-request-ip&quot;&gt;TCP Balancing Issues: Request IP&lt;/h1&gt;

&lt;p&gt;There are several differences between an HTTP-level (L7) balancing and TCP-level balancing. You are not able
to send request IP address that easy as via HTTP. The protocol is only about streams. There is no notion of headers,
where one is able to pass extra data, e.g. as in HTTP with &lt;code&gt;X-Forwarded-For&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is no solution in general, but one can use &lt;a href=&quot;http://www.haproxy.org/download/1.8/doc/proxy-protocol.txt&quot;&gt;HAProxy PROXY protocol&lt;/a&gt;.
That is an extension to any TCP protocol that blindly sends a specific string with request/response information to the 
server. One has to have a server, supporting PROXY protocol on the other end.&lt;/p&gt;

&lt;p&gt;The PROXY protocol is used in a number of places and services, e.g. AWS ELB, HAProxy, Nginx, and much mode.&lt;/p&gt;

&lt;p&gt;Bad news. Open SSH server implementation does not support it out of the box, but one may apply patches to support that.
I created and shared patches for &lt;a href=&quot;https://issues.apache.org/jira/browse/SSHD-656&quot;&gt;Apache Mina SSHD&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;To enable the support, add &lt;code&gt;send-proxy&lt;/code&gt; each server line. You may replace the line&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     server &amp;lt;SERVER_NAME_N&amp;gt; &amp;lt;SERVER_HOST_N&amp;gt;:&amp;lt;SERVER_PORT_N&amp;gt; check weight &amp;lt;WEIGHT_N&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;     server &amp;lt;SERVER_NAME_N&amp;gt; &amp;lt;SERVER_HOST_N&amp;gt;:&amp;lt;SERVER_PORT_N&amp;gt; send-proxy weight &amp;lt;WEIGHT_N&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;health-checks&quot;&gt;Health Checks&lt;/h1&gt;

&lt;p&gt;HAProxy supports automated health checks on TCP level. Ones a backend server is not able to reply on checks, 
the traffic is no longer send to an unhealthy host.&lt;/p&gt;

&lt;p&gt;I use the following configuration for that &lt;code&gt;tcp-check expect string SSH-2.0-&lt;/code&gt;. The option instructs HAProxy
to run checks and to check if the remote end replies with a string that starts with &lt;code&gt;SSH-2.0-&lt;/code&gt;. Such answer is 
the standard message required by the SSH2 protocol.&lt;/p&gt;

&lt;p&gt;Overall we have the following configuration:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;listen ssh 0.0.0.0:{{ app.ports.ssh.active }}
    mode tcp
    
    tcp-check expect string SSH-2.0-

    ...
    server &amp;lt;SERVER_NAME_i&amp;gt; &amp;lt;SERVER_HOST_i&amp;gt;:&amp;lt;SERVER_PORT_i&amp;gt; check weight &amp;lt;WEIGHT_1&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;usages&quot;&gt;Usages&lt;/h1&gt;

&lt;p&gt;We use this approach mainly to implement
&lt;a href=&quot;https://martinfowler.com/bliki/BlueGreenDeployment.html&quot;&gt;Green-Blue deployments&lt;/a&gt;. We route traffic 
to the active host. We can change the configuration dynamically or even have custom weights to implement A/B tests.&lt;/p&gt;

&lt;p&gt;An alternative is to use DNS. But with DNS you never know how much time will it take for client’s and chain
of DNS servers to propagate the change. In the real world, it looks the best to combine DNS as more slow
and static entry level balancing. Next to use HAProxy (or similar) balancing to implement fast configuration
changes on the fly.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I showed how to easily load-balance SSH servers for fun and profit. Hope this helps you to 
build a highly available system.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="ssh" />
  
    <category term="haproxy" />
  
    <category term="tcp" />
  
    <category term="service" />
  
    <category term="cloud" />
  
    <category term="glb" />
  
    <category term="load-balance" />
  
    <summary type="html">More SSH servers behind the same hostname</summary>
  
  </entry>
  
  <entry>
    <title type="html">Words Cloud from Metrics Data</title>
    <link href="http://jonnyzzz.com/blog/2017/05/10/tags-cloud-from-analytics/" rel="alternate" type="text/html" title="Words Cloud from Metrics Data" />
    <published>2017-05-10T00:00:00+00:00</published>
    <updated>2017-05-10T00:00:00+00:00</updated>
    <id>/blog/2017/05/10/tags-cloud-from-analytics</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/05/10/tags-cloud-from-analytics/">&lt;p&gt;representing metrics as words cloud&lt;/p&gt;

&lt;p&gt;I was working on a presentation of an internal service I’m working. In the service we have many 
entities (sorry, no details here for now), each generates inbound and outbound traffic.&lt;/p&gt;

&lt;h1 id=&quot;preparing-data&quot;&gt;Preparing Data&lt;/h1&gt;

&lt;p&gt;The service has an endpoint with whole metrics we collect. That is an enormously huge JSON file, that one can fetch
from an HTTP endpoint.&lt;/p&gt;

&lt;p&gt;There is too much data event to feed some &lt;a href=&quot;https://grafana.com/&quot;&gt;Grafana&lt;/a&gt; solution. So we need to filter/normalize the data first.&lt;/p&gt;

&lt;p&gt;I use amazing &lt;a href=&quot;https://stedolan.github.io/jq/&quot;&gt;jq&lt;/a&gt;. Great tool to update/fetch/patch/present data. On macOS
you may simply say &lt;code&gt;brew install jq&lt;/code&gt; to have it.&lt;/p&gt;

&lt;p&gt;Fetching data in the console can be done simply too. I use &lt;a href=&quot;https://curl.haxx.se/&quot;&gt;curl&lt;/a&gt; for that.&lt;/p&gt;

&lt;p&gt;The finally, to prepare the data, I use to following snipped&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; 
curl -s http://gh-prod-blue-backend-01/~api/manage/metrics | \
  jq --raw-output \
  &amp;#39;[ .block[] |  { key: .id, value : .counters.&amp;quot;outbound-traffic&amp;quot;  } ] | del (.[] | select(.value == null ) ) | from_entries &amp;#39;  
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The output from the tool was like the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;entity-name-1&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;39090&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;entity-name-2&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5533&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;entity-name-3&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13750&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//....&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;entity-name-N&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7235017&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That is the data to feed into a words/tags cloud generator.&lt;/p&gt;

&lt;h1 id=&quot;generating-a-tags-cloud&quot;&gt;Generating a Tags Cloud&lt;/h1&gt;

&lt;p&gt;I failed to find any good online service to implement the task in several clicks. Finally, I found a fantastic Python library
called &lt;a href=&quot;https://github.com/amueller/word_cloud&quot;&gt;word_cloud&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Frankly, I’m not a python expert. I found an example and managed to turn it 
to my need in &lt;a href=&quot;https://www.jetbrains.com/pycharm/&quot;&gt;PyCharm&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;That is the snipped I finally did&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;math&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;wordcloud&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WordCloud&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;plt&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot; { &amp;#39;json&amp;#39; : &amp;#39;data is here&amp;#39; } &amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;theDataMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theDataMin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## normalize the data first&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theDataMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theDataMax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theDataMin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
            &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; 
          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Generate a word cloud image&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;wordcloud&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WordCloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;background_color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;white&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;ranks_only&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefer_horizontal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mask&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scale&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;color_func&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;max_words&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min_font_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;stopwords&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;random_state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;max_font_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;font_step&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;RGB&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;relative_scaling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;regexp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;collocations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                 &lt;span class=&quot;n&quot;&gt;colormap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalize_plurals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;\
    &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generate_from_frequencies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;theData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Display the generated image:&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;figure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;imshow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wordcloud&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interpolation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;bilinear&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;axis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;off&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I’m happy I came across several amazing tools, and it turned to be easy and fun to generate some analytics ‘reports’ like that:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jonnyzzz.com/images/posts/2017-05-10-tags-cloud-from-analytics.png&quot; alt=&quot;Marvell characters cloud&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I use Marvell character names instead of real names :)&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="metrics" />
  
    <category term="cloud" />
  
    <category term="ha" />
  
    <category term="logs" />
  
    <summary type="html">representing metrics as words cloud</summary>
  
  </entry>
  
  <entry>
    <title type="html">Bytecode behind coroutines in Kotlin</title>
    <link href="http://jonnyzzz.com/blog/2017/04/26/corotines-or-state-machine/" rel="alternate" type="text/html" title="Bytecode behind coroutines in Kotlin" />
    <published>2017-04-26T00:00:00+00:00</published>
    <updated>2017-04-26T00:00:00+00:00</updated>
    <id>/blog/2017/04/26/corotines-or-state-machine</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/04/26/corotines-or-state-machine/">&lt;p&gt;A simple suspend function, and its bytecode.&lt;/p&gt;

&lt;p&gt;The new thing in Kotlin 1.1 is &lt;a href=&quot;http://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;coroutines&lt;/a&gt;. As we know
from the documentation, it is the &lt;code&gt;suspend&lt;/code&gt; keyword that was added to the language. The rest is implemented 
as libraries.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the bytecode side of this feature.&lt;/p&gt;

&lt;h1 id=&quot;an-empty-suspend-function&quot;&gt;An Empty Suspend function&lt;/h1&gt;

&lt;p&gt;I have the following code snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s take a look to the bytecode from this method. For the experiment, I use Kotlin 1.1.1 with IntelliJ IDEA 2017.1.
Results may depend on version. I use &lt;code&gt;javap -c&lt;/code&gt; to generate those dumps&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  public static final java.lang.Object b(kotlin.coroutines.experimental.Continuation&amp;lt;? super kotlin.Unit&amp;gt;);
    Code:
       0: aload_0
       1: ldc           #13                 // String $continuation
       3: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: getstatic     #25                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
       9: areturn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The interface &lt;code&gt;Continuation&lt;/code&gt; is declared in the Kotlin standard library, see &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/&quot;&gt;documentation&lt;/a&gt;.
It contains &lt;code&gt;context&lt;/code&gt; and methods to complete continuation: &lt;code&gt;resume&lt;/code&gt; and &lt;code&gt;resumeWithException&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-trivial-suspend-function&quot;&gt;A Trivial Suspend function&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;a()&lt;/code&gt; and &lt;code&gt;c()&lt;/code&gt; are calls to ordinary Java methods, which were declared in Kotlin without the &lt;code&gt;suspend&lt;/code&gt; keyword.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; public static final java.lang.Object b2(kotlin.coroutines.experimental.Continuation&amp;lt;? super kotlin.Unit&amp;gt;);
    Code:
       0: aload_0
       1: ldc           #13                 // String $continuation
       3: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: invokestatic  #29                 // Method a:()V
       9: invokestatic  #31                 // Method c:()V
      12: getstatic     #25                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      15: areturn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we see from this code, there is nothing special done to the method. The only return value and additional parameter were added.&lt;/p&gt;

&lt;h1 id=&quot;a-suspend-function-with-a-suspend-call&quot;&gt;A suspend function with a suspend call&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, we call &lt;code&gt;b3()&lt;/code&gt; suspend function from itself. Here &lt;code&gt;a()&lt;/code&gt; and &lt;code&gt;c()&lt;/code&gt; are calls to ordinary Java 
methods, which were declared in Kotlin without &lt;code&gt;suspend&lt;/code&gt; keyword. The generated code now looks way different.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  public static final java.lang.Object b3(kotlin.coroutines.experimental.Continuation&amp;lt;? super kotlin.Unit&amp;gt;);
    descriptor: (Lkotlin/coroutines/experimental/Continuation;)Ljava/lang/Object;
    Code:
       0: aload_0
       1: ldc           #13                 // String $continuation
       3: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #34                 // class streams4/ZKt$b3$1
       9: dup
      10: aload_0
      11: invokespecial #38                 // Method streams4/ZKt$b3$1.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:(Lkotlin/coroutines/experimental/Continuation;)V
      14: getstatic     #25                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      17: aconst_null
      18: invokevirtual #42                 // Method streams4/ZKt$b3$1.doResume:(Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;
      21: areturn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of having the method in-place, it now generates an inner class for the state-machine to implement the &lt;code&gt;suspend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The class &lt;code&gt;streams4/ZKt$b3$1&lt;/code&gt; is generated as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;final class streams4.ZKt$b3$1 extends kotlin.coroutines.experimental.jvm.internal.CoroutineImpl {
  public final java.lang.Object doResume(java.lang.Object, java.lang.Throwable);
    descriptor: (Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;
    Code:
       0: invokestatic  #13                 // Method kotlin/coroutines/experimental/intrinsics/IntrinsicsKt.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;
       3: astore_3
       4: aload_0
       5: getfield      #17                 // Field kotlin/coroutines/experimental/jvm/internal/CoroutineImpl.label:I
       8: tableswitch   { // 0 to 1
                     0: 32
                     1: 58
               default: 74
          }
      32: aload_2
      33: dup
      34: ifnull        38
      37: athrow
      38: pop
      39: invokestatic  #23                 // Method streams4/ZKt.a:()V
      42: aload_0
      43: aload_0
      44: iconst_1
      45: putfield      #17                 // Field kotlin/coroutines/experimental/jvm/internal/CoroutineImpl.label:I
      48: invokestatic  #27                 // Method streams4/ZKt.b3:(Lkotlin/coroutines/experimental/Continuation;)Ljava/lang/Object;
      51: dup
      52: aload_3
      53: if_acmpne     66
      56: aload_3
      57: areturn
      58: aload_2
      59: dup
      60: ifnull        64
      63: athrow
      64: pop
      65: aload_1
      66: pop
      67: invokestatic  #30                 // Method streams4/ZKt.c:()V
      70: getstatic     #36                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      73: areturn
      74: new           #38                 // class java/lang/IllegalStateException
      77: dup
      78: ldc           #40                 // String call to &amp;#39;resume&amp;#39; before &amp;#39;invoke&amp;#39; with coroutine
      80: invokespecial #44                 // Method java/lang/IllegalStateException.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:(Ljava/lang/String;)V
      83: athrow

  streams4.ZKt$b3$1(kotlin.coroutines.experimental.Continuation);
    descriptor: (Lkotlin/coroutines/experimental/Continuation;)V
    Code:
       0: aload_0
       1: iconst_0
       2: aload_1
       3: invokespecial #58                 // Method kotlin/coroutines/experimental/jvm/internal/CoroutineImpl.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:(ILkotlin/coroutines/experimental/Continuation;)V
       6: return
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The implementation of &lt;code&gt;b3()&lt;/code&gt; function is moved to a state machine anonymous object. The main method of 
the inner object does a switch over states of the state machine.
The &lt;code&gt;b3()&lt;/code&gt; function is split by every &lt;code&gt;suspend&lt;/code&gt; function call. On the example below,
we have only 2 states. This is up to helper functions to assert the machine is always in a correct state.&lt;/p&gt;

&lt;p&gt;On every &lt;code&gt;suspend&lt;/code&gt; function call, Kotlin creates an object to encapsulate the state of the state machine, that 
is created to implement the continuations on top of JVM.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Coroutines in Kotlin are awesome, easy and powerful constructs that give 
us the power to fight the complexity (by the cost of an extra abstraction 
level). I’m looking forward to using coroutines to simplify asynchronous 
code in my apps.&lt;/p&gt;

&lt;p&gt;For more information and details see &lt;a href=&quot;http://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;Kotlin coroutines&lt;/a&gt; documentation.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="coroutine" />
  
    <category term="kotlin-bytecode" />
  
    <category term="jvm" />
  
    <category term="tip" />
  
    <summary type="html">A simple suspend function, and its bytecode.</summary>
  
  </entry>
  
  <entry>
    <title type="html">Hints in Stack Traces on the JVM</title>
    <link href="http://jonnyzzz.com/blog/2017/04/12/named-frames-v2/" rel="alternate" type="text/html" title="Hints in Stack Traces on the JVM" />
    <published>2017-04-12T00:00:00+00:00</published>
    <updated>2017-04-12T00:00:00+00:00</updated>
    <id>/blog/2017/04/12/named-frames-v2</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/04/12/named-frames-v2/">&lt;p&gt;Encode context in a thread dump or an exception stack trace for the JVM.&lt;/p&gt;

&lt;p&gt;Remember a production application stack trace or thread dump? Were you able to understand 
what a thread was downing? Why was a thread idling/hanging/waiting? What was the context of it? 
What a command was it? Or, say you were digging the roots of a NullPointerException stack trace?&lt;/p&gt;

&lt;p&gt;Most time it’s hard.&lt;/p&gt;

&lt;p&gt;There is a simple remedy. One may call &lt;code&gt;Threads.setName&lt;/code&gt; to set/unset thread
name to indicate current activity and/or to add more information.&lt;/p&gt;

&lt;p&gt;Hey, be aware of the &lt;code&gt;Threads.setName&lt;/code&gt;. Some other code may also use it in their way.
Please, do not spoil it, if you can&lt;/p&gt;

&lt;p&gt;Unfortunately, exception stack trace does not container thread name. So the fragile context is
lost if an exception is thrown. The only hope it is logged correctly, and logger includes
a thread name. Surprise! The full thread name.&lt;/p&gt;

&lt;p&gt;What else? Why cannot we include the information locally and so that it is not 
lost in an exception or in a logger message? Can we make it more context-aware and readable?&lt;/p&gt;

&lt;h1 id=&quot;an-example&quot;&gt;An example&lt;/h1&gt;

&lt;p&gt;Consider an application, which runs a request for a given, say, &lt;code&gt;userId&lt;/code&gt;. And it crashes with code like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exception in thread &amp;quot;main&amp;quot; com.jonnyzzz.blog.example.wtf.RemoteCrashServiceTimeOutException
	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl.itWillNotCrash(crash.kt:5)
	at com.jonnyzzz.blog.example.logic.business.BusinessLogic.mightyMethod(BusinessLogic.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:9)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.vendor.fun.AmazingDBSupport.runThisCodeFinally(AmazingDBSupport.kt:7)
	at com.jonnyzzz.blog.example.tansaction.meta.JokingTransaction.crzTr(JokingTransaction.kt:7)
	at com.jonnyzzz.blog.example.tansaction.Transaction.transaction(Transaction.kt:7)
	at com.jonnyzzz.blog.example.system.SystemInvariant.promoteB(SystemInvariant.kt:7)
	at com.jonnyzzz.blog.example.Ent.processA(Ent.kt:7)
	at com.jonnyzzz.blog.example.web.Controller.executeRequest(Controller.kt:10)
	at com.jonnyzzz.blog.example.EnterpriseAppKt.main(EnterpriseApp.kt:13)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What was the context of the failure above? Does it somehow related to parameters that were around?&lt;/p&gt;

&lt;h1 id=&quot;named-frames&quot;&gt;Named Frames&lt;/h1&gt;

&lt;p&gt;I created the &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;Named Frames&lt;/a&gt;
library, which aims to help by including an additional information as &lt;em&gt;method calls&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s now update the code and include &lt;code&gt;userId&lt;/code&gt; and RemoteCrashMicroService backend URL into the thread
dump. That is done be wrapping method calls with code like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;NamedStackFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;YOUR TEXT HERE&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// it is called from a method, which contains &amp;#39;YOUR TEXT HERE&amp;#39; in the full name&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The updated thread dump from the exception is now the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exception in thread &amp;quot;main&amp;quot; com.jonnyzzz.blog.example.wtf.RemoteCrashServiceTimeOutException
	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl$itWillNotCrash$1.call(crash.kt:8)
	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl$itWillNotCrash$1.call(crash.kt:5)

	at __. service = backend-452 .__.call(JavaGeneratorTemplate.java:39)

	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl.itWillNotCrash(crash.kt:7)
	at com.jonnyzzz.blog.example.logic.business.BusinessLogic.mightyMethod(BusinessLogic.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:9)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.vendor.fun.AmazingDBSupport.runThisCodeFinally(AmazingDBSupport.kt:7)
	at com.jonnyzzz.blog.example.tansaction.meta.JokingTransaction.crzTr(JokingTransaction.kt:7)
	at com.jonnyzzz.blog.example.tansaction.Transaction.transaction(Transaction.kt:7)
	at com.jonnyzzz.blog.example.system.SystemInvariant.promoteB(SystemInvariant.kt:7)
	at com.jonnyzzz.blog.example.Ent.processA(Ent.kt:7)
	at com.jonnyzzz.blog.example.web.Controller$executeRequest$1.call(Controller.kt:12)
	at com.jonnyzzz.blog.example.web.Controller$executeRequest$1.call(Controller.kt:7)

	at __. user = jonnyzzz .__.call(JavaGeneratorTemplate.java:39)

	at com.jonnyzzz.blog.example.web.Controller.executeRequest(Controller.kt:11)
	at com.jonnyzzz.blog.example.EnterpriseAppKt.main(EnterpriseApp.kt:13)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This one now includes the sensible information (as service name and userId)
which can be used to debug the original problem.&lt;/p&gt;

&lt;h1 id=&quot;api&quot;&gt;API&lt;/h1&gt;

&lt;p&gt;Named stack frames API is easy and flexible. 
The main entry point is &lt;code&gt;org.jonnyzzz.stack.NamedStackFrame&lt;/code&gt;. There you may use either &lt;code&gt;#global()&lt;/code&gt; method to access 
statically cached factory of named framed. 
The better is to use &lt;code&gt;#newInstance()&lt;/code&gt; method to have an instance of the factory to explicitly control the lifetime.&lt;/p&gt;

&lt;p&gt;Both methods return an instance of &lt;code&gt;org.jonnyzzz.stack.NamedExecutor&lt;/code&gt; interface, which contains all possible methods to wrap
a call with a named frame.&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;The implementation is covered in &lt;a href=&quot;/blog/2014/04/26/named-stack-frames-for-jvm/&quot;&gt;the older post&lt;/a&gt;. Note, the
API is slightly changed in 0.2.x.&lt;/p&gt;

&lt;p&gt;The idea is to on-the-fly generate classes for every given name. All generated classes are loaded with a dedicated
classloader and cached.&lt;/p&gt;

&lt;p&gt;We implement our own class file weaver to avoid external dependencies from other libraries and thus to
simplify adoption of this library in your project.&lt;/p&gt;

&lt;p&gt;The library attempts to escape some &lt;em&gt;bad&lt;/em&gt; symbols from names you pass. All such symbols are replaced with ‘_’.&lt;/p&gt;

&lt;h1 id=&quot;namedstackframe-costs&quot;&gt;NamedStackFrame Costs&lt;/h1&gt;

&lt;p&gt;Custom information in stack traces is not free. We create and load classes to implement it. This means, 
it’s your responsibility to make sure you will not consume all JVM memory on that.&lt;/p&gt;

&lt;p&gt;Practically, you should understand the number of possible names is limited and fits in the memory. That’s it.&lt;/p&gt;

&lt;h1 id=&quot;profiler-grouping-of-calls&quot;&gt;Profiler Grouping of Calls&lt;/h1&gt;

&lt;p&gt;Do you use a profiler to monitor your application? A profiler presents such named 
methods (just like ordinary methods) as different method calls. That means you’ll see a distribution of calls.&lt;/p&gt;

&lt;p&gt;You’ll see a distribution of time spent by each name: a distribution by &lt;code&gt;userId&lt;/code&gt;, &lt;code&gt;action type&lt;/code&gt; or &lt;code&gt;serviceId&lt;/code&gt;
for the example above.&lt;/p&gt;

&lt;h1 id=&quot;android-support&quot;&gt;Android Support&lt;/h1&gt;

&lt;p&gt;All the time I was wondering if it’s helpful for Android applications as well. Do you like the idea?
Please contribute!&lt;/p&gt;

&lt;h1 id=&quot;license&quot;&gt;License&lt;/h1&gt;

&lt;p&gt;The library is &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;download&quot;&gt;Download&lt;/h1&gt;

&lt;p&gt;Sources are on &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Binaries are on JCenter / Bintray&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bintray.com/jonnyzzz/maven/named-frames/_latestVersion&quot;&gt; &lt;img src=&quot;https://api.bintray.com/packages/jonnyzzz/maven/named-frames/images/download.svg&quot; alt=&quot;Download&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/jonnyzzz/named-java-frames&quot;&gt; &lt;img src=&quot;https://travis-ci.org/jonnyzzz/named-java-frames.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Gradle, just add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repositories {
  jcenter()
}

dependencies {
  compile 'org.jonnyzzz.named-frames:named-frames:&amp;lt;LATEST VERSION&amp;gt;'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;issues&quot;&gt;Issues&lt;/h1&gt;

&lt;p&gt;On &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="jvm" />
  
    <category term="debug" />
  
    <category term="trace" />
  
    <category term="library" />
  
    <category term="opensource" />
  
    <category term="stacktrace" />
  
    <category term="frame" />
  
    <category term="stack" />
  
    <category term="java" />
  
    <category term="named-stack-frames" />
  
    <summary type="html">Encode context in a thread dump or an exception stack trace for the JVM.</summary>
  
  </entry>
  
  <entry>
    <title type="html">Sealed classes and ‘when’ expression</title>
    <link href="http://jonnyzzz.com/blog/2017/03/29/when-for-sealed-classes/" rel="alternate" type="text/html" title="Sealed classes and 'when' expression" />
    <published>2017-03-29T00:00:00+00:00</published>
    <updated>2017-03-29T00:00:00+00:00</updated>
    <id>/blog/2017/03/29/when-for-sealed-classes</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/03/29/when-for-sealed-classes/">&lt;p&gt;‘when’ expression as pattern-matching in Kotlin&lt;/p&gt;

&lt;p&gt;Let’s consider the following case. You need to return 3 different return values from a function. Each 
value is associated with information. Say we do &lt;a href=&quot;https://en.wikipedia.org/wiki/Authentication&quot;&gt;authentication&lt;/a&gt; 
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Authorization&quot;&gt;authorization&lt;/a&gt; in one shot. The results 
are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;not authenticated + error message&lt;/li&gt;
  &lt;li&gt;not authorized + userId + error message&lt;/li&gt;
  &lt;li&gt;authenticated and authorized + userId&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;Algebraic data types&lt;/a&gt; looks the best fit here, 
but we have no such in Java.&lt;/p&gt;

&lt;p&gt;A possible approach is to use enum for that. But enum does not allow us to pass additional information
with each call. To fix that we may return a value object with all fields, but it will add a level 
of mess to the callee code.&lt;/p&gt;

&lt;p&gt;Yet another apporach is to make the method return a base class or interface and to have an 
implementation per return case. This would make code cleaner, but with a cost of &lt;code&gt;instenceof&lt;/code&gt;
or &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;visitor pattern&lt;/a&gt; impementation.&lt;/p&gt;

&lt;p&gt;A nice thing in Kotlin is we are able to use 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/control-flow.html#when-expression&quot;&gt;when expression&lt;/a&gt; 
to make this checking code read better. In &lt;a href=&quot;/blog/2017/03/15/switch-to-when/&quot;&gt;a recent post&lt;/a&gt;
I covered &lt;code&gt;when&lt;/code&gt; expression benefits.&lt;/p&gt;

&lt;p&gt;We may also make sure we check all possible branchs in &lt;code&gt;when&lt;/code&gt; expression. For this we only need to 
use &lt;a href=&quot;https://kotlinlang.org/docs/reference/classes.html#sealed-classes&quot;&gt;sealed classes&lt;/a&gt; for 
return objects hierarchy.&lt;/p&gt;

&lt;p&gt;This is example implementation code with sealed class and &lt;code&gt;when&lt;/code&gt; expression:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagicToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotAuthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagicToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotAuthenticated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;NotAuthenticated ${r.message}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotAuthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;NotAuthorized ${r.id}, ${r.message}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Success ${r.token}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example we also need not specify &lt;code&gt;else&lt;/code&gt; case for 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/control-flow.html#when-expression&quot;&gt;when expression&lt;/a&gt;.
Kotlin compiler is able to prove we listed all types if this sealed class.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://kotlinlang.org/docs/reference/typecasts.html#smart-casts&quot;&gt;smart casts&lt;/a&gt; 
in each &lt;code&gt;when&lt;/code&gt; branch we use exactly matched type, so for example, &lt;code&gt;r.message&lt;/code&gt; in the first branch 
is &lt;code&gt;NotAuthenticated#message&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h1 id=&quot;generated-bytecode&quot;&gt;Generated bytecode&lt;/h1&gt;

&lt;p&gt;Let’s traditionally take a look into bytecode, that was generated from this code snippet. 
Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin 1.0.6 plugin. The generated bytecode 
may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  // access flags 0x19
  public final static proceed(LAuthResult;)Ljava/lang/String;
    @Lorg/jetbrains/annotations/NotNull;() // invisible
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
    ALOAD 0
    LDC &amp;quot;r&amp;quot;
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L1
    LINENUMBER 25 L1
    ALOAD 0
    ASTORE 1
   L2
    LINENUMBER 26 L2
    ALOAD 1
    INSTANCEOF AuthResult$NotAuthenticated
    IFEQ L3
   L4
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;NotAuthenticated &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$NotAuthenticated
    INVOKEVIRTUAL AuthResult$NotAuthenticated.getMessage ()Ljava/lang/String;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    GOTO L5
   L3
    LINENUMBER 27 L3
    ALOAD 1
    INSTANCEOF AuthResult$NotAuthorized
    IFEQ L6
   L7
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;NotAuthorized &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$NotAuthorized
    INVOKEVIRTUAL AuthResult$NotAuthorized.getId ()LUserId;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    LDC &amp;quot;, &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$NotAuthorized
    INVOKEVIRTUAL AuthResult$NotAuthorized.getMessage ()Ljava/lang/String;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    GOTO L5
   L6
    LINENUMBER 28 L6
    ALOAD 1
    INSTANCEOF AuthResult$Success
    IFEQ L8
   L9
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;Success &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$Success
    INVOKEVIRTUAL AuthResult$Success.getToken ()LMagicToken;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    GOTO L5
   L8
    NEW kotlin/NoWhenBranchMatchedException
    DUP
    INVOKESPECIAL kotlin/NoWhenBranchMatchedException.&amp;lt;init&amp;gt; ()V
    ATHROW
   L10
    LINENUMBER 25 L10
   L5
    LINENUMBER 29 L5
    ARETURN
   L11
    LOCALVARIABLE r LAuthResult; L0 L11 0
    MAXSTACK = 2
    MAXLOCALS = 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Kotlin compiler generated an &lt;code&gt;if-else&lt;/code&gt; chain with &lt;code&gt;instanceof&lt;/code&gt; checks. First it checks 
if the value is &lt;code&gt;AuthResult$NotAuthenticated&lt;/code&gt;, next &lt;code&gt;AuthResult$NotAuthorized&lt;/code&gt; and finally
&lt;code&gt;AuthResult$Success&lt;/code&gt;. In a case something went terribly wrong, a &lt;code&gt;kotlin.NoWhenBranchMatchedException&lt;/code&gt;
exception is thrown. And this can be achieved if older version of our snippet is executed with a
newer version of &lt;code&gt;AuthResult&lt;/code&gt; class. A full re-compile will fail with error so we were able to 
fix the problem easily.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this post, we looked how &lt;code&gt;when&lt;/code&gt; expression is working with &lt;code&gt;sealed classes&lt;/code&gt;, which are really nice
to use for cases, where one needs to return several different unrelated values.&lt;/p&gt;

&lt;h1 id=&quot;related-work&quot;&gt;Related work&lt;/h1&gt;

&lt;p&gt;You may also like to read a related blog post &lt;a href=&quot;http://engineering.pivotal.io/post/algebraic-data-types-in-kotlin/&quot;&gt;Algebraic Data Types In Kotlin&lt;/a&gt;&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="kotlin-bytecode" />
  
    <category term="jvm" />
  
    <category term="tip" />
  
    <summary type="html">‘when’ expression as pattern-matching in Kotlin</summary>
  
  </entry>
  
  <entry>
    <title type="html">Switch to when</title>
    <link href="http://jonnyzzz.com/blog/2017/03/15/switch-to-when/" rel="alternate" type="text/html" title="Switch to when" />
    <published>2017-03-15T00:00:00+00:00</published>
    <updated>2017-03-15T00:00:00+00:00</updated>
    <id>/blog/2017/03/15/switch-to-when</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/03/15/switch-to-when/">&lt;p&gt;‘when’ expression in Kotlin VS ‘switch’ statement in Java&lt;/p&gt;

&lt;h1 id=&quot;switch-in-java&quot;&gt;Switch in Java&lt;/h1&gt;

&lt;p&gt;Consider the following code in Java&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ELSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThisCanNeverHappenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Widespread pattern, isn’t it? There are several things wrong with it! First, &lt;code&gt;Foo f&lt;/code&gt; variable is not final, 
so it can be ocassionally changed in the future after some code changes.&lt;/p&gt;

&lt;p&gt;Next, we switll have &lt;code&gt;default&lt;/code&gt; branch which is not necessary as we cover all enum values. But if 
someone dares to add extra enum value, this code will still compile correctly!&lt;/p&gt;

&lt;p&gt;Enough problems? Nope! I forgot &lt;code&gt;break;&lt;/code&gt; in each &lt;code&gt;case&lt;/code&gt; branch. Surprise.&lt;/p&gt;

&lt;p&gt;An improvement is still possible to solve some of the problems above. Use &lt;code&gt;return&lt;/code&gt; statement! So we have&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ELSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThisCanNeverHappenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Is it better now? More or less yes. But would you create an additional function for every &lt;code&gt;switch&lt;/code&gt;? I’m not sure.&lt;/p&gt;

&lt;h1 id=&quot;when-in-kotlin&quot;&gt;When in Kotlin&lt;/h1&gt;

&lt;p&gt;The equivalent constuction to &lt;code&gt;switch&lt;/code&gt; in Java is &lt;code&gt;when&lt;/code&gt; in Kotlin. You may take a look to the 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/control-flow.html#when-expression&quot;&gt;when expression&lt;/a&gt; documentation
for more details. Note, &lt;code&gt;when&lt;/code&gt; expression is more functional than &lt;code&gt;switch&lt;/code&gt; in Java.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;bar:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThisCanNeverHappenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was just one-to-one conversion to Kotlin and I see the warning to convert &lt;code&gt;var f&lt;/code&gt; to &lt;code&gt;val f&lt;/code&gt; at first.&lt;/p&gt;

&lt;p&gt;It is good to notice, &lt;code&gt;when&lt;/code&gt; can be used as expression! We may avoid assigning &lt;code&gt;f&lt;/code&gt; variable inside each case.&lt;/p&gt;

&lt;p&gt;The right of &lt;code&gt;-&amp;gt;&lt;/code&gt; is also an expression. If you need more things to do, use &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. There is no &lt;code&gt;break&lt;/code&gt; 
exists or required.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;when&lt;/code&gt; is used as expression, &lt;code&gt;else&lt;/code&gt; branch is not necessary, the compiler can prove all branches are included.
At least this works if you checking enum or 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/classes.html#sealed-classes&quot;&gt;sealed classes&lt;/a&gt;. 
Compilation fails if a missing branch is detected.&lt;/p&gt;

&lt;p&gt;Overall I turn the example into this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks concise, isn’t it?&lt;/p&gt;

&lt;h1 id=&quot;generated-bytecode&quot;&gt;Generated bytecode&lt;/h1&gt;

&lt;p&gt;Let’s look into bytecode for the &lt;code&gt;when&lt;/code&gt; statement call. Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin
1.0.6 plugin. The generated bytecode may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  // access flags 0x19
  public final static action(LBar;)V
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
    ALOAD 0
    LDC &amp;quot;e&amp;quot;
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L1
    LINENUMBER 13 L1
    ALOAD 0
    GETSTATIC WhKt$WhenMappings.$EnumSwitchMapping$0 : [I
    SWAP
    INVOKEVIRTUAL Bar.ordinal ()I
    IALOAD
    LOOKUPSWITCH
      1: L2
      2: L3
      default: L4
   L2
    LINENUMBER 14 L2
    INVOKESTATIC WhKt.value42 ()LFoo;
    GOTO L5
   L3
    LINENUMBER 15 L3
    INVOKESTATIC WhKt.value444 ()LFoo;
    GOTO L5
   L4
    NEW kotlin/NoWhenBranchMatchedException
    DUP
    INVOKESPECIAL kotlin/NoWhenBranchMatchedException.&amp;lt;init&amp;gt; ()V
    ATHROW
   L6
    LINENUMBER 13 L6
   L5
    ASTORE 1
   L7
    LINENUMBER 18 L7
    ALOAD 1
    INVOKESTATIC WhKt.doSomeMightyWork (LFoo;)V
   L8
    LINENUMBER 19 L8
    RETURN
   L9
    LOCALVARIABLE f LFoo; L7 L9 1
    LOCALVARIABLE e LBar; L0 L9 0
    MAXSTACK = 2
    MAXLOCALS = 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From the bytecode we see it throws &lt;code&gt;kotlin/NoWhenBranchMatchedException&lt;/code&gt; in case it turned out
there is an additional case. For example, this may happen if we are running a compiled code 
againt updated &lt;code&gt;Bar&lt;/code&gt; enum with additional case added.&lt;/p&gt;

&lt;p&gt;Still, a re-compilation will show there is an errors.&lt;/p&gt;

&lt;p&gt;The only problem is that &lt;code&gt;NoWhenBranchMatchedException&lt;/code&gt; contains no information on what 
kind of instance was there, maybe a &lt;code&gt;toString()&lt;/code&gt; or &lt;code&gt;getClass().getName()&lt;/code&gt; were nice to 
have helpers. Still, in general, such calls may also throw exceptions.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this post we see how &lt;code&gt;when&lt;/code&gt; expression can help one avoid trivial errors
in switches. We discussed the benefit of using &lt;code&gt;when&lt;/code&gt; as expression&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="kotlin-bytecode" />
  
    <category term="jvm" />
  
    <category term="tip" />
  
    <summary type="html">‘when’ expression in Kotlin VS ‘switch’ statement in Java Switch in Java Consider the following code in Java</summary>
  
  </entry>
  
  <entry>
    <title type="html">Guard access by lock in Kotlin</title>
    <link href="http://jonnyzzz.com/blog/2017/03/01/guarded-by-lock/" rel="alternate" type="text/html" title="Guard access by lock in Kotlin" />
    <published>2017-03-01T00:00:00+00:00</published>
    <updated>2017-03-01T00:00:00+00:00</updated>
    <id>/blog/2017/03/01/guarded-by-lock</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/03/01/guarded-by-lock/">&lt;p&gt;GuardedByLock a simple helper to make sure variable is only accessed with lock&lt;/p&gt;

&lt;p&gt;A topic of ownership is better covered in &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust Language&lt;/a&gt;. Still, such problems
are not solved well enough in the JVM world. Let’s consider a trivial shared state access example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;updateStateWithNewValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We all know the best state is no state. And we tend to decouple tricky things. But of course, there are 
some places in programs where one finally needs to deal with a state. In reality, it can easily be a 
complicated state with several different locks in one object.&lt;/p&gt;

&lt;p&gt;The common problem here is to make sure fields are accessed with correct locks taken. It is tricky 
to ensure in Java. It is double tricky to ensure future changes will not break the contract.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305&lt;/a&gt; and &lt;a href=&quot;http://jcip.net/annotations/doc/net/jcip/annotations/GuardedBy.html&quot;&gt;GuardedBy&lt;/a&gt;
annotations are created to make a binding between state and guards. But those are only to 
help an IDE to be smarter, those annotations will not turn a mistake into a compilation error.&lt;/p&gt;

&lt;p&gt;I’m looking the way to make a compiler to ensure the access is correct.&lt;/p&gt;

&lt;h1 id=&quot;java-style-solution&quot;&gt;Java Style solution&lt;/h1&gt;

&lt;p&gt;In Java, this can be done in the following way. Create a function &lt;code&gt;runWithLock&lt;/code&gt; and make this function accept
an interface with a method like &lt;code&gt;run(State s)&lt;/code&gt;. If necessary a generics can be added to simplify usages.&lt;/p&gt;

&lt;p&gt;To implement that one need to extract a state object (which I call &lt;code&gt;State&lt;/code&gt;). Happy Java 1.8 users may benefit
from Lambda syntax. But the approach itself requires a creation of tiny objects (for lambdas, in most cases) on every call.
Such overhead is small, but one may not like it.&lt;/p&gt;

&lt;p&gt;An example call code would look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runWithLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runWithLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s try avoid lambdas overhead and to yield a bit better syntax.&lt;/p&gt;

&lt;h1 id=&quot;kotlin-style-solution&quot;&gt;Kotlin Style solution&lt;/h1&gt;

&lt;p&gt;Consider the following implementation in Kotlin&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GuardedByLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;L:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lock:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;state:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runWithLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The usage is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;   &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GuardedByLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
   
   &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runWithLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s take a look closer to the &lt;code&gt;runWithLock&lt;/code&gt; call. Here &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; are used to 
declare an &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html&quot;&gt;anonymous extension function&lt;/a&gt; 
of type &lt;code&gt;State.() -&amp;gt; Y&lt;/code&gt; (&lt;code&gt;Y&lt;/code&gt; is a generic type parameter).
Extension function means that in the body of the function we have &lt;code&gt;this&lt;/code&gt; keyword pointing to &lt;code&gt;State&lt;/code&gt; object
instance. And the part &lt;code&gt;value = 5&lt;/code&gt; means we assign the value to &lt;code&gt;State&lt;/code&gt; object property/field.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;inline&lt;/code&gt; keyword here makes Kotlin compiler to 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/inline-functions.html&quot;&gt;inline&lt;/a&gt;
the function body to avoid creating an anonymous function in the compiled code. You may refer to 
&lt;a href=&quot;/blog/2017/02/15/catchall/&quot;&gt;the previous post&lt;/a&gt; for bytecode listing of inline function calls.&lt;/p&gt;

&lt;p&gt;With this approach, we avoid creation anonymous classes for Lambdas from one hand. From the other hand,
the Kotlin compiler is in charge of checking a &lt;code&gt;State&lt;/code&gt; object instance in only accessible after necessary
locks are held.&lt;/p&gt;

&lt;p&gt;Finally, the bytecode for the &lt;code&gt;main&lt;/code&gt; function is the following. Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin 
1.0.6 plugin. The generated bytecode may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  // access flags 0x19
  public final static main()V
    TRYCATCHBLOCK L0 L1 L2 null
    TRYCATCHBLOCK L2 L3 L2 null
   L4
    LINENUMBER 27 L4
    GETSTATIC GlKt.lock : LGuardedByLock;
    ASTORE 0
    NOP
   L5
    LINENUMBER 30 L5
    ALOAD 0
    INVOKEVIRTUAL GuardedByLock.getLock ()Ljava/util/concurrent/locks/Lock;
    ASTORE 1
    NOP
   L6
    ALOAD 1
    INVOKEINTERFACE java/util/concurrent/locks/Lock.lock ()V
   L7
   L0
    NOP
   L8
    NOP
   L9
    LINENUMBER 30 L9
    ALOAD 0
    INVOKEVIRTUAL GuardedByLock.getState ()Ljava/lang/Object;
    CHECKCAST State
    ASTORE 2
    NOP
   L10
    LINENUMBER 27 L10
    ALOAD 2
    ICONST_5
    INVOKEVIRTUAL State.setValue (I)V
   L11
   L12
    GETSTATIC kotlin/Unit.INSTANCE : Lkotlin/Unit;
   L13
   L14
    LINENUMBER 30 L14
    ASTORE 2
   L1
    ALOAD 1
    INVOKEINTERFACE java/util/concurrent/locks/Lock.unlock ()V
    ALOAD 2
    GOTO L15
   L2
    ASTORE 2
   L3
    ALOAD 1
    INVOKEINTERFACE java/util/concurrent/locks/Lock.unlock ()V
    ALOAD 2
    ATHROW
   L15
    LINENUMBER 30 L15
   L16
    POP
   L17
    LINENUMBER 28 L17
    RETURN
   L18
    LOCALVARIABLE $receiver LState; L10 L12 2
    LOCALVARIABLE $i$a$1$runWithLock I L10 L12 3
    LOCALVARIABLE $i$a$1$withLock I L9 L14 4
    LOCALVARIABLE this_$iv LGuardedByLock; L5 L16 0
    LOCALVARIABLE $i$f$runWithLock I L5 L16 5
    MAXSTACK = 2
    MAXLOCALS = 6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we see from the code, there is NO anonymous class creation.A call to &lt;code&gt;GuardedByLock#runWithLock&lt;/code&gt; was inlined into 
the &lt;code&gt;main&lt;/code&gt; function body, meaning less overhead (who’d measure it :).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In the post, I presented &lt;code&gt;GuardedByLock&lt;/code&gt; class in Kotlin. Using it in your project may help to 
correctly isolate state and make Kotlin complier checking all possible violations for you. 
The only cost is 2 additional object instances: one for &lt;code&gt;GuardedByLock&lt;/code&gt;, and the other one for the &lt;code&gt;State&lt;/code&gt;.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="kotlin-bytecode" />
  
    <category term="jvm" />
  
    <category term="tip" />
  
    <summary type="html">GuardedByLock a simple helper to make sure variable is only accessed with lock</summary>
  
  </entry>
  
  <entry>
    <title type="html">Catching exceptions with less code in Kotlin</title>
    <link href="http://jonnyzzz.com/blog/2017/02/15/catchall/" rel="alternate" type="text/html" title="Catching exceptions with less code in Kotlin" />
    <published>2017-02-15T00:00:00+00:00</published>
    <updated>2017-02-15T00:00:00+00:00</updated>
    <id>/blog/2017/02/15/catchall</id>
    <content type="html" xml:base="http://jonnyzzz.com/blog/2017/02/15/catchall/">&lt;p&gt;A tiny inline function for consise try/catch&lt;/p&gt;

&lt;p&gt;In JVM every call can throw an exception. In Java language, we have dedicated declaration that a method is 
expected to throw some exception types. But still, some other (&lt;code&gt;Throwable&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;RuntimeException&lt;/code&gt;) exceptions 
may still be thrown.&lt;/p&gt;

&lt;p&gt;In Kotlin there are no checked exceptions (like, say in C#). Sill, one have to expect
any possible exception being thrown from any possible place.&lt;/p&gt;

&lt;p&gt;Most cases it’s ok and one should not do anything specific about exceptions. Still, there are other places, 
where an exception may break code logic. In asynchronous applications (for example with RxJava, Netty, grpc-java) where 
most of the code is a callback, it may turn out necessary to make sure an exception is not breaking some 
outer login.&lt;/p&gt;

&lt;p&gt;A trivial solution is to use &lt;code&gt;try/catch&lt;/code&gt;. But it makes a code quite ugly when you have several statements to call. It 
may look like that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;handleAction1Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;handleAction2Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;/// ....&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callActionN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;handleActionNError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A good think here is that &lt;code&gt;try/catch&lt;/code&gt; is expression in Kotlin, but still it is quite long to use.&lt;/p&gt;

&lt;p&gt;In my application, I found that about 80% of such catches were done to 
log actual problem and to continue forking further. Meaning &lt;code&gt;handleActionNError()&lt;/code&gt; functions in my case were 
calls to a &lt;code&gt;Logger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is now equivalent way in Java to replace this long construction. Of course, it is possible to pass a 
lambda expression into a function like &lt;code&gt;catchAll&lt;/code&gt;. But this would change a program and it would add extra 
object creation in most of the cases.&lt;/p&gt;

&lt;p&gt;One can implement similar &lt;code&gt;catchAll&lt;/code&gt; function in Kotlin too. Thanks to 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/inline-functions.html&quot;&gt;inline functions&lt;/a&gt;
it has no overhead at all.&lt;/p&gt;

&lt;p&gt;This is the function I use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Failed to $message. ${t.message}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So now I may rewrite the above example in a way consise fashion&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;action1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;action2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;///  ....&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;actionN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callActionN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every usage of the function &lt;code&gt;catchAll&lt;/code&gt; is inlined by Kotlin compiler in to a caller method bodies. Kotlin compiler also
inlines the action anonymous function &lt;code&gt;action&lt;/code&gt; too. There is no overhead! Let’s consider the following
example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;println&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test console output&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following bytecode is generated out of it. Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin 1.0.6 plugin. The generated
bytecode may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public final static main([Ljava/lang/String;)V
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
    TRYCATCHBLOCK L0 L1 L2 java/lang/Throwable
   L3
    ALOAD 0
    LDC &amp;quot;args&amp;quot;
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L4
    LINENUMBER 17 L4
    GETSTATIC LOG.INSTANCE : LLOG;
    CHECKCAST Logger
    ASTORE 1
    LDC &amp;quot;println&amp;quot;
    ASTORE 2
    NOP
   L5
    LINENUMBER 24 L5
   L6
   L0
    NOP
   L7
    LINENUMBER 25 L7
    NOP
   L8
    LINENUMBER 18 L8
    LDC &amp;quot;Test console output&amp;quot;
    ASTORE 3
    NOP
   L9
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    ALOAD 3
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/Object;)V
   L10
   L11
    LINENUMBER 18 L11
   L12
    LINENUMBER 19 L12
   L13
    NOP
   L1
    GOTO L14
   L2
    LINENUMBER 26 L2
    ASTORE 3
   L15
    LINENUMBER 27 L15
    ALOAD 1
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;Failed to &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 2
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    LDC &amp;quot;. &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 3
    INVOKEVIRTUAL java/lang/Throwable.getMessage ()Ljava/lang/String;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    ALOAD 3
    INVOKEVIRTUAL Logger.warn (Ljava/lang/String;Ljava/lang/Object;)V
   L16
    LINENUMBER 28 L16
   L14
    LINENUMBER 29 L14
   L17
   L18
    LINENUMBER 20 L18
    RETURN
   L19
    LOCALVARIABLE $i$a$1$catchAll I L8 L13 4
    LOCALVARIABLE t$iv Ljava/lang/Throwable; L2 L16 3
    LOCALVARIABLE LOG$iv LLogger; L5 L17 1
    LOCALVARIABLE message$iv Ljava/lang/String; L5 L17 2
    LOCALVARIABLE $i$f$catchAll I L5 L17 5
    LOCALVARIABLE args [Ljava/lang/String; L3 L19 0
    MAXSTACK = 3
    MAXLOCALS = 6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we see the &lt;code&gt;catchAll&lt;/code&gt; function call is inlined. We have &lt;code&gt;println&lt;/code&gt; call as-is, without any anonymous function 
wrappers. Any combination of &lt;code&gt;catchAll&lt;/code&gt; calls generates similar bytecode with &lt;code&gt;try/catch&lt;/code&gt; blocks. Once can easily combine 
such calls to make a program easier to read on some higher level.&lt;/p&gt;

&lt;p&gt;Disclaimer. Checked or unchecked exceptions are meaningful. I’m not trying to promote the idea to catch all possible exceptions
in every possible statement. The goal is to show it is possible to create a tiny function that would help to recure a number
of similar code snippets and improve readability. It is up to you to decide if an error is OK to ignore or to log without propagation.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="kotlin-bytecode" />
  
    <category term="jvm" />
  
    <category term="tip" />
  
    <summary type="html">A tiny inline function for consise try/catch</summary>
  
  </entry>
  
</feed>
