<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xml" href="https://jonnyzzz.com/feed.xslt.xml"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <link href="https://jonnyzzz.com/feed-internal.xml" rel="self" type="application/atom+xml" />
  <link href="https://jonnyzzz.com/" rel="alternate" type="text/html" />
  <updated>2019-05-10T05:01:14+00:00</updated>
  <id>/</id>

  
  <title type="html">Eugene Petrenko</title>
  

  
  <subtitle>@jonnyzzz personal page and blog</subtitle>
  

  

  
  
  <entry>
    <title type="html">IP Whitelist for WAF Rules and Security Groups</title>
    <link href="https://jonnyzzz.com/blog/2019/04/29/terraform-waf/" rel="alternate" type="text/html" title="IP Whitelist for WAF Rules and Security Groups" />
    <published>2019-04-29T00:00:00+00:00</published>
    <updated>2019-04-29T00:00:00+00:00</updated>
    <id>/blog/2019/04/29/terraform-waf</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2019/04/29/terraform-waf/">&lt;p&gt;Have you ever tried to set up CloudFront WAF rules and Security Groups
to allow access &lt;em&gt;only&lt;/em&gt; from specific IP
addresses? Having the list of these specific IP addresses coded only once. 
We’ll see how to use &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;
to solve and to automate this task.&lt;/p&gt;

&lt;h2 id=&quot;the-application&quot;&gt;The Application&lt;/h2&gt;

&lt;p&gt;We have a traditional application on &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS&lt;/a&gt;, where
a &lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;CloudFront&lt;/a&gt; distribution handles
the incoming traffic.
Behind it, we have static pages on
&lt;a href=&quot;https://aws.amazon.com/s3&quot;&gt;S3&lt;/a&gt; and API endpoints
behind &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/&quot;&gt;Application Load Balancer&lt;/a&gt; (ALB).
We use &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; to manage
production and staging environments, &lt;code class=&quot;highlighter-rouge&quot;&gt;v0.11.11&lt;/code&gt; in our case.&lt;/p&gt;

&lt;p&gt;The project is new and not yet public.
We allow access to the project only from specific IP addresses of developers and offices.
We set up IP filtering at both
&lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;Cloud Front&lt;/a&gt; (WAF rules) and 
&lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&quot;&gt;Security Groups&lt;/a&gt;
levels, depending on the AWS entities.&lt;/p&gt;

&lt;h1 id=&quot;ip-whitelist-module&quot;&gt;IP Whitelist Module&lt;/h1&gt;

&lt;p&gt;Terraform &lt;a href=&quot;https://www.terraform.io/docs/modules/index.html&quot;&gt;Module&lt;/a&gt;
is the standard way to avoid code duplicates in the infrastructure code. 
I have the module called &lt;code class=&quot;highlighter-rouge&quot;&gt;ip-whitelist&lt;/code&gt; (in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ip-whitelist&lt;/code&gt; folder) to
hold and export the list of whitelisted IPv4 addresses. It is used everywhere 
in the code instead to avoid hard-coded IP addresses (which are subject to change).&lt;/p&gt;

&lt;p&gt;Let’s create a module that exports all IP addresses for the white list.
The following &lt;code class=&quot;highlighter-rouge&quot;&gt;.tf&lt;/code&gt; file in &lt;code class=&quot;highlighter-rouge&quot;&gt;ip-whitelist&lt;/code&gt; folder makes it:&lt;/p&gt;
&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cidr&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;1.2.3.4/32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;5.6.7.8/32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;security-groups&quot;&gt;Security Groups&lt;/h1&gt;

&lt;p&gt;There are many entities, that we create in Terraform. There are
several places in an infrastructure, where one uses security 
groups. Let’s follow an easy strategy:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;create a unique security group per usage&lt;/li&gt;
  &lt;li&gt;do not duplicate code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Both statements of the strategy comes from the programming background.
The fewer dependencies between modules one has, the easier it will be to update
or refactor the scripts in the future. We tend to extract common parts of
our programs to avoid duplicates and improve maintainability of the code.&lt;/p&gt;

&lt;p&gt;What is the common part of all of those AWS service? Yes, 
&lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&quot;&gt;Security Groups&lt;/a&gt;.
There are Security Groups in a &lt;a href=&quot;https://aws.amazon.com/vpc/&quot;&gt;VPC&lt;/a&gt; and without a VPC.
In both we’d like to reuse the same IP addresses filter list.
Security Groups are easy to create with the module above, for example with the following code
The module is easy to call from other places of the project:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ip-whitelist&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;source&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;relative path to module&amp;gt;ip-whitelist&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_security_group&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;ingress&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;from_port&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;to_port&lt;/span&gt;   &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;22&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;protocol&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tcp&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cidr_blocks&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ip-whitelist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let’s switch to the Cloud Front, where WAF rules are used to implement IP whitelists&lt;/p&gt;

&lt;h1 id=&quot;cloud-front-waf-rules&quot;&gt;Cloud Front WAF Rules&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;CloudFront&lt;/a&gt; distribution uses 
&lt;a href=&quot;https://aws.amazon.com/waf/&quot;&gt;Web Application Firewall&lt;/a&gt; (WAF)
to limit the access. 
The main part of WAF configuration in Terraform uses the
&lt;a href=&quot;https://www.terraform.io/docs/providers/aws/r/waf_ipset.html&quot;&gt;aws_waf_ipset&lt;/a&gt; resource:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_waf_ipset&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ipset&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;tfIPSet&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ip_set_descriptors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IPV4&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;192.0.7.0/24&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;ip_set_descriptors&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IPV4&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;10.16.16.0/16&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The following few more resources configures Web Application Firewall (WAF) to allow connections
only from our whitelisted IP addresses:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_waf_rule&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;wafrule&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;depends_on&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_waf_ipset.ipset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cf_waf_rule&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;metric_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cf_waf_rule&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;predicates&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;data_id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_waf_ipset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ipset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;negated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IPMatch&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_waf_web_acl&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;waf_acl&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;depends_on&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;aws_waf_ipset.ipset&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;aws_waf_rule.wafrule&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cf_waf_acl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;metric_name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cf_waf_acl&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;default_action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BLOCK&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;rules&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ALLOW&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    
    &lt;span class=&quot;nx&quot;&gt;priority&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;rule_id&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_waf_rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wafrule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;     &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;REGULAR&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we see, &lt;code class=&quot;highlighter-rouge&quot;&gt;ip_set_descriptors&lt;/code&gt; parameter has type &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt;, 
each element of which is a map with two keys: &lt;code class=&quot;highlighter-rouge&quot;&gt;type&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt;.
The format is different from one we use in the &lt;code class=&quot;highlighter-rouge&quot;&gt;ip-whitelist&lt;/code&gt; module, 
Let’s see how we may avoid duplication&lt;/p&gt;

&lt;h2 id=&quot;list-to-list-of-maps&quot;&gt;List to List of Maps&lt;/h2&gt;
&lt;p&gt;First idea - let’s convert the existing list of IP addresses into
WAF rules in Terraform by turning every entry
of &lt;code class=&quot;highlighter-rouge&quot;&gt;cidr&lt;/code&gt; list into a map.&lt;/p&gt;

&lt;p&gt;Please do not try that way, it does not work, I suppose that the
&lt;a href=&quot;https://github.com/hashicorp/terraform/issues/9814&quot;&gt;problem&lt;/a&gt; in Terraform &lt;code class=&quot;highlighter-rouge&quot;&gt;0.11.11&lt;/code&gt;
does not make it work. As far as I see, Terraform loses the fact a list item was a map. 
An attempt to implement that may fail with an error like that:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Error: module.staging.aws_waf_ipset.name: &quot;ip_set_descriptors.0.type&quot;: required field is not set
Error: module.staging.aws_waf_ipset.name: &quot;ip_set_descriptors.0.value&quot;: required field is not set
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;map-of-lists-to-list&quot;&gt;Map of Lists to List&lt;/h2&gt;

&lt;p&gt;The second approach it to update the
format in my &lt;code class=&quot;highlighter-rouge&quot;&gt;ip-whitelist&lt;/code&gt; module. IP addresses are now written in the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;aws_waf_ipset&lt;/code&gt; format, aka as a list of maps. The only missing part - we need the opposite conversion
to implement &lt;code class=&quot;highlighter-rouge&quot;&gt;cidr&lt;/code&gt; output value: We need to convert that list of maps back to
a plain list of CIDR blocks (for Security Groups).&lt;/p&gt;

&lt;p&gt;It works! I use the following code:&lt;/p&gt;
&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;locals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;wafs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IPV4&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.2.3.4/32&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IPV4&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;5.6.7.8/32&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;resource&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;null_resource&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;ipv4&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wafs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;triggers&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;cidr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wafs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;IPV4&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;lookup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wafs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;value&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;cidr&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;compact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;null_resource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ipv4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;triggers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;waf&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;local&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;wafs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The module exports &lt;code class=&quot;highlighter-rouge&quot;&gt;waf&lt;/code&gt; variable with WAF ipset rules, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;cidr&lt;/code&gt;
variable with IPv4 security groups. IPv6 list can be added similarly.
The conversion from &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; of &lt;code class=&quot;highlighter-rouge&quot;&gt;map&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;list&lt;/code&gt; I do via &lt;code class=&quot;highlighter-rouge&quot;&gt;null_resource&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;
&lt;a href=&quot;https://www.terraform.io/docs/configuration/resources.html&quot;&gt;attribute&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;cidr&lt;/code&gt; block is only IPv4 elements, we need to filter &lt;code class=&quot;highlighter-rouge&quot;&gt;waf&lt;/code&gt; elements.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the expression:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; lookup(local.wafs[count.index], &quot;type&quot;) == &quot;IPV4&quot;
        ? lookup(local.wafs[count.index], &quot;value&quot;)
        : &quot;&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We replace incorrect elements with empty strings. Terraform has the
&lt;code class=&quot;highlighter-rouge&quot;&gt;compact&lt;/code&gt; function to remove empty strings from a list.&lt;/p&gt;

&lt;p&gt;There is no direct loop function in Terraform 0.11.11.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;null_resource&lt;/code&gt; resource with &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; attribute works as the loop.
The last expression &lt;code class=&quot;highlighter-rouge&quot;&gt;null_resource.ipv4.*.triggers.cidr&lt;/code&gt; selects the addresses
as a list.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;All sources from the post are available on the &lt;a href=&quot;https://github.com/jonnyzzz/terraform-ip-whitelist&quot;&gt;GitHub&lt;/a&gt;
repository. You’ll find a live example and templates to use it in your projects
easily.&lt;/p&gt;

&lt;p&gt;We’ve seen how to create and share the list of IP addresses between
different security groups and WAF rules. It helps to avoid duplicates
in the deployment code. Should something change in the company infrastructure,
we could easily change only one file in the deployments code to replicate it.&lt;/p&gt;

&lt;p&gt;Do you use WAF? Check out &lt;a href=&quot;/blog/2019/03/26/terraform-cloudfront-sg/&quot;&gt;the previous post&lt;/a&gt;
to see how to configure a Security Group to allow access only from
CloudFront IP addresses.
Sometimes, one needs a &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt; statement in Terraform. We discuss
&lt;a href=&quot;/blog/2018/07/23/terraform-if/&quot;&gt;the workaround&lt;/a&gt; in an older post too.&lt;/p&gt;

&lt;p&gt;I code Terraform scripts in
&lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; with
the fantastic plugin done by a friend of mine:
&lt;a href=&quot;https://plugins.jetbrains.com/plugin/7808-hashicorp-terraform--hcl-language-support&quot;&gt;Terraform Support plugin&lt;/a&gt;.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="aws" />
  
    <category term="waf" />
  
    <category term="security-group" />
  
    <category term="infrastructure" />
  
    <category term="terraform" />
  
    <category term="devops" />
  
    <category term="clouds" />
  
    <summary type="html">IP whitelists for AWS Cloud Front WAF and Security Groups with Terraform</summary>
  
  </entry>
  
  <entry>
    <title type="html">Migrating to Gradle Kotlin DSL - Kotlin</title>
    <link href="https://jonnyzzz.com/blog/2019/04/02/gradle-kotlin-migration-2/" rel="alternate" type="text/html" title="Migrating to Gradle Kotlin DSL - Kotlin" />
    <published>2019-04-02T00:00:00+00:00</published>
    <updated>2019-04-02T00:00:00+00:00</updated>
    <id>/blog/2019/04/02/gradle-kotlin-migration-2</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2019/04/02/gradle-kotlin-migration-2/">&lt;p&gt;Are you using Kotlin in your project?
Let’s use the Kotlin DSL to configure the builds of our project
with the &lt;a href=&quot;https://gradle.org/kotlin&quot;&gt;Gradle Kotlin DSL&lt;/a&gt;.
In the post, we will cover several configuration tricks I found
very useful for my Kotlin projects in Gradle.&lt;/p&gt;

&lt;p&gt;New to Gradle Kotlin DSL? Take a look at the 
&lt;a href=&quot;/blog/2019/03/04/gradle-kotlin-migration-1/&quot;&gt;previous post&lt;/a&gt;
for practical recommendations on migrating from Groovy to Kotlin
build scripts.&lt;/p&gt;

&lt;h2 id=&quot;enable-kotlin-plugin&quot;&gt;Enable Kotlin Plugin&lt;/h2&gt;

&lt;p&gt;The quickest way to enable Kotlin in your Gradle build is&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jvm&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.3.21&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gradle adds the &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin()&lt;/code&gt; helper function to simplify your build scripts. The Kotlin standard
library dependencies can be configured in the same way with the help of different &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin&lt;/code&gt; functions&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stdlib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;reflect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You don’t need to include the Kotlin version dependencies. The Kotlin plugin for Gradle
configures the dependencies resolution, so every Kotlin standard library dependency
will use the same Kotlin version out of the box.&lt;/p&gt;

&lt;h2 id=&quot;configuring-kotlin-compilation-tasks&quot;&gt;Configuring Kotlin Compilation Tasks&lt;/h2&gt;

&lt;p&gt;You can configure Kotlin in the Gradle scripts in Groovy. It will look something like this&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;compileKotlin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;kotlinOptions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;suppressWarnings&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Do you see the downside? Yes, you may have seen there are &lt;code class=&quot;highlighter-rouge&quot;&gt;compileKotlin&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;compileTestKotlin&lt;/code&gt; tasks,
which means the second one is not configured. Let’s fix it in the Kotlin script.&lt;/p&gt;

&lt;p&gt;The code from above will unfortunately not work in a Kotlin Gradle DSL. We need to refer explicitly to
a task element of the &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt; property of a &lt;code class=&quot;highlighter-rouge&quot;&gt;project&lt;/code&gt;. Let’s not forget to configure
all the Kotlin tasks for the project.&lt;/p&gt;

&lt;p&gt;Here is what I found works for configuring all the Kotlin tasks in a Kotlin DSL in one fell swoop:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.jetbrains.kotlin.gradle.tasks.*&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KotlinCompile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;kotlinOptions&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;jvmTarget&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.8&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;freeCompilerArgs&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;-progressive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;asks.withType&amp;lt;T&amp;gt;&lt;/code&gt; function will run the lambda for every existing and newly
added task of the given type.&lt;/p&gt;

&lt;h2 id=&quot;kotlin-version-in-dependencies&quot;&gt;Kotlin Version in Dependencies&lt;/h2&gt;

&lt;p&gt;With transitive dependencies it could turn out that we use are using older libraries in our project.
Kotlin &lt;a href=&quot;https://kotlinlang.org/docs/reference/evolution/components-stability.html&quot;&gt;guarantees compatibility&lt;/a&gt;,
but still, I’d make sure I am using the actual libraries when possible.&lt;/p&gt;

&lt;p&gt;Let’s check to make sure we are using the same version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-stdlib&lt;/code&gt; and
the other &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-*&lt;/code&gt; libraries, like for instance, &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-reflect&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The following Gradle script works for this in Kotlin:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.jetbrains.kotlin.gradle.plugin.*&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//https://youtrack.jetbrains.com/issue/KT-19788&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;kotlinVersion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lazy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KotlinBasePluginWrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlinPluginVersion&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;distinct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;single&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolutionStrategy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eachDependency&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.jetbrains.kotlin&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requested&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startsWith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;kotlin-&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;useVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kotlinVersion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You may be asking yourself, why do we need to use code trickery for the &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlinVersion&lt;/code&gt; variable?
The simple answer is, in Gradle we cannot use variables inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins{..}&lt;/code&gt; block.
This means that it’s impossible to share the Kotlin version as a variable between the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins{..}&lt;/code&gt;
block and the rest of the script.&lt;/p&gt;

&lt;p&gt;The ancient &lt;code class=&quot;highlighter-rouge&quot;&gt;buildscript{..}&lt;/code&gt; block does allow it. I prefer the shorter and more explicit 
&lt;code class=&quot;highlighter-rouge&quot;&gt;plugins{..}&lt;/code&gt; block instead to configure Gradle plugins in builds.&lt;/p&gt;

&lt;p&gt;You may want to vote on this issue
&lt;a href=&quot;https://youtrack.jetbrains.com/issue/KT-19788&quot;&gt;KT-19788&lt;/a&gt;
to make the Gradle Kotlin plugin declare its version.&lt;/p&gt;

&lt;h2 id=&quot;kotlin-dsl-plugin-and-buildsrc&quot;&gt;Kotlin-Dsl Plugin and buildSrc&lt;/h2&gt;

&lt;p&gt;There is yet another experimental plugin, maintained by Gradle, that helps us to
use Kotlin for build logic development in Gradle.&lt;/p&gt;

&lt;p&gt;The plugin is called &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-dsl&lt;/code&gt;, you can find more details on it
in the
&lt;a href=&quot;https://docs.gradle.org/current/userguide/kotlin_dsl.html#sec:kotlin-dsl_plugin&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The plugin is an excellent choice for a &lt;code class=&quot;highlighter-rouge&quot;&gt;buildSrc&lt;/code&gt; project. It simplifies the setup,
configures all the dependencies, including &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin-stdlib&lt;/code&gt; and Gradle’s own build script related
classes. We will discuss &lt;code class=&quot;highlighter-rouge&quot;&gt;buildSrc&lt;/code&gt; projects and my findings in more detail in the next post.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; as a statically typed programming language
seems to play well with writing Gradle build scripts.
Thanks to the static type inference, the Kotlin compiler detects errors earlier and
shows helpful compilation error messages and warnings.
Both the IDE and the compiler use information about types to infer
the available functions and properties in a given scope, even inside a 5th level
nested lambda with receivers.&lt;/p&gt;

&lt;p&gt;You may remember from the
&lt;a href=&quot;/blog/2019/03/04/gradle-kotlin-migration-1/&quot;&gt;previous post&lt;/a&gt;
that our example project is written entirely in Kotlin, in that post we 
learned how to configure Kotlin compilation tasks and dependencies in
Kotlin.&lt;/p&gt;

&lt;p&gt;I will cover more aspects in the coming posts, stay tuned!&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="gradle" />
  
    <category term="gradle-kotlin" />
  
    <category term="gradle-kts" />
  
    <category term="gradle-groovy" />
  
    <category term="kts" />
  
    <category term="kotlin" />
  
    <category term="groovy" />
  
    <category term="build" />
  
    <category term="refactoring" />
  
    <summary type="html">Kotlin tasks in Gradle Kotlin DSL</summary>
  
  </entry>
  
  <entry>
    <title type="html">Security Group for CloudFront</title>
    <link href="https://jonnyzzz.com/blog/2019/03/26/terraform-cloudfront-sg/" rel="alternate" type="text/html" title="Security Group for CloudFront" />
    <published>2019-03-26T00:00:00+00:00</published>
    <updated>2019-03-26T00:00:00+00:00</updated>
    <id>/blog/2019/03/26/terraform-cloudfront-sg</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2019/03/26/terraform-cloudfront-sg/">&lt;p&gt;Have you ever tried to set up a Security Group
to allow access only from CloudFront IP
addresses? One Security Group will not be enough.
We’ll see how to use &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt;
to solve and to automate this task.&lt;/p&gt;

&lt;h2 id=&quot;the-application&quot;&gt;The Application&lt;/h2&gt;

&lt;p&gt;We have a traditional application on &lt;a href=&quot;https://aws.amazon.com&quot;&gt;AWS&lt;/a&gt;, where
a &lt;a href=&quot;https://aws.amazon.com/cloudfront/&quot;&gt;CloudFront&lt;/a&gt; distribution handles
the incoming traffic.
Behind it, we have static pages on
&lt;a href=&quot;https://aws.amazon.com/s3&quot;&gt;S3&lt;/a&gt; and API endpoints
behind &lt;a href=&quot;https://aws.amazon.com/elasticloadbalancing/&quot;&gt;Application Load Balancer&lt;/a&gt; (ALB).
I use &lt;a href=&quot;https://www.terraform.io/&quot;&gt;Terraform&lt;/a&gt; to manage
production and staging environments.&lt;/p&gt;

&lt;p&gt;Let’s say the project is new, and we are not ready to open it to the public.
We allow access to the project only from specific IP addresses.
&lt;a href=&quot;https://aws.amazon.com/waf/&quot;&gt;WAF&lt;/a&gt; helps us to limit access
only for specific IP addresses with CloudFront.
The last step to set up
&lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&quot;&gt;Security Group&lt;/a&gt;
for our API endpoint’s ALB to allow connections only from CloudFront IP addresses.&lt;/p&gt;

&lt;h2 id=&quot;security-groups&quot;&gt;Security Groups&lt;/h2&gt;

&lt;p&gt;We use 
&lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/VPC_SecurityGroups.html&quot;&gt;Security Groups&lt;/a&gt;
to limit traffic coming to the ALB by IP addresses.
Right now we need to include CloudFront IP addresses
to the list.&lt;/p&gt;

&lt;p&gt;AWS Security Group has the
&lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html&quot;&gt;limit&lt;/a&gt;
for the number of ingress/egress rules, e.g. IP addresses.
You may need to create several security groups
to list all addresses, if you have more than 60 (state 2019-02-09).
You may guess, that there are more than 60 CloudFront IP addresses.&lt;/p&gt;

&lt;h2 id=&quot;cloudfront-ip-addresses&quot;&gt;CloudFront IP Addresses&lt;/h2&gt;

&lt;p&gt;AWS has the endpoint that
&lt;a href=&quot;https://docs.aws.amazon.com/general/latest/gr/aws-ip-ranges.html&quot;&gt;lists all IP addresses&lt;/a&gt;
of their services. Terraform has the command to access the list:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-terrafrom&quot;&gt;data &quot;aws_ip_ranges&quot; &quot;cloudfront&quot; {
    services = [&quot;cloudfront&quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The only downside — we will need to re-run the deployment to make sure we
have the correct configuration to make sure a new IP address may not be included
in the settings, and the service
may not be accessible for some customers. I have no idea, how frequent the
list may change, probably not too frequent. Let’s assume we run the deployment
frequent enough. A &lt;a href=&quot;https://jetbrains.com/teamcity&quot;&gt;CI&lt;/a&gt; can be used to automate it.&lt;/p&gt;

&lt;h2 id=&quot;settings-up-security-groups&quot;&gt;Settings up Security Groups&lt;/h2&gt;

&lt;p&gt;Let’s create several security groups to overcome the
&lt;a href=&quot;https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html&quot;&gt;limit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Terraform has necessary functions for that. Here we use the &lt;code class=&quot;highlighter-rouge&quot;&gt;chunklist&lt;/code&gt;
function to split the full list of CloudFront IP addresses into
a list of lists. We specify the number of elements, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt; and the function
returns us the a list, where every element of it is a list of not more than &lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt;
elements. Let’s use the following code in Terraform to split IP addresses by
future security groups:&lt;/p&gt;

&lt;div class=&quot;language-terraform highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;locals&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;chunks_v4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;chunklist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;aws_ip_ranges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cloudfront&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;cidr_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;creating-security-groups&quot;&gt;Creating Security Groups&lt;/h2&gt;

&lt;p&gt;We need to instruct Terraform to create several
Security Groups for us to reach the goal. We use &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt;
&lt;a href=&quot;https://www.terraform.io/docs/configuration/resources.html&quot;&gt;attribute&lt;/a&gt;
in Terraform to instruct it to create several resources with
one declaration:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;resource &quot;aws_security_group&quot; &quot;cloudfront&quot; {
    count = &quot;${length(local.chunks_v4)}&quot;
    
    //...
    
    ingress {
        from_port = 443
        to_port   = 443
        protocol  = &quot;tcp&quot;
        cidr_blocks = [&quot;${local.chunks_v4[count.index]}&quot;]
    }

    egress {
        from_port = 0
        to_port   = 0
        protocol  = &quot;-1&quot;
        cidr_blocks = [&quot;0.0.0.0/0&quot;]
    }

    lifecycle {
        create_before_destroy = true
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Terraform creates &lt;code class=&quot;highlighter-rouge&quot;&gt;count&lt;/code&gt; resources for us, for every resource,
the &lt;code class=&quot;highlighter-rouge&quot;&gt;count.index&lt;/code&gt; expression returns the current index (from 0 to &lt;code class=&quot;highlighter-rouge&quot;&gt;count - 1&lt;/code&gt;).
In &lt;a href=&quot;/blog/2018/07/23/terraform-if/&quot;&gt;the corner case&lt;/a&gt;, when &lt;code class=&quot;highlighter-rouge&quot;&gt;count = 0&lt;/code&gt;, it does not
create resources at all.&lt;/p&gt;

&lt;p&gt;We need to create &lt;code class=&quot;highlighter-rouge&quot;&gt;count = length(local.chunks_v4)&lt;/code&gt; Security Groups.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;local.chunks_v4[count.index]&lt;/code&gt; selects the next chunk of CloudFront
IP addresses to fill into the next security group.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;We found an easy way to configure IP addresses filter for an Application Load Balancer
to allow incoming traffic only from CloudFront IP addresses. We made Terraform to create
and maintain several Security Groups to overcome the limits.&lt;/p&gt;

&lt;p&gt;You may also want to read my previous post on how to implement
&lt;a href=&quot;/blog/2018/07/23/terraform-if/&quot;&gt;an If Statement&lt;/a&gt;
analog in Terraform.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="aws" />
  
    <category term="security-group" />
  
    <category term="infrastructure" />
  
    <category term="terraform" />
  
    <category term="devops" />
  
    <category term="clouds" />
  
    <summary type="html">CloudFront IP addresses in AWS Security Group</summary>
  
  </entry>
  
  <entry>
    <title type="html">Migrating to Gradle Kotlin DSL - Basics</title>
    <link href="https://jonnyzzz.com/blog/2019/03/04/gradle-kotlin-migration-1/" rel="alternate" type="text/html" title="Migrating to Gradle Kotlin DSL - Basics" />
    <published>2019-03-04T00:00:00+00:00</published>
    <updated>2019-03-04T00:00:00+00:00</updated>
    <id>/blog/2019/03/04/gradle-kotlin-migration-1</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2019/03/04/gradle-kotlin-migration-1/">&lt;blockquote&gt;
  &lt;p&gt;The only way to learn a new programming language is by writing programs in it&lt;br /&gt;
   — by &lt;a href=&quot;https://en.wikipedia.org/wiki/Dennis_Ritchie&quot;&gt;Dennis Ritchie&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Do you use the same principle to learn a new programming language? I do, and
I often put this quote into my &lt;a href=&quot;/talks&quot;&gt;talks&lt;/a&gt; to encourage people to learn
&lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt;
programming language through practice, or by
&lt;a href=&quot;https://kotlinlang.org/docs/tutorials/edu-tools-learner.html&quot;&gt;writing programs&lt;/a&gt;
in it. We’re going to look at how to apply the
same tactic to learning and practicing &lt;a href=&quot;https://gradle.org/kotlin&quot;&gt;Gradle Kotlin DSL&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;“&lt;em&gt;Hello World&lt;/em&gt;” projects are not complicated enough for us. Instead, I have decided
to convert an existing Gradle project from Groovy to Kotlin. 
The project I found is a server-side JVM application, written in Kotlin. 
It has 16 Gradle sub-projects and covers enough real-life non-trivial edge cases to make it quite interesting.&lt;/p&gt;

&lt;p&gt;While migrating the real-life project’s Gradle build from Groovy to Kotlin,
I collected some useful recommendations, code snippets, and explanations.
Throughout the post series, I will share my findings with you. We will together learn how to
convert to Gradle Kotlin DSL faster and easier.&lt;/p&gt;

&lt;h2 id=&quot;the-migration-plan&quot;&gt;The Migration Plan&lt;/h2&gt;

&lt;p&gt;Where do you even start when converting a big Gradle project to Kotlin?
Well, to start with, I do not recommend converting the whole project in one go.
The chances are you will get stuck somewhere in the middle with completely broken scripts.
It may eat away at too much of your time to go in and fix them to complete the migration. It may also be
too hard for you to learn so many different Gradle Kotlin DSL features so quickly, and you may not be able to test your changes, because of the broken project.&lt;/p&gt;

&lt;p&gt;I suggest splitting the conversion into a set of small incremental changes.
We will have to go through and update all the build script files one-by-one.
Let’s start with the smallest project files, learn the basic features, and slowly
proceed to the most complex build script files.&lt;/p&gt;

&lt;p&gt;It is essential to test the build script is not broken after any small change.
You may run any task to execute a Gradle &lt;em&gt;configuration&lt;/em&gt; phase, which will
likely detect errors in your code. I prefer running the &lt;code class=&quot;highlighter-rouge&quot;&gt;testClasses&lt;/code&gt; task 
on the root project for that.&lt;/p&gt;

&lt;p&gt;For bigger Gradle project files it is even recommended to convert them as
smaller parts. Gradle supports mixtures of Kotlin and Groovy scripts in the same project, so
the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply(from=&quot;file.gradle&quot;)&lt;/code&gt; function can include scripts written in
any of the languages.&lt;/p&gt;

&lt;p&gt;It is time to start the migration!&lt;/p&gt;

&lt;h2 id=&quot;first-steps-of-the-migration&quot;&gt;First Steps of the Migration&lt;/h2&gt;

&lt;p&gt;Let’s start the migration from the smallest Gradle sub-project. For each
project, we need to rename
the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; project file into the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle.kts&lt;/code&gt;.
No surprises there, the result will not work. The file will have 
lots of errors. Let’s fix the most common ones first:&lt;/p&gt;

&lt;p&gt;First, we need to replace single quotes with double quotes. Groovy supports both quotes
for strings, while Kotlin only supports &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;&lt;/code&gt; for strings. 
In &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; you can use 
the &lt;em&gt;Convert long character literal to string&lt;/em&gt; quick fix,
multiple carets, or the standard search and replace dialog&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jonnyzzz.com/images/posts/2019-03-04-gradle-kotlin-migration-1-quotes2.png&quot; alt=&quot;quick fix&quot; /&gt;&lt;/p&gt;

&lt;p&gt;String templates like &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;$foo.bar.baz&quot;&lt;/code&gt; work differently in Groovy and Kotlin. 
In Kotlin, braces are needed after &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; to call methods or properties, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;${foo.bar.baz}&quot;&lt;/code&gt;.
Groovy does not support templates on single quoted strings, so you may need to escape the &lt;code class=&quot;highlighter-rouge&quot;&gt;$&lt;/code&gt; sign as &lt;code class=&quot;highlighter-rouge&quot;&gt;\$&lt;/code&gt; too.&lt;/p&gt;

&lt;p&gt;We replace Groovy lists, with the &lt;code class=&quot;highlighter-rouge&quot;&gt;listOf&lt;/code&gt; function, 
for example &lt;code class=&quot;highlighter-rouge&quot;&gt;[&quot;foo&quot;, &quot;bar&quot;]&lt;/code&gt; is converted to &lt;code class=&quot;highlighter-rouge&quot;&gt;listOf(&quot;foo&quot;, &quot;bar&quot;)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;At this point, our build file should contain far fewer errors.
Let’s have a look at how other Gradle objects are represented in Kotlin.&lt;/p&gt;

&lt;h2 id=&quot;repositories&quot;&gt;Repositories&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;repositories{..}&lt;/code&gt; block in Kotlin DSL has the same functions for well-known repositories, e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;mavenCentral()&lt;/code&gt;.
You may need to know how to convert a custom Maven repository definition like this:&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'https://dl.bintray.com/palantir/releases'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;maven{..}&lt;/code&gt; function is defined in Kotlin DSL too. The builder
has the &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; property, but the type of it is &lt;code class=&quot;highlighter-rouge&quot;&gt;java.net.URI&lt;/code&gt; and not &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;.
I do not like to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;URI&lt;/code&gt; class instance in my Gradle scripts manually.
There is an overloaded function called &lt;code class=&quot;highlighter-rouge&quot;&gt;maven()&lt;/code&gt; that takes a &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; parameter with name &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;
for the URL. So the Kotlin code looks like this:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;maven&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://dl.bintray.com/palantir/releases&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;Let’s say we have a dependency definition in Groovy, for example:&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'this.library:name:1.0.0'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;dependencies{..}&lt;/code&gt; block is different in Kotlin DSL. We need to add extra
brackets after the configuration name and double quotes for the string:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this.library:name:1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I recommend using &lt;a href=&quot;https://stackoverflow.com/questions/1262737/intellij-idea-way-of-editing-multiple-lines&quot;&gt;multiple cursors&lt;/a&gt;
to fix all the dependencies at the same time in &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Kotlin DSL provides generated helper functions
for the registered project configuration names including &lt;code class=&quot;highlighter-rouge&quot;&gt;compile&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;testCompile&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;testImplementation&lt;/code&gt;. 
There are several cases that I have come across, where you may not have the generated helper functions in your scripts.
Gradle &lt;a href=&quot;https://gradle-community.slack.com/archives/CAD95CR62/p1549363654105200&quot;&gt;does not include&lt;/a&gt;
these helper functions to the script files that you include with
the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply(from=&quot;some-file.gradle.kts&quot;)&lt;/code&gt; function.
You 
&lt;a href=&quot;https://gradle-community.slack.com/archives/CAD95CR62/p1549363654105200&quot;&gt;cannot add&lt;/a&gt;
these functions into a &lt;a href=&quot;https://docs.gradle.org/current/userguide/organizing_gradle_projects.html#sec:build_sources&quot;&gt;buildSrc&lt;/a&gt;
project either. Fear not, I have several workarounds for this.&lt;/p&gt;

&lt;p&gt;The first workaround is to use a configuration name as a&lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt;, e.g.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;&quot;implementation&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this.library:name:1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A better approach is to refer to the configuration via a delegated property, the following
declaration solves it:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configurations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;this.library:name:1.0.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code fails if the configuration does not exist. 
The last workaround is to declare the &lt;code class=&quot;highlighter-rouge&quot;&gt;String&lt;/code&gt; variable with the same name and value,
e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;val implementation = &quot;implementation&quot;&lt;/code&gt;. Now
the code can be used in a &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle.kts&lt;/code&gt; file too.&lt;/p&gt;

&lt;h2 id=&quot;gradle-plugins&quot;&gt;Gradle Plugins&lt;/h2&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins{..}&lt;/code&gt; block in Gradle is similar to the one in Kotlin.
You should add brackets around the plugin ID in the code, e.g.:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plugin.id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1.2.4&quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The Javadoc comment in the &lt;code class=&quot;highlighter-rouge&quot;&gt;org.gradle.plugin.use.PluginDependenciesSpec&lt;/code&gt; class
from Gradle sources is
misleading for Kotlin DSL users. It is probably written for the Groovy DSL and has been re-used. 
You can use the code from the snippet above.&lt;/p&gt;

&lt;h2 id=&quot;applying-gradle-plugins-to-sub-projects&quot;&gt;Applying Gradle Plugins to Sub-Projects&lt;/h2&gt;

&lt;p&gt;There are two ways to apply Gradle plugins to sub-projects. The first one is
to add the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply(plugin = &quot;plugin.id&quot;)&lt;/code&gt; call in the build script file. 
Use the function in the &lt;code class=&quot;highlighter-rouge&quot;&gt;subprojects{..}&lt;/code&gt; block to enable a plugin for sub-projects.&lt;/p&gt;

&lt;p&gt;The second syntax to apply a plugin is to use the shorter version of the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins{..}&lt;/code&gt; block, e.g.:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;plugin.id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This syntax isn’t allowed in a &lt;code class=&quot;highlighter-rouge&quot;&gt;subprojects{..}&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;allproject{..}&lt;/code&gt; block.&lt;/p&gt;

&lt;p&gt;There is a third option which is to call the &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&amp;lt;PluginClassName&amp;gt;()&lt;/code&gt; function, where the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;PluginClassName&lt;/code&gt; is the class name of the plugin main class. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;apply&amp;lt;&amp;gt;()&lt;/code&gt; function works well for &lt;a href=&quot;/blog/2018/08/07/ad-hoc-gradle/&quot;&gt;ad-hoc plugins&lt;/a&gt;.
I do not like this approach for external plugins,
because the plugin class name, which is not same as the plugin ID, is a part of
the plugin implementation details and it is something that may be changed in the future by
plugin authors.&lt;/p&gt;

&lt;p&gt;I found a strange side-effect which was generated by the
Gradle Kotlin DSL engine helper functions for the applied plugins.
Helper declarations may not be visible, depending on the way you apply plugins.&lt;/p&gt;

&lt;p&gt;The
&lt;a href=&quot;https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html&quot;&gt;Kotlin Multiplatform&lt;/a&gt;
plugin (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;1.3.21&lt;/code&gt;) registers the &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin{..}&lt;/code&gt; function into the project, where it
is applied. Let’s consider two sub-project definitions, one of which does not work:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Project A&lt;/em&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;project-a/build.gradle.kts&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.jetbrains.kotlin.multiplatform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And &lt;em&gt;Project B&lt;/em&gt; in the &lt;code class=&quot;highlighter-rouge&quot;&gt;project-b/build.gradle.kts&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;org.jetbrains.kotlin.multiplatform&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;em&gt;Project B&lt;/em&gt; works and the &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin{..}&lt;/code&gt; block is resolved, but the &lt;code class=&quot;highlighter-rouge&quot;&gt;Project A&lt;/code&gt; does
not work because of the unresolved &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlin&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;We should use the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins{..}&lt;/code&gt; block to have accessors generated in
&lt;a href=&quot;https://docs.gradle.org/current/userguide/kotlin_dsl.html#type-safe-accessors&quot;&gt;Gradle&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;configuring-tasks&quot;&gt;Configuring Tasks&lt;/h2&gt;

&lt;p&gt;A task configuration is easy to do in Groovy for well-known tasks, 
the task name can be used as the shortcut syntax. The &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; task from the 
&lt;a href=&quot;https://docs.gradle.org/current/userguide/application_plugin.html&quot;&gt;Application&lt;/a&gt;
Gradle plugin can be configured in Groovy simply as:&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;--foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same does not work in Kotlin. 
First, we need to find the task from the &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt; container. 
Then, the explicit task type is required to set task parameters to it.&lt;/p&gt;

&lt;p&gt;The are many functions in the &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks&lt;/code&gt; object to define or find a task. 
I use the
&lt;a href=&quot;https://kotlinlang.org/docs/reference/inline-functions.html#reified-type-parameters&quot;&gt;reified generic&lt;/a&gt;
function &lt;code class=&quot;highlighter-rouge&quot;&gt;tasks.getByName&amp;lt;T&amp;gt;(name: String, action: T.() -&amp;gt; Unit)&lt;/code&gt; to find a task
and to configure it with the same call.&lt;/p&gt;

&lt;p&gt;What is the type of task? You can check out the documentation for the plugin, 
the plugin sources, or you can add a debug line like &lt;code class=&quot;highlighter-rouge&quot;&gt;println(tasks.task_name)&lt;/code&gt;
to your Groovy script to find this out.&lt;/p&gt;

&lt;p&gt;Since the &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; task from the Gradle &lt;a href=&quot;https://docs.gradle.org/current/userguide/application_plugin.html&quot;&gt;Application&lt;/a&gt;
plugin has the type &lt;code class=&quot;highlighter-rouge&quot;&gt;JavaExec&lt;/code&gt;, we can use the following code in Kotlin to set it up:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getByName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JavaExec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;run&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar)
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We &lt;a href=&quot;https://docs.gradle.org/current/userguide/kotlin_dsl.html#type-safe-accessors&quot;&gt;should&lt;/a&gt;
use the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugins{..}&lt;/code&gt; block syntax to enable a plugin to have all generated accessors
available. So we may have the following code:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;application&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;mainClassName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;org.jonnyzzz.example.MainKt`
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;--foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar)
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In the example, we have the clash between Kotlin
&lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/run.html&quot;&gt;run&lt;/a&gt;
function and the generated &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; task accessor’s 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/operator-overloading.html#invoke&quot;&gt;invoke&lt;/a&gt;
overloaded operator. To solve it, I added brackets. The workaround 
is not needed for other tasks, where we do not have such a name clash.&lt;/p&gt;

&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;

&lt;p&gt;It can be easy to get stuck when working on build scripts. It may be unclear why something
does not work. There are several useful tricks from me that can be done to overcome the
complexity.&lt;/p&gt;

&lt;p&gt;Try finding the root cause of the problem in your changes. It can be a tiny
change in one file that yields an error in the other file. Use the version control
or &lt;a href=&quot;https://www.jetbrains.com/help/idea/local-history.html&quot;&gt;Local History&lt;/a&gt;
to check the recent changes, try reverting them to see if it helps.&lt;/p&gt;

&lt;p&gt;Search the Gradle Documentation for a keyword or task name. There are several links for Gradle Kotlin DSL
I have often used to find helpful hints to solve my issues:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://guides.gradle.org/migrating-build-logic-from-groovy-to-kotlin/&quot;&gt;Migrating Build Logic from Groovy to Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/kotlin_dsl.html&quot;&gt;Gradle Kotlin DSL User Guide&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/gradle/kotlin-dsl/tree/master/samples&quot;&gt;Kotlin DSL Samples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read the source code of Gradle or the third-party plugins that you use.
The easiest is to navigate to the problematic declarations from &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt;
and just directly to Gradle or plugin sources. 
I solved some of the problems by checking the source code. I hope it will help you too.&lt;/p&gt;

&lt;p&gt;In addition to that, you may find Gradle source code is on &lt;a href=&quot;https://github.com/gradle/&quot;&gt;GitHub&lt;/a&gt;.
Most of the Gradle plugins have their source code published on GitHub or somewhere else.&lt;/p&gt;

&lt;p&gt;Try debugging Gradle. The last and the hardest tip to troubleshot your script issues.
The old school debugging technique with &lt;code class=&quot;highlighter-rouge&quot;&gt;println()&lt;/code&gt; statements often worked quite well here
to print type names or task names to something similar to help to navigate to the
source code and Javadoc comments. Should you need
too many runs to debug the root cause of the problem?
A JVM debugger can be a faster option. &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; supports Gradle debugging, 
click the &lt;em&gt;Debug …&lt;/em&gt; action on the task.&lt;/p&gt;

&lt;h3 id=&quot;gradle-source-code-in-intellij-project&quot;&gt;Gradle Source Code in IntelliJ Project&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.gradle.org/current/userguide/gradle_wrapper.html&quot;&gt;Gradle Wrapper&lt;/a&gt;
does not download Gradle sources by default.
You may notice a yellow warning in IntelliJ IDEA suggesting to change that too.
Make sure you have the &lt;code class=&quot;highlighter-rouge&quot;&gt;-all.zip&lt;/code&gt; suffix in the download URL from the
&lt;code class=&quot;highlighter-rouge&quot;&gt;gradle/wrapper/gradle-wrapper.properties&lt;/code&gt; file in your project:&lt;/p&gt;
&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;distributionUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\:&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;//services.gradle.org/distributions/gradle-5.2.1-all.zip&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Gradle &lt;code class=&quot;highlighter-rouge&quot;&gt;wrapper&lt;/code&gt; task has an option to prefer the full packages by default. You may
configure it to make sure you don’t accidentally switch to the default package with the
next Gradle upgrade. The following Kotlin code sets this up in a root Gradle project:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wrapper&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;distributionType&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Wrapper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DistributionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ALL&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; as a statically typed programming language
seems to play well for writing Gradle build scripts.
Thanks to static type inference, the Kotlin compiler detects errors earlier and
shows helpful compilation error messages and warnings.
Both the IDE and the compiler use the information about types to infer
available functions and properties in a given scope, even inside a 5th level
nested lambda with receivers.&lt;/p&gt;

&lt;p&gt;In this post, we covered the first steps of migrating to Kotlin. We defined
the migration strategy and listed the set of recommendations
to tackle the migration from Groovy to Kotlin quickly.
I will cover more aspects in the coming posts, stay tuned!&lt;/p&gt;

&lt;p&gt;Thanks to Hadi, Paul, and David for your help, time and feedback!&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="gradle" />
  
    <category term="gradle-kotlin" />
  
    <category term="gradle-kts" />
  
    <category term="gradle-groovy" />
  
    <category term="kts" />
  
    <category term="kotlin" />
  
    <category term="groovy" />
  
    <category term="build" />
  
    <category term="refactoring" />
  
    <summary type="html">First steps of the migration</summary>
  
  </entry>
  
  <entry>
    <title type="html">JVM Bytecode for Kotlin Object and Companion Object</title>
    <link href="https://jonnyzzz.com/blog/2019/02/04/companion-and-object/" rel="alternate" type="text/html" title="JVM Bytecode for Kotlin Object and Companion Object" />
    <published>2019-02-04T00:00:00+00:00</published>
    <updated>2019-02-04T00:00:00+00:00</updated>
    <id>/blog/2019/02/04/companion-and-object</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2019/02/04/companion-and-object/">&lt;p&gt;There are two ways to declare &lt;del&gt;static&lt;/del&gt; global objects in Kotlin. The first
one is called &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; and creates a singleton. The second one, which is
called &lt;code class=&quot;highlighter-rouge&quot;&gt;companion object&lt;/code&gt;, declares global &lt;del&gt;static&lt;/del&gt; functions and properties
within a class, that may have own constructor. You may want to
to walk through the documentation quickly:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/object-declarations.html#object-declarations&quot;&gt;object&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/object-declarations.html#companion-objects&quot;&gt;companion object&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Functions from both &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;companion object&lt;/code&gt; are not compiled as 
&lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; functions in JVM bytecode.
You may make your
&lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;companion object&lt;/code&gt; in Kotlin to inherit from a class or interface!
You may use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JvmStatic&lt;/code&gt; annotation to make these functions 
be &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt; in JVM bytecode.&lt;/p&gt;

&lt;p&gt;My story for that post was as follows. I was trying to use Kotlin library
with both &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;companion object&lt;/code&gt; declarations from Groovy. I was
upgrading my Gradle/Groovy script into Gradle/Kotlin script. Let’s focus in that blog
post on how Kotlin &lt;code class=&quot;highlighter-rouge&quot;&gt;object&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;companion object&lt;/code&gt; declarations are
visible from the JVM bytecode level, namely from Java and Groovy (and other) JVM languages.
I will be using Kotlin &lt;code class=&quot;highlighter-rouge&quot;&gt;1.3.20&lt;/code&gt; in that post (and something may change in the future)&lt;/p&gt;

&lt;h2 id=&quot;object&quot;&gt;object&lt;/h2&gt;

&lt;p&gt;Let’s create the following code snippet in Kotlin.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I use &lt;code class=&quot;highlighter-rouge&quot;&gt;Show Kotlin Bytecode&lt;/code&gt; action in IntelliJ IDEA followed by the &lt;code class=&quot;highlighter-rouge&quot;&gt;Decompile&lt;/code&gt; button click
to analyze JVM bytecode and to see it as Java decompiled code&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://jonnyzzz.com/images/posts/2019-02-04-show-kotlin-bytecode2.png&quot; alt=&quot;decompile bytecode image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The class &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; contains an &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTANCE&lt;/code&gt; field that holds the only
possible instance of the class &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;. The Kotlin compiler will take care and allow
us calling methods directly on &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt;. Form the JVM side, we will need to call
it through the &lt;code class=&quot;highlighter-rouge&quot;&gt;INSTANCE&lt;/code&gt; filed, e.g. in Java:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;INSTANCE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One may use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JvmStatic&lt;/code&gt; annotation to have the annotated methods compiled
as static functions, and to make the assess from Java easier.&lt;/p&gt;

&lt;h2 id=&quot;companion-object&quot;&gt;companion object&lt;/h2&gt;

&lt;p&gt;Let’s create the following code snippet in Kotlin.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That code will generate &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;X.Companion&lt;/code&gt; classes in JVM bytecode. 
The &lt;code class=&quot;highlighter-rouge&quot;&gt;cool&lt;/code&gt; function is declared in the &lt;code class=&quot;highlighter-rouge&quot;&gt;X.Companion&lt;/code&gt;
class. Kotlin compiler will create the static field called &lt;code class=&quot;highlighter-rouge&quot;&gt;Companion&lt;/code&gt; that will hold
the reference to the only possible instance of the &lt;code class=&quot;highlighter-rouge&quot;&gt;X.Companion&lt;/code&gt; class. 
Again, in Kotlin, it will be transparent to use as &lt;code class=&quot;highlighter-rouge&quot;&gt;X.cool()&lt;/code&gt;, but at the JVM bytecode
level these declarations are not &lt;code class=&quot;highlighter-rouge&quot;&gt;static&lt;/code&gt;.
One will need to include the &lt;code class=&quot;highlighter-rouge&quot;&gt;.Companion&lt;/code&gt; to access the &lt;code class=&quot;highlighter-rouge&quot;&gt;companion object&lt;/code&gt;, e.g.
in Java:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Companion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One may use &lt;code class=&quot;highlighter-rouge&quot;&gt;@JvmStatic&lt;/code&gt; annotation to have the annotated methods compiled
as static functions, to make the assess from Java easier.&lt;/p&gt;

&lt;h2 id=&quot;named-companion-object&quot;&gt;named companion object&lt;/h2&gt;

&lt;p&gt;It is possible in Kotlin to name the companion object, e.g.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;companion&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QwE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For that case, the Kotlin compiler creates the classes &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;X.QwE&lt;/code&gt; and the static 
field in the class &lt;code class=&quot;highlighter-rouge&quot;&gt;X&lt;/code&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;QwE&lt;/code&gt; to hold the only possible
reference to the &lt;code class=&quot;highlighter-rouge&quot;&gt;X.QwE&lt;/code&gt; class instance.&lt;/p&gt;

&lt;p&gt;In Java:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;QwE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cool&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;java-and-groovy&quot;&gt;Java and Groovy&lt;/h2&gt;

&lt;p&gt;It is easy to use both classes from Groovy, Java or any other JVM language. 
You may consider &lt;code class=&quot;highlighter-rouge&quot;&gt;@JvmStatic&lt;/code&gt; annotation to beauty your Kotlin library for Java or
JVM users, if you like.&lt;/p&gt;

&lt;h3 id=&quot;names-clash-and-groovy&quot;&gt;Names Clash and Groovy&lt;/h3&gt;

&lt;p&gt;There is name collision in a &lt;code class=&quot;highlighter-rouge&quot;&gt;companion object&lt;/code&gt;: Kotlin compiler
generates both the nested static class and the static field with the same name — &lt;code class=&quot;highlighter-rouge&quot;&gt;Companion&lt;/code&gt;.
It works flawlessly in Java (or javac), and it is a bit tricky for Groovy (in my case,
it was Gradle/Groovy build script). Let’s consider a standalone Java/Groovy example:&lt;/p&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    
    &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;/// does not work in Groovy&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;/// works in Java&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;I found the following workaround - use &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; to access the field, with no type information:&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Y&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The better reply came from by Twitter feed:&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; data-cards=&quot;hidden&quot; data-lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;Field vs Nested Object. The battle. Works on &lt;a href=&quot;https://twitter.com/hashtag/java?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#java&lt;/a&gt;, fails in &lt;a href=&quot;https://twitter.com/hashtag/groovy?src=hash&amp;amp;ref_src=twsrc%5Etfw&quot;&gt;#groovy&lt;/a&gt; &lt;a href=&quot;https://t.co/HTzNkYkfez&quot;&gt;pic.twitter.com/HTzNkYkfez&lt;/a&gt;&lt;/p&gt;&amp;mdash; Eugene Petrenko (@jonnyzzz) &lt;a href=&quot;https://twitter.com/jonnyzzz/status/1090980096637308928?ref_src=twsrc%5Etfw&quot;&gt;January 31, 2019&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;The best way I see so far is &lt;a href=&quot;https://twitter.com/CedricChampeau/status/1090987640613158914&quot;&gt;that way&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Y.q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Have fun! Write Kotlin!&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="groovy" />
  
    <category term="java" />
  
    <category term="jvm" />
  
    <category term="bytecode" />
  
    <summary type="html">A glance from the JVM bytecode to object and companion object in Kotlin</summary>
  
  </entry>
  
  <entry>
    <title type="html">Nodejs Builds</title>
    <link href="https://jonnyzzz.com/blog/2019/01/28/nodejs-docker/" rel="alternate" type="text/html" title="Nodejs Builds" />
    <published>2019-01-28T00:00:00+00:00</published>
    <updated>2019-01-28T00:00:00+00:00</updated>
    <id>/blog/2019/01/28/nodejs-docker</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2019/01/28/nodejs-docker/">&lt;p&gt;A build script to build a client-side web application in Docker&lt;/p&gt;

&lt;p&gt;It was a challenge. I decided to try to create a web page to demo my HTTP API endpoint. I set myself a goal:
if I do a prototype in 1 hour - I’ll have it for my project. I made it in 1.5 hours thou. 
It will be another story, how I made it deployed (and it include AWS, Terraform, and gotchas). This time,
let’s focus on Node and NPM.&lt;/p&gt;

&lt;h2 id=&quot;backgrounds&quot;&gt;Backgrounds&lt;/h2&gt;

&lt;p&gt;The best for a hackathon like projects, when the time is limited, it to get the goal done. 
Surprise, it is not always the super-duper technology, or programming language. 
For me it was obvious - I need to make the site to demo the API endpoint.
Technology stack is up to me.&lt;/p&gt;

&lt;p&gt;The time is limited. Pick a technology you know the best. Pick an option, you most
confident with. It is tricky, again, it should be technology that makes &lt;em&gt;goals&lt;/em&gt; achievable 
faster. It is not the technology you know, but you cannot make it.&lt;/p&gt;

&lt;p&gt;I’m not a web developer professional. I had nothing to pick from.&lt;/p&gt;

&lt;p&gt;Ask an expert if you are doubts. &lt;a href=&quot;https://www.linkedin.com/in/andrey-skladchikov-94336416a&quot;&gt;Andrey&lt;/a&gt;
suggested using &lt;a href=&quot;https://jetbrains.github.io/ring-ui/master/index.html&quot;&gt;Ring UI&lt;/a&gt;
library. Right now I’m happy I decided using the library. Frankly, I like the way &lt;a href=&quot;https://reactjs.org&quot;&gt;React&lt;/a&gt;
approaches to web pages.&lt;/p&gt;

&lt;p&gt;The best part - Ring UI comes with the generator, the generator generates an alive skeleton
for the website. Now one can start, debug, and build the site. That is it. Of course,
&lt;a href=&quot;https://nodejs.org&quot;&gt;Node JS&lt;/a&gt; is required on the machine. Awesome! I use &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt;
with the &lt;a href=&quot;https://plugins.jetbrains.com/plugin/6098-nodejs&quot;&gt;Node JS Plugin&lt;/a&gt; to develop it.&lt;/p&gt;

&lt;h2 id=&quot;building&quot;&gt;Building&lt;/h2&gt;

&lt;p&gt;Back from the old days, I remember how painful it can be to build a web site
if you do not have right tooling on your machine. One needs similar tooling for
the CI builds too!&lt;/p&gt;

&lt;p&gt;So I wrote few bash scripts to automate it for me. I use Docker image with Node JS. It helps a lot!&lt;/p&gt;

&lt;h3 id=&quot;dockerfile&quot;&gt;Dockerfile&lt;/h3&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-dockerfile highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;FROM&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; node:11&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; rsync

&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /build /build-src

&lt;span class=&quot;k&quot;&gt;COPY&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; package.json package-lock.json /build/&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;RUN &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /build &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; npm &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;All we need to build the project - is an environment with Node, NPM and warm &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;. Let’s do it!
The &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; uses &lt;code class=&quot;highlighter-rouge&quot;&gt;node:11&lt;/code&gt; as the base image to have Node and NPM. Next, we add current &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;
to install &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;. Now &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; and NPM caches are pre-packed into the container!&lt;/p&gt;

&lt;h3 id=&quot;building-1&quot;&gt;Building&lt;/h3&gt;

&lt;p&gt;As you see from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;, we have &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; created in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/build/&lt;/code&gt; folder. Now we need
project sources to be in the folder to run the true build. We must not mix &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; from the 
host computer with &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; from our Docker container. The fact is, you may have OS-specific binaries
under &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt;, and it may not play nice if you mix them.&lt;/p&gt;

&lt;p&gt;We mount original project sources under &lt;code class=&quot;highlighter-rouge&quot;&gt;/build-src/&lt;/code&gt; folder in docker. We assume the build will
share the compiled site into &lt;code class=&quot;highlighter-rouge&quot;&gt;/build-dist/&lt;/code&gt; folder. I use the following script to make it.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;build-container.sh&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;## copy sources into the right folder&lt;/span&gt;
rsync &lt;span class=&quot;nt&quot;&gt;-ai&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; /build-src/ /build/ &lt;span class=&quot;nt&quot;&gt;--exclude&lt;/span&gt; node_modules

&lt;span class=&quot;c&quot;&gt;## do the build&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /build
npm run build

&lt;span class=&quot;c&quot;&gt;## copy results back&lt;/span&gt;
rsync &lt;span class=&quot;nt&quot;&gt;-ai&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--delete&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--progress&lt;/span&gt; /build/dist/  /build-dist/

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;running-in-the-container&quot;&gt;Running in the Container&lt;/h3&gt;

&lt;p&gt;Let’s start the build in the container. For that, I have the following script.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dirname&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BASH_SOURCE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[0]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;project-node-js

docker build &lt;span class=&quot;nt&quot;&gt;--tag&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$DIR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;DIST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/dist&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;rm&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

docker run &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--rm&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ROOT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:/build-src:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;DIST&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;:/build-dist &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /build-src/build-container.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You also need to add the host &lt;code class=&quot;highlighter-rouge&quot;&gt;node_modules&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt; file. It will make &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt; command
to run faster.&lt;/p&gt;

&lt;p&gt;The first step - we build the docker container from the &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;. Docker does incremental
builds for us. A change in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; will trigger the container rebuild. Without changes in &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;,
it will do nothing pretty fast.&lt;/p&gt;

&lt;p&gt;The second step - we run the build in the container.&lt;/p&gt;

&lt;p&gt;It may be necessary to fix permissions of the files, that you have under the &lt;code class=&quot;highlighter-rouge&quot;&gt;${DIST}&lt;/code&gt; folder on Linux.
That is not needed for builds on Mac, and I assume on Windows.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now I have a build script for my project. One needs only Docker to build the project. It is essential,
the version of Node is hard-coded in the build scripts, we will need to changes to the environment what it
changes. The CI builds simplified too! We have no duplication between local builds and CI builds. 
Everyone calls the same &lt;code class=&quot;highlighter-rouge&quot;&gt;build.sh&lt;/code&gt; file to make it.&lt;/p&gt;

&lt;p&gt;Do you like to try that? Here is a small exercise for you - add the development web server support into the scripts. 
I’ll be happy to see your code and update that post.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="docker" />
  
    <category term="javascript" />
  
    <category term="nodejs" />
  
    <category term="webpack" />
  
    <category term="build" />
  
    <summary type="html">A build script to build a client-side web application in Docker</summary>
  
  </entry>
  
  <entry>
    <title type="html">Int ptr in Kotlin/Native</title>
    <link href="https://jonnyzzz.com/blog/2019/01/14/kn-intptr/" rel="alternate" type="text/html" title="Int ptr in Kotlin/Native" />
    <published>2019-01-14T00:00:00+00:00</published>
    <updated>2019-01-14T00:00:00+00:00</updated>
    <id>/blog/2019/01/14/kn-intptr</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2019/01/14/kn-intptr/">&lt;p&gt;Passing int* to C from Kotlin/Native&lt;/p&gt;

&lt;p&gt;Today, suddenly, a friend of mine gave me an easy question - how can one pass an int pointer 
to a C function from Kotlin/Native. To my shame, I did not have the answer.
Now I do&lt;/p&gt;

&lt;h2 id=&quot;the-short-answer&quot;&gt;The Short Answer&lt;/h2&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;memScoped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;123&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;function_from_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;the-long-answer&quot;&gt;The Long Answer&lt;/h2&gt;

&lt;p&gt;We need several files for the demo project. We will
use &lt;a href=&quot;https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html&quot;&gt;Gradle Multiplatform Project&lt;/a&gt;
with Kotlin 1.3.11 and IntelliJ IDEA. Yes, it will be enough to work with (!) Kotlin/Native&lt;/p&gt;

&lt;h3 id=&quot;c-interop&quot;&gt;C Interop&lt;/h3&gt;

&lt;p&gt;It’s enough to create only a &lt;code class=&quot;highlighter-rouge&quot;&gt;file.def&lt;/code&gt; file with C code inside (after &lt;code class=&quot;highlighter-rouge&quot;&gt;---&lt;/code&gt; line):&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function_from_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;cinterop&lt;/code&gt; tool generates the following Kotlin code interop from it:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;function_from_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CValuesRef&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;?):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Right here we have a question - how to create an object of &lt;code class=&quot;highlighter-rouge&quot;&gt;CValuesRef&amp;lt;IntVar&amp;gt;&lt;/code&gt; type?&lt;/p&gt;

&lt;h3 id=&quot;the-solution&quot;&gt;The Solution&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;CPointer&amp;lt;IntVar&amp;gt;&lt;/code&gt;, which is subtype of &lt;code class=&quot;highlighter-rouge&quot;&gt;CValuesRef&amp;lt;IntVar&amp;gt;&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Call the &lt;code class=&quot;highlighter-rouge&quot;&gt;.ptr&lt;/code&gt; extension property on the &lt;code class=&quot;highlighter-rouge&quot;&gt;IntVar&lt;/code&gt; to get a &lt;code class=&quot;highlighter-rouge&quot;&gt;CPointer&amp;lt;IntVar&amp;gt;&lt;/code&gt; instance&lt;/li&gt;
  &lt;li&gt;Create a &lt;code class=&quot;highlighter-rouge&quot;&gt;IntVar&lt;/code&gt; instance via the &lt;code class=&quot;highlighter-rouge&quot;&gt;alloc&amp;lt;T&amp;gt;&lt;/code&gt; extension function on a &lt;code class=&quot;highlighter-rouge&quot;&gt;NativePlacement&lt;/code&gt; instance&lt;/li&gt;
  &lt;li&gt;Get a &lt;code class=&quot;highlighter-rouge&quot;&gt;NativePlacement&lt;/code&gt; instance from the &lt;code class=&quot;highlighter-rouge&quot;&gt;memScoped { ... }&lt;/code&gt; block receiver&lt;/li&gt;
  &lt;li&gt;Use the &lt;code class=&quot;highlighter-rouge&quot;&gt;.value&lt;/code&gt; property on &lt;code class=&quot;highlighter-rouge&quot;&gt;IntVar&lt;/code&gt; to get/set &lt;code class=&quot;highlighter-rouge&quot;&gt;Int&lt;/code&gt; value&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Full code of the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.kt&lt;/code&gt; is as follows. Mind the imports from &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlinx.cinterop&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;file.function_from_c&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.cinterop.IntVar&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.cinterop.alloc&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.cinterop.memScoped&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.cinterop.ptr&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.cinterop.value&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memScoped&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IntVar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;123&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;z&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;function_from_c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;// return value, C int &lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// updated int* from C&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;gradle-project-setup&quot;&gt;Gradle Project Setup&lt;/h3&gt;

&lt;p&gt;Let’s create a demo project with Gradle for IntelliJ IDEA. You need an empty Gradle 
project to start. I called &lt;code class=&quot;highlighter-rouge&quot;&gt;gradle init&lt;/code&gt; command from console to get it in a new folder
(it was Gradle 5.1 in my case).
As an alternative, you may create a project with &lt;code class=&quot;highlighter-rouge&quot;&gt;File | New | Project...&lt;/code&gt; menu too.&lt;/p&gt;

&lt;p&gt;Next, paste the following to the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.jetbrains.kotlin.multiplatform'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.3.11'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;targets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// use presets.mingwX64 for Windows&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;/// use presets.linuxX64 for Linux&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fromPreset&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;presets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;macosX64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'native'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;compilations&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;outputKinds&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'executable'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;cinterops&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;myInterop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;defFile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;src/native/file.def&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;sourceSets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;nativeMain&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;kotlin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;srcDir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'src/native'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Place the &lt;code class=&quot;highlighter-rouge&quot;&gt;main.kt&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;file.def&lt;/code&gt; files into the &lt;code class=&quot;highlighter-rouge&quot;&gt;src/native&lt;/code&gt; folder. Now you may open the project in IntelliJ IDEA
by pointing it to the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; file (use Java 1.8 in the Gradle Import dialog).&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://kotlinlang.org/docs/reference/building-mpp-with-gradle.html&quot;&gt;Kotlin Multiplatform Project&lt;/a&gt;.
You may find in the demo sources
&lt;a href=&quot;https://github.com/jonnyzzz/kotlin-native-demo/commit/2a3b1d09e1d38205278b83058c31b42fdc770004&quot;&gt;on my GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Take a look to the &lt;a href=&quot;https://kotlinlang.org/docs/reference/native/c_interop.html&quot;&gt;C Interop&lt;/a&gt; article
for more information on the Kotlin/Native interop with C.
An &lt;a href=&quot;https://kotlinlang.org/docs/tutorials/native/mapping-primitive-data-types-from-c.html&quot;&gt;Interop With C&lt;/a&gt;
tutorials are a good read to see how other types are mapped between C and Kotlin/Native.&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <category term="c" />
  
    <summary type="html">Passing int* to C from Kotlin/Native</summary>
  
  </entry>
  
  <entry>
    <title type="html">Proxy and Checked Exceptions in Java</title>
    <link href="https://jonnyzzz.com/blog/2018/11/22/proxy/" rel="alternate" type="text/html" title="Proxy and Checked Exceptions in Java" />
    <published>2018-11-22T00:00:00+00:00</published>
    <updated>2018-11-22T00:00:00+00:00</updated>
    <id>/blog/2018/11/22/proxy</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/11/22/proxy/">&lt;p&gt;java.lang.reflect.Proxy and checked exceptions&lt;/p&gt;

&lt;h2 id=&quot;on-the-fly-proxy&quot;&gt;On-the-Fly Proxy&lt;/h2&gt;
&lt;p&gt;Say on have an interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt; with several (hundreds) methods. Is it possible to implement an
interface on-the-fly? Without having an implementation code? Yes. It is possible. 
The standard possibility is
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/reflect/Proxy.html&quot;&gt;java.lang.reflect.Proxy&lt;/a&gt;.
The &lt;code class=&quot;highlighter-rouge&quot;&gt;newProxyInstance&lt;/code&gt; method helps to create an on-the-fly implementation. One provides
an interceptor object that is called for every method invocation on the interface implementation instance.&lt;/p&gt;

&lt;p&gt;Besides the standard Proxy API, there are libraries, that do the same thing, for example,
&lt;a href=&quot;https://bytebuddy.net/&quot;&gt;Byte Buddy&lt;/a&gt; or &lt;a href=&quot;https://github.com/cglib/cglib&quot;&gt;CGLIB&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, we will use the standard JRE API - &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.reflect.Proxy&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;proxy-and-checked-exceptions&quot;&gt;Proxy and Checked Exceptions&lt;/h2&gt;
&lt;p&gt;Let’s consider the following code in Java:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.InvocationHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;InvocationHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fail&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//what is the exception?&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The code is trivial. We have the interface &lt;code class=&quot;highlighter-rouge&quot;&gt;Foo&lt;/code&gt;, and we implement it via &lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy#newProxyInstance&lt;/code&gt;. 
The implementation of the Proxy instance throws an exception of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt;.
Will we have the exception of type &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; as a result?&lt;/p&gt;

&lt;h2 id=&quot;running-the-example&quot;&gt;Running the Example&lt;/h2&gt;
&lt;p&gt;Let’s execute the example and see what we have:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Exception &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;thread &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.reflect.UndeclaredThrowableException
	at &lt;span class=&quot;nv&quot;&gt;$Proxy0&lt;/span&gt;.bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Unknown Source&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at ProxyJava.main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ProxyJava.java:22&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Caused by: java.lang.Exception: fail
	at ProxyJava&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ProxyJava.java:17&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	... 2 more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The answer is &lt;strong&gt;NO&lt;/strong&gt;. We have &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.reflect.UndeclaredThrowableException&lt;/code&gt; exception.&lt;/p&gt;

&lt;h2 id=&quot;checked-exceptions-in-java&quot;&gt;Checked Exceptions in Java&lt;/h2&gt;
&lt;p&gt;As we all know, Java has checked exceptions. It means one declares what exceptions are
possibly thrown from a method. The main class of all exceptions is 
&lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/lang/Throwable.html&quot;&gt;java.lang.Throwable&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In Java language, we use &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; to indicate that a method may throw an exception. For example,
&lt;code class=&quot;highlighter-rouge&quot;&gt;throws IOException&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two specific sub-classes of &lt;code class=&quot;highlighter-rouge&quot;&gt;Throwable&lt;/code&gt;, which does not require to be declared
by the &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; keyword - &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.Error&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.RuntimeException&lt;/code&gt;. All sub-classes
of those two types are free to throw without declaration.&lt;/p&gt;

&lt;h2 id=&quot;proxy-and-undeclaredthrowableexception&quot;&gt;Proxy and UndeclaredThrowableException&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/index.html?java/lang/reflect/UndeclaredThrowableException.html&quot;&gt;UndeclaredThrowableException&lt;/a&gt;
is the specific exception type that is used in the create a proxy implementation of an interface
to preserve checked exceptions in Java. 
As we see from the Javadoc, the exception is used to wrap any checked exceptions that are not 
declared with the &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; block in the interface declaration.&lt;/p&gt;

&lt;h2 id=&quot;proxy-and-jvm-languages&quot;&gt;Proxy and JVM Languages&lt;/h2&gt;
&lt;p&gt;JVM ecosystem is huge. There are many languages for the JVM, including 
&lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt;,
&lt;a href=&quot;http://groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt;,
&lt;a href=&quot;https://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt;
and so on, that does not have checked exceptions.&lt;/p&gt;

&lt;p&gt;Checked exceptions are checked by the compiler, on the JVM bytecode level, 
there is no difference between exceptions at all.&lt;/p&gt;

&lt;p&gt;It is quite easy to get &lt;code class=&quot;highlighter-rouge&quot;&gt;UndeclaredThrowableException&lt;/code&gt; at some 
unexpected places if mixing such languages with &lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.reflect.Proxy&lt;/code&gt;!&lt;/p&gt;

&lt;p&gt;For example, in Kotlin:&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.lang.reflect.Proxy&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;internal&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;proxy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;arrayOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;*&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;fail&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The same code reads correctly but does not work. It is allowed in Kotlin to throw &lt;code class=&quot;highlighter-rouge&quot;&gt;Exception&lt;/code&gt; from
a method (because exceptions are not checked), but it will &lt;strong&gt;not&lt;/strong&gt; work via the
&lt;code class=&quot;highlighter-rouge&quot;&gt;java.lang.reflect.Proxy&lt;/code&gt;. We will have the following execution result&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Exception &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;thread &lt;span class=&quot;s2&quot;&gt;&quot;main&quot;&lt;/span&gt; java.lang.reflect.UndeclaredThrowableException
	at com.sun.proxy.&lt;span class=&quot;nv&quot;&gt;$Proxy0&lt;/span&gt;.bar&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Unknown Source&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at ProxyKTKt.main&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ProxyKT.kt:15&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Caused by: java.lang.Exception: fail
	at ProxyKTKt&lt;span class=&quot;nv&quot;&gt;$main$proxy$1&lt;/span&gt;.invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ProxyKT.kt:12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	at ProxyKTKt&lt;span class=&quot;nv&quot;&gt;$main$proxy$1&lt;/span&gt;.invoke&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ProxyKT.kt&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
	... 2 more

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;fixing-the-undeclaredthrowableexception&quot;&gt;Fixing the UndeclaredThrowableException&lt;/h2&gt;
&lt;p&gt;To avoid the &lt;code class=&quot;highlighter-rouge&quot;&gt;UndeclaredThrowableException&lt;/code&gt; one need to declare the exceptions
explicitly with &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; block. That solves the problem in Java example above.
Similarly, it solves the problem in the Kotlin snippet too: we add the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;@Throws(Exception::class)&lt;/code&gt; annotation on the &lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;One may have a look at the implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy#newProxyInstance&lt;/code&gt;
in the sources of JVM. It turns out it is not possible to disable that
logic in the implementation. One is not allowed to breach Java’s checked 
exceptions with &lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy#newProxyInstance&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There are two ways. One is to declare &lt;code class=&quot;highlighter-rouge&quot;&gt;throws&lt;/code&gt; for all interfaces 
that are used with &lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy#newProxyInstance&lt;/code&gt;. Of course, it is too easy to
forget doing in languages without checked exceptions. Tests may help.&lt;/p&gt;

&lt;p&gt;An alternative could be to implement or use another variant of the
&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy#newProxyInstance&lt;/code&gt;, that does not do the check. Let me know
in the comments if you’d like to learn more, how exactly the 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Proxy#newProxyInstance&lt;/code&gt; or similar proxies are implemented.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="java" />
  
    <category term="jvm" />
  
    <category term="kotlin" />
  
    <summary type="html">java.lang.reflect.Proxy and checked exceptions</summary>
  
  </entry>
  
  <entry>
    <title type="html">libcurl and Kotlin/Native on Windows</title>
    <link href="https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/" rel="alternate" type="text/html" title="libcurl and Kotlin/Native on Windows" />
    <published>2018-10-29T00:00:00+00:00</published>
    <updated>2018-10-29T00:00:00+00:00</updated>
    <id>/blog/2018/10/29/kn-libcurl-windows</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/10/29/kn-libcurl-windows/">&lt;p&gt;Building libcurl on Windows and using it from Kotlin/Native&lt;/p&gt;

&lt;p&gt;Once upon a time, I decided to answer a question on
&lt;a href=&quot;https://stackoverflow.com/questions/52871078/kotlin-native-libcurl-example-on-windows/52872429?noredirect=1#comment92694725_52872429&quot;&gt;StackOverflow&lt;/a&gt;
to explain how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl&lt;/code&gt; with Kotlin/Native. Now it turned out I will cover a
more detailed instruction here. How &lt;a href=&quot;https://twitter.com/shanselman&quot;&gt;@shanselman&lt;/a&gt; once told in his talk - if
a reply is big enough it should go to a documentation of a blog post.&lt;/p&gt;

&lt;h1 id=&quot;building-curl-and-libcurl-on-windows&quot;&gt;Building Curl and Libcurl on Windows&lt;/h1&gt;

&lt;p&gt;The first step is to open the https://curl.haxx.se/libcurl/ page and read it.
Let’s download sources from https://curl.haxx.se/download.html. In my case,
I downloaded the &lt;a href=&quot;https://curl.haxx.se/download/curl-7.61.1.zip&quot;&gt;curl-7.61.1.zip&lt;/a&gt;.
There is also a sources mirror on GitHub: https://github.com/curl/curl.&lt;/p&gt;

&lt;p&gt;Of course, we need a Windows machine or a VM to build it and use it from Windows.&lt;/p&gt;

&lt;p&gt;Let’s extract the downloaded sources. There will be the &lt;code class=&quot;highlighter-rouge&quot;&gt;curl-7.61.1&lt;/code&gt; folder. 
Let’s assume the extracted &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; sources directory
is the current working directory.&lt;/p&gt;

&lt;p&gt;I open the &lt;code class=&quot;highlighter-rouge&quot;&gt;VS2015 x64 Native Command Prompt&lt;/code&gt; shell on my machine. That one comes from
Microsoft Visual Studio 2015. There might be another shortcut to run the shell 
from a newer or older version of Visual Studio.&lt;/p&gt;

&lt;p&gt;It is a useful file under &lt;a href=&quot;https://github.com/curl/curl/blob/master/winbuild/BUILD.WINDOWS.txt&quot;&gt;winbuild/BUILD.WINDOWS.txt&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Execute the command&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd winbuild
nmake /f Makefile.vc mode=dll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The command above build &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl&lt;/code&gt; for us. The build generates static library 
that uses some default dependencies from the system to run. For example, it uses
&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/desktop/secauthn/sspi&quot;&gt;Windows SSPI&lt;/a&gt;
as the implementation of the SSL and TLS. Check out more options on &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; building in the
&lt;a href=&quot;https://github.com/curl/curl/blob/master/winbuild/BUILD.WINDOWS.txt&quot;&gt;winbuild/BUILD.WINDOWS.txt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The compiled binaries are found under the &lt;code class=&quot;highlighter-rouge&quot;&gt;builds&lt;/code&gt; folder. The contest should be as follows:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dir builds
...
10/29/2018  09:48 PM    &amp;lt;DIR&amp;gt;          .
10/29/2018  09:48 PM    &amp;lt;DIR&amp;gt;          ..
10/29/2018  09:48 PM    &amp;lt;DIR&amp;gt;          libcurl-vc-x64-release-dll-ipv6-sspi-winssl
10/29/2018  09:48 PM    &amp;lt;DIR&amp;gt;          libcurl-vc-x64-release-dll-ipv6-sspi-winssl-obj-curl
10/29/2018  09:48 PM    &amp;lt;DIR&amp;gt;          libcurl-vc-x64-release-dll-ipv6-sspi-winssl-obj-lib
...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We have our dynamic &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; library and include files directory under 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;builds/libcurl-vc-x64-release-dll-ipv6-sspi-winssl&lt;/code&gt; folder.&lt;/p&gt;

&lt;h1 id=&quot;importing-libcurl-into-kotlinnative&quot;&gt;Importing libcurl into Kotlin/Native&lt;/h1&gt;

&lt;p&gt;Let’s use the &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/tree/master/samples/curl&quot;&gt;curl sample&lt;/a&gt;
and the &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/tree/master/samples/libcurl&quot;&gt;libcurl sample&lt;/a&gt; 
from the Kotlin/Native repository and adapt them to work on Windows too.&lt;/p&gt;

&lt;p&gt;The first step is to create the &lt;code class=&quot;highlighter-rouge&quot;&gt;.def&lt;/code&gt; file to import the native &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl&lt;/code&gt; library into Kotlin. 
More details on that are explained in the 
&lt;a href=&quot;http://kotlinlang.org/docs/tutorials/native/interop-with-c.html&quot;&gt;Interop with C Libraries&lt;/a&gt;
tutorial.&lt;/p&gt;

&lt;p&gt;Let’s add the following &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl.def&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;headers = curl/curl.h
headerFilter = curl/*
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now we may call the &lt;code class=&quot;highlighter-rouge&quot;&gt;cinteop&lt;/code&gt; tool from Kotlin/Native from a parent folder, where we extracted &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; sources:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cinterop -def libcurl.def -compilerOpts -Icurl-7.61.1\builds\libcurl-vc-x64-release-dll-ipv6-sspi-winssl\include -o libcurl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We assume here that we have Kotlin/Native compiler installed and registered in the system PATH. For more information, 
please refer to the 
&lt;a href=&quot;http://kotlinlang.org/docs/tutorials/native/basic-kotlin-native-app.html#obtaining-the-compiler&quot;&gt;A Basic Kotlin Application&lt;/a&gt;.
Let’s assume, we have a console, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;kotlinc-native&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;cinterop&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;klib&lt;/code&gt; commands are available.&lt;/p&gt;

&lt;p&gt;The call to &lt;code class=&quot;highlighter-rouge&quot;&gt;cinterop&lt;/code&gt; generates the &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl.klib&lt;/code&gt; file for us. Let’s use it from the Kotlin/Native sources!&lt;/p&gt;

&lt;h1 id=&quot;using-libcurl-from-kotlinnative&quot;&gt;Using libcurl from Kotlin/Native&lt;/h1&gt;

&lt;p&gt;It is time to follow the example from the &lt;a href=&quot;https://github.com/JetBrains/kotlin-native/tree/master/samples/curl&quot;&gt;curl sample&lt;/a&gt;
and create our first &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; application in Windows.&lt;/p&gt;

&lt;p&gt;Let’s create the file &lt;code class=&quot;highlighter-rouge&quot;&gt;curl.kt&lt;/code&gt; with the following contents:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;libcurl.*&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;kotlinx.cinterop.*&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_easy_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curl_easy_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURLOPT_URL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://jonnyzzz.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curl_easy_setopt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURLOPT_FOLLOWLOCATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1L&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;curl_easy_perform&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CURLE_OK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;curl_easy_perform() failed ${curl_easy_strerror(res)?.toKString()}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;curl_easy_cleanup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;curl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now we call the command to build the executable with Kotlin/Native:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kotlinc-native curl.kt -l libcurl -linker-options &quot;curl-7.61.1\builds\libcurl-vc-x64-release-dll-ipv6-sspi-winssl\lib\libcurl.lib&quot;  -o kurl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The application &lt;code class=&quot;highlighter-rouge&quot;&gt;kurl.exe&lt;/code&gt; is ready to go. The only thing it requires is the &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl.dll&lt;/code&gt;. The file you may find under the
&lt;code class=&quot;highlighter-rouge&quot;&gt;curl-7.61.1\builds\libcurl-vc-x64-release-dll-ipv6-sspi-winssl\bin\libcurl.dll&lt;/code&gt; path. You may try running it.&lt;/p&gt;

&lt;h1 id=&quot;static-linking&quot;&gt;Static Linking&lt;/h1&gt;

&lt;p&gt;It is not too nice to have a requirement to have the &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl.dll&lt;/code&gt; included and located near the executable we
create. Static linking, in theory, allows having only one solid binary, that contains everything.
One may easily change the &lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt; build to &lt;code class=&quot;highlighter-rouge&quot;&gt;mode=static&lt;/code&gt;. The result will be the static library &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl_a.lib&lt;/code&gt;.
Linking it with Kotlin/Native binary turned out to be tricky. To start, Kotlin/Native uses MinGW environment and 
the &lt;code class=&quot;highlighter-rouge&quot;&gt;libcurl_a.lib&lt;/code&gt; is compiled to use dynamic MSVCRT. Theoretically, it should be possible to make it work, if you
know the answer - just let me know!&lt;/p&gt;

&lt;p&gt;It is also a good &lt;a href=&quot;https://stackoverflow.com/a/52872980/49811&quot;&gt;comment for the original StackOverflow thread&lt;/a&gt;
to use MinGW specific build of curl.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="curl" />
  
    <category term="libcurl" />
  
    <category term="windows" />
  
    <category term="kotlin" />
  
    <category term="kotlin/native" />
  
    <summary type="html">Building libcurl on Windows and using it from Kotlin/Native</summary>
  
  </entry>
  
  <entry>
    <title type="html">Ad-hoc Plugins with Gradle</title>
    <link href="https://jonnyzzz.com/blog/2018/08/07/ad-hoc-gradle/" rel="alternate" type="text/html" title="Ad-hoc Plugins with Gradle" />
    <published>2018-08-07T00:00:00+00:00</published>
    <updated>2018-08-07T00:00:00+00:00</updated>
    <id>/blog/2018/08/07/ad-hoc-gradle</id>
    <content type="html" xml:base="https://jonnyzzz.com/blog/2018/08/07/ad-hoc-gradle/">&lt;p&gt;Gradle code reuse on steroids.&lt;/p&gt;

&lt;p&gt;There are many ways to reuse code in &lt;a href=&quot;https://gradle.org&quot;&gt;Gradle&lt;/a&gt; builds. The 
major and the most powerful one is
to write a Gradle plugin either as an independent project or inside &lt;code class=&quot;highlighter-rouge&quot;&gt;buildSrc&lt;/code&gt;. 
You may want to check official documentation
&lt;a href=&quot;https://docs.gradle.org/current/userguide/plugins.html&quot;&gt;here&lt;/a&gt;.
All of these approaches require additional efforts from both the development and the infrastructure sides.
Will you and your team be happy of you doing that?&lt;/p&gt;

&lt;p&gt;I want to share the short-cut to make code reuse without too much work.
I will consider a
&lt;a href=&quot;https://docs.gradle.org/current/userguide/multi_project_builds.html&quot;&gt;Multi-Project Gradle builds&lt;/a&gt;.
It makes less to no sense for a Single Project Gradle builds, there is nothing to reuse, generally.&lt;/p&gt;

&lt;p&gt;What Gradle code to reuse? There are a plenty of places for it. The most trivial is
dependencies. You’d like to try using the same versions of libraries along the sub-projects.
Repositories, packaging, testing, plugins, configurations are the places of reuse too. Yet another
example is Kotlin plugin or Scala plugin configuration.&lt;/p&gt;

&lt;h2 id=&quot;subprojects&quot;&gt;Subprojects&lt;/h2&gt;

&lt;p&gt;The most standard feature in Gradle builds. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;subprojects&lt;/code&gt; is the 
&lt;a href=&quot;https://docs.gradle.org/current/userguide/multi_project_builds.html#sec:subproject_configuration&quot;&gt;block&lt;/a&gt;
where you apply the same code snippet to all child (any level)
projects.&lt;/p&gt;

&lt;p&gt;Projects in Gradle forms a tree structure, it replicates the filesystem. 
A &lt;em&gt;parent&lt;/em&gt; project in Gradle is the project that is in the parent folder 
of a child project folder. The &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; is optional and you are not obliged to
have one. For example,
the line &lt;code class=&quot;highlighter-rouge&quot;&gt;include ':a:b:c:d'&lt;/code&gt; from a &lt;code class=&quot;highlighter-rouge&quot;&gt;settings.gradle&lt;/code&gt; file 
defines the following child projects: &lt;code class=&quot;highlighter-rouge&quot;&gt;a&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;b&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;c&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;d&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I like to use &lt;code class=&quot;highlighter-rouge&quot;&gt;subprojects { .... } &lt;/code&gt; block in parent projects to configure 
common stuff, like dependencies, plugins, repositories. Let’s see the example:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;subprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;jcenter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
 
    &lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;org.slf4j:slf4j-api:1.7.25&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;testCompile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;junit:junit:4.12&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;        
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here I set up the default maven repositories in all child projects.
Also, I include the standard dependencies, namely, &lt;a href=&quot;https://www.slf4j.org/&quot;&gt;SLF4J&lt;/a&gt; and
&lt;a href=&quot;https://junit.org/junit4/&quot;&gt;JUnit4&lt;/a&gt;. The configuration of
&lt;a href=&quot;https://junit.org/junit5/docs/current/user-guide/&quot;&gt;JUnit5&lt;/a&gt; is yet
another great example to share Gradle code between projects.&lt;/p&gt;

&lt;p&gt;It is possible that one does not want to configure all child projects,
but some projects only. It is possible. But, It’d be better to move that
project somewhere instead. I use the following,
&lt;code class=&quot;highlighter-rouge&quot;&gt;configure(project(':a'), project('b').subprojects) { .... }&lt;/code&gt; to 
apply the same settings to several projects only.&lt;/p&gt;

&lt;h2 id=&quot;apply-from-file&quot;&gt;Apply From File&lt;/h2&gt;

&lt;p&gt;The next way to apply common configuration is to use &lt;code class=&quot;highlighter-rouge&quot;&gt;apply: from: file(...foo.gradle)&lt;/code&gt; syntax.
You move the configuration to a dedicated file somewhere in the project. You
include the file to every project, where you need it.&lt;/p&gt;

&lt;p&gt;That is the way to re-include the same part of your Gradle script into many
projects. The only problem here is that the &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt; and the &lt;code class=&quot;highlighter-rouge&quot;&gt;...foo.gradle&lt;/code&gt; 
are executed in an isolated environment. It might be hard to pass parameters
back and forth.&lt;/p&gt;

&lt;h2 id=&quot;a-common-plugin&quot;&gt;A Common Plugin&lt;/h2&gt;

&lt;p&gt;The most generic approach is to create a Gradle plugin or a custom task. 
There is the &lt;a href=&quot;https://docs.gradle.org/current/userguide/plugins.html&quot;&gt;documentation&lt;/a&gt; page.
Let’s see, how to try writing a plugin just in our &lt;code class=&quot;highlighter-rouge&quot;&gt;.gradle&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;I use &lt;a href=&quot;https://jetbrains.com/idea&quot;&gt;IntelliJ IDEA&lt;/a&gt; to navigate to interfaces and javadocs.
It helps me a lot with code completion and error highlighting
directly in &lt;code class=&quot;highlighter-rouge&quot;&gt;.gradle&lt;/code&gt; files, which actually use Groovy.&lt;/p&gt;

&lt;p&gt;Gradle allows declaring classes in &lt;code class=&quot;highlighter-rouge&quot;&gt;.gradle&lt;/code&gt; files. That is the way to
create an ad-hoc plugin just in a parent project. You should know, that you 
will not be able to see the created class outside the &lt;code class=&quot;highlighter-rouge&quot;&gt;.gradle&lt;/code&gt; file, where
you created it. The good part is that you may still use &lt;code class=&quot;highlighter-rouge&quot;&gt;subprojects&lt;/code&gt; and write the following:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;k&quot;&gt;subprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MyPluginClass&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyPluginClass&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;That is the most trivial way to create you own Gradle plugin and to enable it 
for all child projects. It does not require one to invest into infrastructure 
(e.g. deployment of a plugin, build configurations and so on).&lt;/p&gt;

&lt;p&gt;You may use &lt;code class=&quot;highlighter-rouge&quot;&gt;org.gradle.api.plugins.ExtensionContainer#create(...)&lt;/code&gt;
function to add your own Gradle DSL
&lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html#sec:mapping_extension_properties_to_task_properties&quot;&gt;extension&lt;/a&gt;.
That is the standard way to include parameters from the plugin usages.&lt;/p&gt;

&lt;h2 id=&quot;ext-block&quot;&gt;Ext Block&lt;/h2&gt;

&lt;p&gt;What if I need to apply the ad-hoc plugin only to some selected sub-projects? And I do not
like to code it in the parent project &lt;code class=&quot;highlighter-rouge&quot;&gt;build.gradle&lt;/code&gt;. Similarly, I may want to reuse some dependencies
especially for selected projects.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;ext { .. }&lt;/code&gt; &lt;a href=&quot;https://docs.gradle.org/current/userguide/writing_build_scripts.html#sec:declaring_variables&quot;&gt;block&lt;/a&gt;
in Gradle is for me. I combine it with the &lt;code class=&quot;highlighter-rouge&quot;&gt;subprojects { .. }&lt;/code&gt; block.
&lt;a href=&quot;http://groovy-lang.org/closures.html&quot;&gt;Closure&lt;/a&gt; (or Lambda) is a possible value of a
property from &lt;code class=&quot;highlighter-rouge&quot;&gt;ext&lt;/code&gt; block too.
Let’s combine those features to level-up the code-reuse in our Gradle script. First, in 
a parent project we add the code:&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;subprojects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dep_arrow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Project&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;io.arrow-kt:arrow-core:0.6.1&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;io.arrow-kt:arrow-typeclasses:0.6.1&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;io.arrow-kt:arrow-data:0.6.1&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then in a selected child project I simply enable &lt;a href=&quot;https://arrow-kt.io/&quot;&gt;Arrow&lt;/a&gt; library by
writing the only one line:&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dep_arrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Theoretically, It should work with an implicitly captured Project in Closures, without &lt;code class=&quot;highlighter-rouge&quot;&gt;Project&lt;/code&gt; parameter, e.g.
&lt;code class=&quot;highlighter-rouge&quot;&gt;dep_arrow = { dependencies { ... } }&lt;/code&gt;. I was lazy to try that.&lt;/p&gt;

&lt;p&gt;The similar trick helps to enable ad-hoc Gradle plugins too.&lt;/p&gt;

&lt;h1 id=&quot;the-use-case&quot;&gt;The Use Case&lt;/h1&gt;

&lt;p&gt;I work on an project, where we decided to use micro-services. Technically, it
means, we split the whole code base into the set of small executables. 
The same language, namely Kotlin/JVM, is used to implement all services. There are common things one need 
to have for every service, for example, it includes logging configuration, communication
setup, crashes handling. I need the only way to pack those services too.&lt;/p&gt;

&lt;p&gt;What did I do? At first, I use &lt;a href=&quot;https://docs.gradle.org/current/userguide/application_plugin.html&quot;&gt;Application plugin&lt;/a&gt;
to implement the executable. It executes the same entry-point class. The entry-point class
finds the micro-service class to start it. I plan to use the &lt;a href=&quot;https://github.com/GoogleContainerTools/jib&quot;&gt;jib&lt;/a&gt; plugin
to wrap my services into Docker images.&lt;/p&gt;

&lt;p&gt;From the Gradle side of things. I created scripts for one service manually. Then, I turned that code into an ad-hoc
Gradle plugin. I enabled the plugin explicitly in the service projects.
The plugin configures the Application plugin, adds dependencies, adds
an &lt;a href=&quot;https://docs.gradle.org/current/userguide/custom_plugins.html#sec:mapping_extension_properties_to_task_properties&quot;&gt;extension&lt;/a&gt;
to get service-specific parameters.&lt;/p&gt;

&lt;p&gt;Right now, the service is created with only a few Gradle lines:&lt;/p&gt;
&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;micro_service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;project&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;micro_service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;entryClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;THE ENTRY POINT CLASS OF THE SERVICE&amp;gt;'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Let your builds be simply. Feed free to ask me for details in the comments below. 
There is also the official &lt;a href=&quot;https://docs.gradle.org/current&quot;&gt;documentation&lt;/a&gt; for Gradle.&lt;/p&gt;</content>

  
  
  
  
  

    <author>
      <name>Eugene Petrenko</name>
    </author>

  
    <category term="gradle" />
  
    <category term="java" />
  
    <category term="groovy" />
  
    <category term="plugin" />
  
    <category term="gradle-plugin" />
  
    <category term="build" />
  
    <category term="dependencies" />
  
    <summary type="html">Gradle code reuse on steroids.</summary>
  
  </entry>
  
</feed>
