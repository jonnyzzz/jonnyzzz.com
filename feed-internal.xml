<?xml version="1.0" encoding="utf-8"?><?xml-stylesheet type="text/xml" href="/feed.xslt.xml"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.2.1">Jekyll</generator><link href="/feed-internal.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2017-04-26T09:46:01+00:00</updated><id>/</id><title>Eugene Petrenko</title><subtitle>@jonnyzzz personal page and blog</subtitle><entry><title>Bytecode behind coroutines in Kotlin.</title><link href="/blog/2017/04/26/corotines-or-state-machine/" rel="alternate" type="text/html" title="Bytecode behind coroutines in Kotlin." /><published>2017-04-26T00:00:00+00:00</published><updated>2017-04-26T00:00:00+00:00</updated><id>/blog/2017/04/26/corotines-or-state-machine</id><content type="html" xml:base="/blog/2017/04/26/corotines-or-state-machine/">&lt;p&gt;A simple suspend function, and it’s bytecode.&lt;/p&gt;

&lt;p&gt;The new thing in Kotlin 1.1 is &lt;a href=&quot;http://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;coroutines&lt;/a&gt;. As we know
from the documentation, it is the &lt;code&gt;suspend&lt;/code&gt; keyword that was added to the language. The rest is implemented 
as libraries.&lt;/p&gt;

&lt;p&gt;Let’s take a look at the bytecode side of this feature.&lt;/p&gt;

&lt;h1 id=&quot;an-empty-suspend-function&quot;&gt;An Empty Suspend function&lt;/h1&gt;

&lt;p&gt;I have the following code snippet:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s take a look to the bytecode from this method. For the experiment, I use Kotlin 1.1.1 with IntelliJ IDEA 2017.1.
Results may depend on version. I use &lt;code&gt;javap -c&lt;/code&gt; to generate those dumps&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  public static final java.lang.Object b(kotlin.coroutines.experimental.Continuation&amp;lt;? super kotlin.Unit&amp;gt;);
    Code:
       0: aload_0
       1: ldc           #13                 // String $continuation
       3: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: getstatic     #25                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
       9: areturn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The interface &lt;code&gt;Continuation&lt;/code&gt; is declared in the Kotlin standard library, see &lt;a href=&quot;https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.coroutines.experimental/&quot;&gt;documentation&lt;/a&gt;.
It contains &lt;code&gt;context&lt;/code&gt; and methods to complete continuation: &lt;code&gt;resume&lt;/code&gt; and &lt;code&gt;resumeWithException&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;a-trivial-suspend-function&quot;&gt;A Trivial Suspend function&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here &lt;code&gt;a()&lt;/code&gt; and &lt;code&gt;c()&lt;/code&gt; are calls to ordinary Java methods, which were declared in Kotlin without the &lt;code&gt;suspend&lt;/code&gt; keyword.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt; public static final java.lang.Object b2(kotlin.coroutines.experimental.Continuation&amp;lt;? super kotlin.Unit&amp;gt;);
    Code:
       0: aload_0
       1: ldc           #13                 // String $continuation
       3: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: invokestatic  #29                 // Method a:()V
       9: invokestatic  #31                 // Method c:()V
      12: getstatic     #25                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      15: areturn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we see from this code, there is nothing special done to the method. The only return value and additional parameter were added.&lt;/p&gt;

&lt;h1 id=&quot;a-suspend-function-with-a-suspend-call&quot;&gt;A suspend function with a suspend call&lt;/h1&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;suspend&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example, we call &lt;code&gt;b3()&lt;/code&gt; suspend function from itself. Here &lt;code&gt;a()&lt;/code&gt; and &lt;code&gt;c()&lt;/code&gt; are calls to ordinary Java 
methods, which were declared in Kotlin without &lt;code&gt;suspend&lt;/code&gt; keyword. The generated code now looks way different.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  public static final java.lang.Object b3(kotlin.coroutines.experimental.Continuation&amp;lt;? super kotlin.Unit&amp;gt;);
    descriptor: (Lkotlin/coroutines/experimental/Continuation;)Ljava/lang/Object;
    Code:
       0: aload_0
       1: ldc           #13                 // String $continuation
       3: invokestatic  #19                 // Method kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull:(Ljava/lang/Object;Ljava/lang/String;)V
       6: new           #34                 // class streams4/ZKt$b3$1
       9: dup
      10: aload_0
      11: invokespecial #38                 // Method streams4/ZKt$b3$1.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:(Lkotlin/coroutines/experimental/Continuation;)V
      14: getstatic     #25                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      17: aconst_null
      18: invokevirtual #42                 // Method streams4/ZKt$b3$1.doResume:(Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;
      21: areturn&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Instead of having the method in-place, it now generates an inner class for the state-machine to implement the &lt;code&gt;suspend&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The class &lt;code&gt;streams4/ZKt$b3$1&lt;/code&gt; is generated as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;final class streams4.ZKt$b3$1 extends kotlin.coroutines.experimental.jvm.internal.CoroutineImpl {
  public final java.lang.Object doResume(java.lang.Object, java.lang.Throwable);
    descriptor: (Ljava/lang/Object;Ljava/lang/Throwable;)Ljava/lang/Object;
    Code:
       0: invokestatic  #13                 // Method kotlin/coroutines/experimental/intrinsics/IntrinsicsKt.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;
       3: astore_3
       4: aload_0
       5: getfield      #17                 // Field kotlin/coroutines/experimental/jvm/internal/CoroutineImpl.label:I
       8: tableswitch   { // 0 to 1
                     0: 32
                     1: 58
               default: 74
          }
      32: aload_2
      33: dup
      34: ifnull        38
      37: athrow
      38: pop
      39: invokestatic  #23                 // Method streams4/ZKt.a:()V
      42: aload_0
      43: aload_0
      44: iconst_1
      45: putfield      #17                 // Field kotlin/coroutines/experimental/jvm/internal/CoroutineImpl.label:I
      48: invokestatic  #27                 // Method streams4/ZKt.b3:(Lkotlin/coroutines/experimental/Continuation;)Ljava/lang/Object;
      51: dup
      52: aload_3
      53: if_acmpne     66
      56: aload_3
      57: areturn
      58: aload_2
      59: dup
      60: ifnull        64
      63: athrow
      64: pop
      65: aload_1
      66: pop
      67: invokestatic  #30                 // Method streams4/ZKt.c:()V
      70: getstatic     #36                 // Field kotlin/Unit.INSTANCE:Lkotlin/Unit;
      73: areturn
      74: new           #38                 // class java/lang/IllegalStateException
      77: dup
      78: ldc           #40                 // String call to &amp;#39;resume&amp;#39; before &amp;#39;invoke&amp;#39; with coroutine
      80: invokespecial #44                 // Method java/lang/IllegalStateException.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:(Ljava/lang/String;)V
      83: athrow

  streams4.ZKt$b3$1(kotlin.coroutines.experimental.Continuation);
    descriptor: (Lkotlin/coroutines/experimental/Continuation;)V
    Code:
       0: aload_0
       1: iconst_0
       2: aload_1
       3: invokespecial #58                 // Method kotlin/coroutines/experimental/jvm/internal/CoroutineImpl.&amp;quot;&amp;lt;init&amp;gt;&amp;quot;:(ILkotlin/coroutines/experimental/Continuation;)V
       6: return
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The implementation of &lt;code&gt;b3()&lt;/code&gt; function is moved to a state machine anonymous object. The main method of 
the inner object does a switch over states of the state machine.
The &lt;code&gt;b3()&lt;/code&gt; function is split by every &lt;code&gt;suspend&lt;/code&gt; function call. On the example below,
we have only 2 states. This is up to helper functions to assert the machine is always in a correct state.&lt;/p&gt;

&lt;p&gt;On every &lt;code&gt;suspend&lt;/code&gt; function call, Kotlin creates an object to encapsulate the state of the state machine, that 
is created to implement the continuations on top of JVM.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Coroutines in Kotlin are awesome, easy and powerful constructs that give 
us the power to fight the complexity (by the cost of an extra abstraction 
level). I’m looking forward to using coroutines to simplify asynchronous 
code in my apps.&lt;/p&gt;

&lt;p&gt;For more information and details see &lt;a href=&quot;http://kotlinlang.org/docs/reference/coroutines.html&quot;&gt;Kotlin coroutines&lt;/a&gt; documentation.&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="kotlin" /><category term="coroutine" /><category term="kotlin-bytecode" /><category term="jvm" /><category term="tip" /><summary>A simple suspend function, and it’s bytecode.</summary></entry><entry><title>Hints in Stack Traces on the JVM</title><link href="/blog/2017/04/12/named-frames-v2/" rel="alternate" type="text/html" title="Hints in Stack Traces on the JVM" /><published>2017-04-12T00:00:00+00:00</published><updated>2017-04-12T00:00:00+00:00</updated><id>/blog/2017/04/12/named-frames-v2</id><content type="html" xml:base="/blog/2017/04/12/named-frames-v2/">&lt;p&gt;Encode context in a thread dump or an exception stack trace for the JVM.&lt;/p&gt;

&lt;p&gt;Remember a production application stack trace or thread dump? Were you able to understand 
what a thread was downing? Why was a thread idling/hanging/waiting? What was the context of it? 
What a command was it? Or, say you were digging the roots of a NullPointerException stack trace?&lt;/p&gt;

&lt;p&gt;Most time it’s hard.&lt;/p&gt;

&lt;p&gt;There is a simple remedy. One may call &lt;code&gt;Threads.setName&lt;/code&gt; to set/unset thread
name to indicate current activity and/or to add more information.&lt;/p&gt;

&lt;p&gt;Hey, be aware of the &lt;code&gt;Threads.setName&lt;/code&gt;. Some other code may also use it in their way.
Please, do not spoil it, if you can&lt;/p&gt;

&lt;p&gt;Unfortunately, exception stack trace does not container thread name. So the fragile context is
lost if an exception is thrown. The only hope it is logged correctly, and logger includes
a thread name. Surprise! The full thread name.&lt;/p&gt;

&lt;p&gt;What else? Why cannot we include the information locally and so that it is not 
lost in an exception or in a logger message? Can we make it more context-aware and readable?&lt;/p&gt;

&lt;h1 id=&quot;an-example&quot;&gt;An example&lt;/h1&gt;

&lt;p&gt;Consider an application, which runs a request for a given, say, &lt;code&gt;userId&lt;/code&gt;. And it crashes with code like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exception in thread &amp;quot;main&amp;quot; com.jonnyzzz.blog.example.wtf.RemoteCrashServiceTimeOutException
	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl.itWillNotCrash(crash.kt:5)
	at com.jonnyzzz.blog.example.logic.business.BusinessLogic.mightyMethod(BusinessLogic.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:9)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.vendor.fun.AmazingDBSupport.runThisCodeFinally(AmazingDBSupport.kt:7)
	at com.jonnyzzz.blog.example.tansaction.meta.JokingTransaction.crzTr(JokingTransaction.kt:7)
	at com.jonnyzzz.blog.example.tansaction.Transaction.transaction(Transaction.kt:7)
	at com.jonnyzzz.blog.example.system.SystemInvariant.promoteB(SystemInvariant.kt:7)
	at com.jonnyzzz.blog.example.Ent.processA(Ent.kt:7)
	at com.jonnyzzz.blog.example.web.Controller.executeRequest(Controller.kt:10)
	at com.jonnyzzz.blog.example.EnterpriseAppKt.main(EnterpriseApp.kt:13)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;What was the context of the failure above? Does it somehow related to parameters that were around?&lt;/p&gt;

&lt;h1 id=&quot;named-frames&quot;&gt;Named Frames&lt;/h1&gt;

&lt;p&gt;I created the &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;Named Frames&lt;/a&gt;
library, which aims to help by including an additional information as &lt;em&gt;method calls&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Let’s now update the code and include &lt;code&gt;userId&lt;/code&gt; and RemoteCrashMicroService backend URL into the thread
dump. That is done be wrapping method calls with code like that:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;NamedStackFrame&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;global&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;forName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;YOUR TEXT HERE&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// it is called from a method, which contains &amp;#39;YOUR TEXT HERE&amp;#39; in the full name&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The updated thread dump from the exception is now the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Exception in thread &amp;quot;main&amp;quot; com.jonnyzzz.blog.example.wtf.RemoteCrashServiceTimeOutException
	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl$itWillNotCrash$1.call(crash.kt:8)
	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl$itWillNotCrash$1.call(crash.kt:5)

	at __. service = backend-452 .__.call(JavaGeneratorTemplate.java:39)

	at com.jonnyzzz.blog.example.wtf.RemoteCrashMicroServiceAccessImpl.itWillNotCrash(crash.kt:7)
	at com.jonnyzzz.blog.example.logic.business.BusinessLogic.mightyMethod(BusinessLogic.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:9)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.transaction.internals.InternalsForSure.transaction(InternalsForSure.kt:7)
	at com.jonnyzzz.blog.example.db.vendor.fun.AmazingDBSupport.runThisCodeFinally(AmazingDBSupport.kt:7)
	at com.jonnyzzz.blog.example.tansaction.meta.JokingTransaction.crzTr(JokingTransaction.kt:7)
	at com.jonnyzzz.blog.example.tansaction.Transaction.transaction(Transaction.kt:7)
	at com.jonnyzzz.blog.example.system.SystemInvariant.promoteB(SystemInvariant.kt:7)
	at com.jonnyzzz.blog.example.Ent.processA(Ent.kt:7)
	at com.jonnyzzz.blog.example.web.Controller$executeRequest$1.call(Controller.kt:12)
	at com.jonnyzzz.blog.example.web.Controller$executeRequest$1.call(Controller.kt:7)

	at __. user = jonnyzzz .__.call(JavaGeneratorTemplate.java:39)

	at com.jonnyzzz.blog.example.web.Controller.executeRequest(Controller.kt:11)
	at com.jonnyzzz.blog.example.EnterpriseAppKt.main(EnterpriseApp.kt:13)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This one now includes the sensible information (as service name and userId)
which can be used to debug the original problem.&lt;/p&gt;

&lt;h1 id=&quot;api&quot;&gt;API&lt;/h1&gt;

&lt;p&gt;Named stack frames API is easy and flexible. 
The main entry point is &lt;code&gt;org.jonnyzzz.stack.NamedStackFrame&lt;/code&gt;. There you may use either &lt;code&gt;#global()&lt;/code&gt; method to access 
statically cached factory of named framed. 
The better is to use &lt;code&gt;#newInstance()&lt;/code&gt; method to have an instance of the factory to explicitly control the lifetime.&lt;/p&gt;

&lt;p&gt;Both methods return an instance of &lt;code&gt;org.jonnyzzz.stack.NamedExecutor&lt;/code&gt; interface, which contains all possible methods to wrap
a call with a named frame.&lt;/p&gt;

&lt;h1 id=&quot;implementation&quot;&gt;Implementation&lt;/h1&gt;

&lt;p&gt;The implementation is covered in &lt;a href=&quot;/blog/2014/04/26/named-stack-frames-for-jvm/&quot;&gt;the older post&lt;/a&gt;. Note, the
API is slightly changed in 0.2.x.&lt;/p&gt;

&lt;p&gt;The idea is to on-the-fly generate classes for every given name. All generated classes are loaded with a dedicated
classloader and cached.&lt;/p&gt;

&lt;p&gt;We implement our own class file weaver to avoid external dependencies from other libraries and thus to
simplify adoption of this library in your project.&lt;/p&gt;

&lt;p&gt;The library attempts to escape some &lt;em&gt;bad&lt;/em&gt; symbols from names you pass. All such symbols are replaced with ‘_’.&lt;/p&gt;

&lt;h1 id=&quot;namedstackframe-costs&quot;&gt;NamedStackFrame Costs&lt;/h1&gt;

&lt;p&gt;Custom information in stack traces is not free. We create and load classes to implement it. This means, 
it’s your responsibility to make sure you will not consume all JVM memory on that.&lt;/p&gt;

&lt;p&gt;Practically, you should understand the number of possible names is limited and fits in the memory. That’s it.&lt;/p&gt;

&lt;h1 id=&quot;profiler-grouping-of-calls&quot;&gt;Profiler Grouping of Calls&lt;/h1&gt;

&lt;p&gt;Do you use a profiler to monitor your application? A profiler presents such named 
methods (just like ordinary methods) as different method calls. That means you’ll see a distribution of calls.&lt;/p&gt;

&lt;p&gt;You’ll see a distribution of time spent by each name: a distribution by &lt;code&gt;userId&lt;/code&gt;, &lt;code&gt;action type&lt;/code&gt; or &lt;code&gt;serviceId&lt;/code&gt;
for the example above.&lt;/p&gt;

&lt;h1 id=&quot;android-support&quot;&gt;Android Support&lt;/h1&gt;

&lt;p&gt;All the time I was wondering if it’s helpful for Android applications as well. Do you like the idea?
Please contribute!&lt;/p&gt;

&lt;h1 id=&quot;license&quot;&gt;License&lt;/h1&gt;

&lt;p&gt;The library is &lt;a href=&quot;https://www.apache.org/licenses/LICENSE-2.0&quot;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&quot;download&quot;&gt;Download&lt;/h1&gt;

&lt;p&gt;Sources are on &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Binaries are on JCenter / Bintray&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://bintray.com/jonnyzzz/maven/named-frames/_latestVersion&quot;&gt; &lt;img src=&quot;https://api.bintray.com/packages/jonnyzzz/maven/named-frames/images/download.svg&quot; alt=&quot;Download&quot; /&gt; &lt;/a&gt; &lt;a href=&quot;https://travis-ci.org/jonnyzzz/named-java-frames&quot;&gt; &lt;img src=&quot;https://travis-ci.org/jonnyzzz/named-java-frames.svg?branch=master&quot; alt=&quot;Build Status&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In Gradle, just add&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;repositories {
  jcenter()
}

dependencies {
  compile 'org.jonnyzzz.named-frames:named-frames:&amp;lt;LATEST VERSION&amp;gt;'
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;issues&quot;&gt;Issues&lt;/h1&gt;

&lt;p&gt;On &lt;a href=&quot;https://github.com/jonnyzzz/named-java-frames&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="jvm" /><category term="debug" /><category term="trace" /><category term="library" /><category term="opensource" /><category term="stacktrace" /><category term="frame" /><category term="stack" /><category term="java" /><category term="named-stack-frames" /><summary>Encode context in a thread dump or an exception stack trace for the JVM.</summary></entry><entry><title>Sealed classes and ‘when’ expression</title><link href="/blog/2017/03/29/when-for-sealed-classes/" rel="alternate" type="text/html" title="Sealed classes and 'when' expression" /><published>2017-03-29T00:00:00+00:00</published><updated>2017-03-29T00:00:00+00:00</updated><id>/blog/2017/03/29/when-for-sealed-classes</id><content type="html" xml:base="/blog/2017/03/29/when-for-sealed-classes/">&lt;p&gt;‘when’ expression as pattern-matching in Kotlin&lt;/p&gt;

&lt;p&gt;Let’s consider the following case. You need to return 3 different return values from a function. Each 
value is associated with information. Say we do &lt;a href=&quot;https://en.wikipedia.org/wiki/Authentication&quot;&gt;authentication&lt;/a&gt; 
and &lt;a href=&quot;https://en.wikipedia.org/wiki/Authorization&quot;&gt;authorization&lt;/a&gt; in one shot. The results 
are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;not authenticated + error message&lt;/li&gt;
  &lt;li&gt;not authorized + userId + error message&lt;/li&gt;
  &lt;li&gt;authenticated and authorized + userId&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Algebraic_data_type&quot;&gt;Algebraic data types&lt;/a&gt; looks the best fit here, 
but we have no such in Java.&lt;/p&gt;

&lt;p&gt;A possible approach is to use enum for that. But enum does not allow us to pass additional information
with each call. To fix that we may return a value object with all fields, but it will add a level 
of mess to the callee code.&lt;/p&gt;

&lt;p&gt;Yet another apporach is to make the method return a base class or interface and to have an 
implementation per return case. This would make code cleaner, but with a cost of &lt;code&gt;instenceof&lt;/code&gt;
or &lt;a href=&quot;https://en.wikipedia.org/wiki/Visitor_pattern&quot;&gt;visitor pattern&lt;/a&gt; impementation.&lt;/p&gt;

&lt;p&gt;A nice thing in Kotlin is we are able to use 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/control-flow.html#when-expression&quot;&gt;when expression&lt;/a&gt; 
to make this checking code read better. In &lt;a href=&quot;/blog/2017/03/15/switch-to-when/&quot;&gt;a recent post&lt;/a&gt;
I covered &lt;code&gt;when&lt;/code&gt; expression benefits.&lt;/p&gt;

&lt;p&gt;We may also make sure we check all possible branchs in &lt;code&gt;when&lt;/code&gt; expression. For this we only need to 
use &lt;a href=&quot;https://kotlinlang.org/docs/reference/classes.html#sealed-classes&quot;&gt;sealed classes&lt;/a&gt; for 
return objects hierarchy.&lt;/p&gt;

&lt;p&gt;This is example implementation code with sealed class and &lt;code&gt;when&lt;/code&gt; expression:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;UserId&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MagicToken&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* ... */&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sealed&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AuthResult&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotAuthenticated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NotAuthorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MagicToken&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotAuthenticated&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;NotAuthenticated ${r.message}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NotAuthorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;NotAuthorized ${r.id}, ${r.message}&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Success&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Success ${r.token}&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example we also need not specify &lt;code&gt;else&lt;/code&gt; case for 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/control-flow.html#when-expression&quot;&gt;when expression&lt;/a&gt;.
Kotlin compiler is able to prove we listed all types if this sealed class.&lt;/p&gt;

&lt;p&gt;Thanks to &lt;a href=&quot;https://kotlinlang.org/docs/reference/typecasts.html#smart-casts&quot;&gt;smart casts&lt;/a&gt; 
in each &lt;code&gt;when&lt;/code&gt; branch we use exactly matched type, so for example, &lt;code&gt;r.message&lt;/code&gt; in the first branch 
is &lt;code&gt;NotAuthenticated#message&lt;/code&gt; and so on.&lt;/p&gt;

&lt;h1 id=&quot;generated-bytecode&quot;&gt;Generated bytecode&lt;/h1&gt;

&lt;p&gt;Let’s traditionally take a look into bytecode, that was generated from this code snippet. 
Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin 1.0.6 plugin. The generated bytecode 
may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  // access flags 0x19
  public final static proceed(LAuthResult;)Ljava/lang/String;
    @Lorg/jetbrains/annotations/NotNull;() // invisible
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
    ALOAD 0
    LDC &amp;quot;r&amp;quot;
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L1
    LINENUMBER 25 L1
    ALOAD 0
    ASTORE 1
   L2
    LINENUMBER 26 L2
    ALOAD 1
    INSTANCEOF AuthResult$NotAuthenticated
    IFEQ L3
   L4
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;NotAuthenticated &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$NotAuthenticated
    INVOKEVIRTUAL AuthResult$NotAuthenticated.getMessage ()Ljava/lang/String;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    GOTO L5
   L3
    LINENUMBER 27 L3
    ALOAD 1
    INSTANCEOF AuthResult$NotAuthorized
    IFEQ L6
   L7
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;NotAuthorized &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$NotAuthorized
    INVOKEVIRTUAL AuthResult$NotAuthorized.getId ()LUserId;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    LDC &amp;quot;, &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$NotAuthorized
    INVOKEVIRTUAL AuthResult$NotAuthorized.getMessage ()Ljava/lang/String;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    GOTO L5
   L6
    LINENUMBER 28 L6
    ALOAD 1
    INSTANCEOF AuthResult$Success
    IFEQ L8
   L9
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;Success &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 0
    CHECKCAST AuthResult$Success
    INVOKEVIRTUAL AuthResult$Success.getToken ()LMagicToken;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/Object;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    GOTO L5
   L8
    NEW kotlin/NoWhenBranchMatchedException
    DUP
    INVOKESPECIAL kotlin/NoWhenBranchMatchedException.&amp;lt;init&amp;gt; ()V
    ATHROW
   L10
    LINENUMBER 25 L10
   L5
    LINENUMBER 29 L5
    ARETURN
   L11
    LOCALVARIABLE r LAuthResult; L0 L11 0
    MAXSTACK = 2
    MAXLOCALS = 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Kotlin compiler generated an &lt;code&gt;if-else&lt;/code&gt; chain with &lt;code&gt;instanceof&lt;/code&gt; checks. First it checks 
if the value is &lt;code&gt;AuthResult$NotAuthenticated&lt;/code&gt;, next &lt;code&gt;AuthResult$NotAuthorized&lt;/code&gt; and finally
&lt;code&gt;AuthResult$Success&lt;/code&gt;. In a case something went terribly wrong, a &lt;code&gt;kotlin.NoWhenBranchMatchedException&lt;/code&gt;
exception is thrown. And this can be achieved if older version of our snippet is executed with a
newer version of &lt;code&gt;AuthResult&lt;/code&gt; class. A full re-compile will fail with error so we were able to 
fix the problem easily.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this post, we looked how &lt;code&gt;when&lt;/code&gt; expression is working with &lt;code&gt;sealed classes&lt;/code&gt;, which are really nice
to use for cases, where one needs to return several different unrelated values.&lt;/p&gt;

&lt;h1 id=&quot;related-work&quot;&gt;Related work&lt;/h1&gt;

&lt;p&gt;You may also like to read a related blog post &lt;a href=&quot;http://engineering.pivotal.io/post/algebraic-data-types-in-kotlin/&quot;&gt;Algebraic Data Types In Kotlin&lt;/a&gt;&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="kotlin" /><category term="kotlin-bytecode" /><category term="jvm" /><category term="tip" /><summary>‘when’ expression as pattern-matching in Kotlin</summary></entry><entry><title>Switch to when</title><link href="/blog/2017/03/15/switch-to-when/" rel="alternate" type="text/html" title="Switch to when" /><published>2017-03-15T00:00:00+00:00</published><updated>2017-03-15T00:00:00+00:00</updated><id>/blog/2017/03/15/switch-to-when</id><content type="html" xml:base="/blog/2017/03/15/switch-to-when/">&lt;p&gt;‘when’ expression in Kotlin VS ‘switch’ statement in Java&lt;/p&gt;

&lt;h1 id=&quot;switch-in-java&quot;&gt;Switch in Java&lt;/h1&gt;

&lt;p&gt;Consider the following code in Java&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ELSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThisCanNeverHappenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Widespread pattern, isn’t it? There are several things wrong with it! First, &lt;code&gt;Foo f&lt;/code&gt; variable is not final, 
so it can be ocassionally changed in the future after some code changes.&lt;/p&gt;

&lt;p&gt;Next, we switll have &lt;code&gt;default&lt;/code&gt; branch which is not necessary as we cover all enum values. But if 
someone dares to add extra enum value, this code will still compile correctly!&lt;/p&gt;

&lt;p&gt;Enough problems? Nope! I forgot &lt;code&gt;break;&lt;/code&gt; in each &lt;code&gt;case&lt;/code&gt; branch. Surprise.&lt;/p&gt;

&lt;p&gt;An improvement is still possible to solve some of the problems above. Use &lt;code&gt;return&lt;/code&gt; statement! So we have&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ELSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThisCanNeverHappenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Is it better now? More or less yes. But would you create an additional function for every &lt;code&gt;switch&lt;/code&gt;? I’m not sure.&lt;/p&gt;

&lt;h1 id=&quot;when-in-kotlin&quot;&gt;When in Kotlin&lt;/h1&gt;

&lt;p&gt;The equivalent constuction to &lt;code&gt;switch&lt;/code&gt; in Java is &lt;code&gt;when&lt;/code&gt; in Kotlin. You may take a look to the 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/control-flow.html#when-expression&quot;&gt;when expression&lt;/a&gt; documentation
for more details. Note, &lt;code&gt;when&lt;/code&gt; expression is more functional than &lt;code&gt;switch&lt;/code&gt; in Java.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;bar:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Foo&lt;/span&gt;
  &lt;span class=&quot;nf&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ThisCanNeverHappenException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was just one-to-one conversion to Kotlin and I see the warning to convert &lt;code&gt;var f&lt;/code&gt; to &lt;code&gt;val f&lt;/code&gt; at first.&lt;/p&gt;

&lt;p&gt;It is good to notice, &lt;code&gt;when&lt;/code&gt; can be used as expression! We may avoid assigning &lt;code&gt;f&lt;/code&gt; variable inside each case.&lt;/p&gt;

&lt;p&gt;The right of &lt;code&gt;-&amp;gt;&lt;/code&gt; is also an expression. If you need more things to do, use &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt;. There is no &lt;code&gt;break&lt;/code&gt; 
exists or required.&lt;/p&gt;

&lt;p&gt;If &lt;code&gt;when&lt;/code&gt; is used as expression, &lt;code&gt;else&lt;/code&gt; branch is not necessary, the compiler can prove all branches are included.
At least this works if you checking enum or 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/classes.html#sealed-classes&quot;&gt;sealed classes&lt;/a&gt;. 
Compilation fails if a missing branch is detected.&lt;/p&gt;

&lt;p&gt;Overall I turn the example into this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;f&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VALUE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value42&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ELSE&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value444&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 

  &lt;span class=&quot;n&quot;&gt;doSomeMightyWork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Looks concise, isn’t it?&lt;/p&gt;

&lt;h1 id=&quot;generated-bytecode&quot;&gt;Generated bytecode&lt;/h1&gt;

&lt;p&gt;Let’s look into bytecode for the &lt;code&gt;when&lt;/code&gt; statement call. Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin
1.0.6 plugin. The generated bytecode may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  // access flags 0x19
  public final static action(LBar;)V
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
   L0
    ALOAD 0
    LDC &amp;quot;e&amp;quot;
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L1
    LINENUMBER 13 L1
    ALOAD 0
    GETSTATIC WhKt$WhenMappings.$EnumSwitchMapping$0 : [I
    SWAP
    INVOKEVIRTUAL Bar.ordinal ()I
    IALOAD
    LOOKUPSWITCH
      1: L2
      2: L3
      default: L4
   L2
    LINENUMBER 14 L2
    INVOKESTATIC WhKt.value42 ()LFoo;
    GOTO L5
   L3
    LINENUMBER 15 L3
    INVOKESTATIC WhKt.value444 ()LFoo;
    GOTO L5
   L4
    NEW kotlin/NoWhenBranchMatchedException
    DUP
    INVOKESPECIAL kotlin/NoWhenBranchMatchedException.&amp;lt;init&amp;gt; ()V
    ATHROW
   L6
    LINENUMBER 13 L6
   L5
    ASTORE 1
   L7
    LINENUMBER 18 L7
    ALOAD 1
    INVOKESTATIC WhKt.doSomeMightyWork (LFoo;)V
   L8
    LINENUMBER 19 L8
    RETURN
   L9
    LOCALVARIABLE f LFoo; L7 L9 1
    LOCALVARIABLE e LBar; L0 L9 0
    MAXSTACK = 2
    MAXLOCALS = 2&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;From the bytecode we see it throws &lt;code&gt;kotlin/NoWhenBranchMatchedException&lt;/code&gt; in case it turned out
there is an additional case. For example, this may happen if we are running a compiled code 
againt updated &lt;code&gt;Bar&lt;/code&gt; enum with additional case added.&lt;/p&gt;

&lt;p&gt;Still, a re-compilation will show there is an errors.&lt;/p&gt;

&lt;p&gt;The only problem is that &lt;code&gt;NoWhenBranchMatchedException&lt;/code&gt; contains no information on what 
kind of instance was there, maybe a &lt;code&gt;toString()&lt;/code&gt; or &lt;code&gt;getClass().getName()&lt;/code&gt; were nice to 
have helpers. Still, in general, such calls may also throw exceptions.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In this post we see how &lt;code&gt;when&lt;/code&gt; expression can help one avoid trivial errors
in switches. We discussed the benefit of using &lt;code&gt;when&lt;/code&gt; as expression&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="kotlin" /><category term="kotlin-bytecode" /><category term="jvm" /><category term="tip" /><summary>‘when’ expression in Kotlin VS ‘switch’ statement in Java

Switch in Java

Consider the following code in Java</summary></entry><entry><title>Guard access by lock in Kotlin</title><link href="/blog/2017/03/01/guarded-by-lock/" rel="alternate" type="text/html" title="Guard access by lock in Kotlin" /><published>2017-03-01T00:00:00+00:00</published><updated>2017-03-01T00:00:00+00:00</updated><id>/blog/2017/03/01/guarded-by-lock</id><content type="html" xml:base="/blog/2017/03/01/guarded-by-lock/">&lt;p&gt;GuardedByLock a simple helper to make sure variable is only accessed with lock&lt;/p&gt;

&lt;p&gt;A topic of ownership is better covered in &lt;a href=&quot;https://www.rust-lang.org&quot;&gt;Rust Language&lt;/a&gt;. Still, such problems
are not solved well enough in the JVM world. Let’s consider a trivial shared state access example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;42&lt;/span&gt;
  
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;updateStateWithNewValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unlock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We all know the best state is no state. And we tend to decouple tricky things. But of course, there are 
some places in programs where one finally needs to deal with a state. In reality, it can easily be a 
complicated state with several different locks in one object.&lt;/p&gt;

&lt;p&gt;The common problem here is to make sure fields are accessed with correct locks taken. It is tricky 
to ensure in Java. It is double tricky to ensure future changes will not break the contract.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://jcp.org/en/jsr/detail?id=305&quot;&gt;JSR-305&lt;/a&gt; and &lt;a href=&quot;http://jcip.net/annotations/doc/net/jcip/annotations/GuardedBy.html&quot;&gt;GuardedBy&lt;/a&gt;
annotations are created to make a binding between state and guards. But those are only to 
help an IDE to be smarter, those annotations will not turn a mistake into a compilation error.&lt;/p&gt;

&lt;p&gt;I’m looking the way to make a compiler to ensure the access is correct.&lt;/p&gt;

&lt;h1 id=&quot;java-style-solution&quot;&gt;Java Style solution&lt;/h1&gt;

&lt;p&gt;In Java, this can be done in the following way. Create a function &lt;code&gt;runWithLock&lt;/code&gt; and make this function accept
an interface with a method like &lt;code&gt;run(State s)&lt;/code&gt;. If necessary a generics can be added to simplify usages.&lt;/p&gt;

&lt;p&gt;To implement that one need to extract a state object (which I call &lt;code&gt;State&lt;/code&gt;). Happy Java 1.8 users may benefit
from Lambda syntax. But the approach itself requires a creation of tiny objects (for lambdas, in most cases) on every call.
Such overhead is small, but one may not like it.&lt;/p&gt;

&lt;p&gt;An example call code would look like&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;State&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runWithLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/*...*/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;runWithLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s try avoid lambdas overhead and to yield a bit better syntax.&lt;/p&gt;

&lt;h1 id=&quot;kotlin-style-solution&quot;&gt;Kotlin Style solution&lt;/h1&gt;

&lt;p&gt;Consider the following implementation in Kotlin&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GuardedByLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;L:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;lock:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;state:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;runWithLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;action:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;withLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;state&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The usage is as follows:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;   &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;value:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Int&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GuardedByLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ReentrantLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
   
   &lt;span class=&quot;n&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;lock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runWithLock&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s take a look closer to the &lt;code&gt;runWithLock&lt;/code&gt; call. Here &lt;code&gt;{&lt;/code&gt; and &lt;code&gt;}&lt;/code&gt; are used to 
declare an &lt;a href=&quot;https://kotlinlang.org/docs/reference/lambdas.html&quot;&gt;anonymous extension function&lt;/a&gt; 
of type &lt;code&gt;State.() -&amp;gt; Y&lt;/code&gt; (&lt;code&gt;Y&lt;/code&gt; is a generic type parameter).
Extension function means that in the body of the function we have &lt;code&gt;this&lt;/code&gt; keyword pointing to &lt;code&gt;State&lt;/code&gt; object
instance. And the part &lt;code&gt;value = 5&lt;/code&gt; means we assign the value to &lt;code&gt;State&lt;/code&gt; object property/field.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;inline&lt;/code&gt; keyword here makes Kotlin compiler to 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/inline-functions.html&quot;&gt;inline&lt;/a&gt;
the function body to avoid creating an anonymous function in the compiled code. You may refer to 
&lt;a href=&quot;/blog/2017/02/15/catchall/&quot;&gt;the previous post&lt;/a&gt; for bytecode listing of inline function calls.&lt;/p&gt;

&lt;p&gt;With this approach, we avoid creation anonymous classes for Lambdas from one hand. From the other hand,
the Kotlin compiler is in charge of checking a &lt;code&gt;State&lt;/code&gt; object instance in only accessible after necessary
locks are held.&lt;/p&gt;

&lt;p&gt;Finally, the bytecode for the &lt;code&gt;main&lt;/code&gt; function is the following. Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin 
1.0.6 plugin. The generated bytecode may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  // access flags 0x19
  public final static main()V
    TRYCATCHBLOCK L0 L1 L2 null
    TRYCATCHBLOCK L2 L3 L2 null
   L4
    LINENUMBER 27 L4
    GETSTATIC GlKt.lock : LGuardedByLock;
    ASTORE 0
    NOP
   L5
    LINENUMBER 30 L5
    ALOAD 0
    INVOKEVIRTUAL GuardedByLock.getLock ()Ljava/util/concurrent/locks/Lock;
    ASTORE 1
    NOP
   L6
    ALOAD 1
    INVOKEINTERFACE java/util/concurrent/locks/Lock.lock ()V
   L7
   L0
    NOP
   L8
    NOP
   L9
    LINENUMBER 30 L9
    ALOAD 0
    INVOKEVIRTUAL GuardedByLock.getState ()Ljava/lang/Object;
    CHECKCAST State
    ASTORE 2
    NOP
   L10
    LINENUMBER 27 L10
    ALOAD 2
    ICONST_5
    INVOKEVIRTUAL State.setValue (I)V
   L11
   L12
    GETSTATIC kotlin/Unit.INSTANCE : Lkotlin/Unit;
   L13
   L14
    LINENUMBER 30 L14
    ASTORE 2
   L1
    ALOAD 1
    INVOKEINTERFACE java/util/concurrent/locks/Lock.unlock ()V
    ALOAD 2
    GOTO L15
   L2
    ASTORE 2
   L3
    ALOAD 1
    INVOKEINTERFACE java/util/concurrent/locks/Lock.unlock ()V
    ALOAD 2
    ATHROW
   L15
    LINENUMBER 30 L15
   L16
    POP
   L17
    LINENUMBER 28 L17
    RETURN
   L18
    LOCALVARIABLE $receiver LState; L10 L12 2
    LOCALVARIABLE $i$a$1$runWithLock I L10 L12 3
    LOCALVARIABLE $i$a$1$withLock I L9 L14 4
    LOCALVARIABLE this_$iv LGuardedByLock; L5 L16 0
    LOCALVARIABLE $i$f$runWithLock I L5 L16 5
    MAXSTACK = 2
    MAXLOCALS = 6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we see from the code, there is NO anonymous class creation.A call to &lt;code&gt;GuardedByLock#runWithLock&lt;/code&gt; was inlined into 
the &lt;code&gt;main&lt;/code&gt; function body, meaning less overhead (who’d measure it :).&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In the post, I presented &lt;code&gt;GuardedByLock&lt;/code&gt; class in Kotlin. Using it in your project may help to 
correctly isolate state and make Kotlin complier checking all possible violations for you. 
The only cost is 2 additional object instances: one for &lt;code&gt;GuardedByLock&lt;/code&gt;, and the other one for the &lt;code&gt;State&lt;/code&gt;.&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="kotlin" /><category term="kotlin-bytecode" /><category term="jvm" /><category term="tip" /><summary>GuardedByLock a simple helper to make sure variable is only accessed with lock</summary></entry><entry><title>Catching exceptions with less code in Kotlin</title><link href="/blog/2017/02/15/catchall/" rel="alternate" type="text/html" title="Catching exceptions with less code in Kotlin" /><published>2017-02-15T00:00:00+00:00</published><updated>2017-02-15T00:00:00+00:00</updated><id>/blog/2017/02/15/catchall</id><content type="html" xml:base="/blog/2017/02/15/catchall/">&lt;p&gt;A tiny inline function for consise try/catch&lt;/p&gt;

&lt;p&gt;In JVM every call can throw an exception. In Java language, we have dedicated declaration that a method is 
expected to throw some exception types. But still, some other (&lt;code&gt;Throwable&lt;/code&gt;, &lt;code&gt;Error&lt;/code&gt;, &lt;code&gt;RuntimeException&lt;/code&gt;) exceptions 
may still be thrown.&lt;/p&gt;

&lt;p&gt;In Kotlin there are no checked exceptions (like, say in C#). Sill, one have to expect
any possible exception being thrown from any possible place.&lt;/p&gt;

&lt;p&gt;Most cases it’s ok and one should not do anything specific about exceptions. Still, there are other places, 
where an exception may break code logic. In asynchronous applications (for example with RxJava, Netty, grpc-java) where 
most of the code is a callback, it may turn out necessary to make sure an exception is not breaking some 
outer login.&lt;/p&gt;

&lt;p&gt;A trivial solution is to use &lt;code&gt;try/catch&lt;/code&gt;. But it makes a code quite ugly when you have several statements to call. It 
may look like that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;handleAction1Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;handleAction2Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;/// ....&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callActionN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ExceptionType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;handleActionNError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A good think here is that &lt;code&gt;try/catch&lt;/code&gt; is expression in Kotlin, but still it is quite long to use.&lt;/p&gt;

&lt;p&gt;In my application, I found that about 80% of such catches were done to 
log actual problem and to continue forking further. Meaning &lt;code&gt;handleActionNError()&lt;/code&gt; functions in my case were 
calls to a &lt;code&gt;Logger&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is now equivalent way in Java to replace this long construction. Of course, it is possible to pass a 
lambda expression into a function like &lt;code&gt;catchAll&lt;/code&gt;. But this would change a program and it would add extra 
object creation in most of the cases.&lt;/p&gt;

&lt;p&gt;One can implement similar &lt;code&gt;catchAll&lt;/code&gt; function in Kotlin too. Thanks to 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/inline-functions.html&quot;&gt;inline functions&lt;/a&gt;
it has no overhead at all.&lt;/p&gt;

&lt;p&gt;This is the function I use:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Failed to $message. ${t.message}&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So now I may rewrite the above example in a way consise fashion&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;action1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;action2&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callAction2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;///  ....&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;actionN&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;callActionN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Every usage of the function &lt;code&gt;catchAll&lt;/code&gt; is inlined by Kotlin compiler in to a caller method bodies. Kotlin compiler also
inlines the action anonymous function &lt;code&gt;action&lt;/code&gt; too. There is no overhead! Let’s consider the following
example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;catchAll&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LOG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;println&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Test console output&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The following bytecode is generated out of it. Note. I use IntelliJ IDEA 2017.1 EAP with Kotlin 1.0.6 plugin. The generated
bytecode may change with a future version of tools.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;public final static main([Ljava/lang/String;)V
    @Lorg/jetbrains/annotations/NotNull;() // invisible, parameter 0
    TRYCATCHBLOCK L0 L1 L2 java/lang/Throwable
   L3
    ALOAD 0
    LDC &amp;quot;args&amp;quot;
    INVOKESTATIC kotlin/jvm/internal/Intrinsics.checkParameterIsNotNull (Ljava/lang/Object;Ljava/lang/String;)V
   L4
    LINENUMBER 17 L4
    GETSTATIC LOG.INSTANCE : LLOG;
    CHECKCAST Logger
    ASTORE 1
    LDC &amp;quot;println&amp;quot;
    ASTORE 2
    NOP
   L5
    LINENUMBER 24 L5
   L6
   L0
    NOP
   L7
    LINENUMBER 25 L7
    NOP
   L8
    LINENUMBER 18 L8
    LDC &amp;quot;Test console output&amp;quot;
    ASTORE 3
    NOP
   L9
    GETSTATIC java/lang/System.out : Ljava/io/PrintStream;
    ALOAD 3
    INVOKEVIRTUAL java/io/PrintStream.println (Ljava/lang/Object;)V
   L10
   L11
    LINENUMBER 18 L11
   L12
    LINENUMBER 19 L12
   L13
    NOP
   L1
    GOTO L14
   L2
    LINENUMBER 26 L2
    ASTORE 3
   L15
    LINENUMBER 27 L15
    ALOAD 1
    NEW java/lang/StringBuilder
    DUP
    INVOKESPECIAL java/lang/StringBuilder.&amp;lt;init&amp;gt; ()V
    LDC &amp;quot;Failed to &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 2
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    LDC &amp;quot;. &amp;quot;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    ALOAD 3
    INVOKEVIRTUAL java/lang/Throwable.getMessage ()Ljava/lang/String;
    INVOKEVIRTUAL java/lang/StringBuilder.append (Ljava/lang/String;)Ljava/lang/StringBuilder;
    INVOKEVIRTUAL java/lang/StringBuilder.toString ()Ljava/lang/String;
    ALOAD 3
    INVOKEVIRTUAL Logger.warn (Ljava/lang/String;Ljava/lang/Object;)V
   L16
    LINENUMBER 28 L16
   L14
    LINENUMBER 29 L14
   L17
   L18
    LINENUMBER 20 L18
    RETURN
   L19
    LOCALVARIABLE $i$a$1$catchAll I L8 L13 4
    LOCALVARIABLE t$iv Ljava/lang/Throwable; L2 L16 3
    LOCALVARIABLE LOG$iv LLogger; L5 L17 1
    LOCALVARIABLE message$iv Ljava/lang/String; L5 L17 2
    LOCALVARIABLE $i$f$catchAll I L5 L17 5
    LOCALVARIABLE args [Ljava/lang/String; L3 L19 0
    MAXSTACK = 3
    MAXLOCALS = 6&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we see the &lt;code&gt;catchAll&lt;/code&gt; function call is inlined. We have &lt;code&gt;println&lt;/code&gt; call as-is, without any anonymous function 
wrappers. Any combination of &lt;code&gt;catchAll&lt;/code&gt; calls generates similar bytecode with &lt;code&gt;try/catch&lt;/code&gt; blocks. Once can easily combine 
such calls to make a program easier to read on some higher level.&lt;/p&gt;

&lt;p&gt;Disclaimer. Checked or unchecked exceptions are meaningful. I’m not trying to promote the idea to catch all possible exceptions
in every possible statement. The goal is to show it is possible to create a tiny function that would help to recure a number
of similar code snippets and improve readability. It is up to you to decide if an error is OK to ignore or to log without propagation.&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="kotlin" /><category term="kotlin-bytecode" /><category term="jvm" /><category term="tip" /><summary>A tiny inline function for consise try/catch</summary></entry><entry><title>The power of templating in a DSL</title><link href="/blog/2016/09/16/power-of-dsl/" rel="alternate" type="text/html" title="The power of templating in a DSL" /><published>2016-09-16T00:00:00+00:00</published><updated>2016-09-16T00:00:00+00:00</updated><id>/blog/2016/09/16/power-of-dsl</id><content type="html" xml:base="/blog/2016/09/16/power-of-dsl/">&lt;p&gt;Welcome a powerful templating engine that 
is available for every DSL in a general 
purpose language.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Let’s consider a general purpose language (e.g. Scala, Java, Kotlin)
and a library (or a DSL API library) which helps to define 
objects for some domain.&lt;/p&gt;

&lt;p&gt;We use the library in a program to yield a domain objects.
This means we are allowed to mix the libraly calls with other 
general language calls features. This forms a templates.&lt;/p&gt;

&lt;p&gt;You may recall a &lt;code&gt;.php&lt;/code&gt; or &lt;code&gt;.jsp&lt;/code&gt; condition or loop tags as an example.&lt;/p&gt;

&lt;p&gt;For the DSL case the general purpose 
language turns into a powerfull templage engine. Unlike string 
templage engines, this approach allows a semantic aware templating as
all calls goes to the DSL API library.&lt;/p&gt;

&lt;p&gt;Semantic aware templates can be used to enrich 
&lt;a href=&quot;/blog/2016/09/02/dsl-building/&quot;&gt;The DSL Way&lt;/a&gt; approach
too.&lt;/p&gt;

&lt;p&gt;Let’s consider examples.&lt;/p&gt;

&lt;h1 id=&quot;a-dsl-example&quot;&gt;A DSL example&lt;/h1&gt;

&lt;p&gt;I will be using &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; as an IDE 
and &lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; as \(Target Language \) below. Suppose
we have a DSL API library for logger configuration implemented in Kotlin. An
evaluation of &lt;code&gt;log4j&lt;/code&gt; function yield a logger configuration 
(e.g. for &lt;a href=&quot;http://logging.apache.org/log4j/1.2/&quot;&gt;Log4j&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;Say we have the following code to setup
&lt;a href=&quot;/blog/2016/09/09/log4j-dsl/&quot;&gt;loggers&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;category2warn&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WARN&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The goal is to configure a number of loggers in the exactly 
same way. Thanks to Kotlin language features, one is allowed to use a 
loop, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;listOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;A&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;B&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;C&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;category2warn.$it&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WARN&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This is a straitforward example of a template engine. There 
is nothing specific to be done to have a template engine at all. A mix 
of languge features and DSL API library calls forms the template engine.&lt;/p&gt;

&lt;p&gt;There are no loops support in the logger configuration itself, 
but thats to DSL API we are allowed to loop over several categories 
to generate all definitions.&lt;/p&gt;

&lt;p&gt;The following part is now a template:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; 
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;category2warn.$it&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WARN&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;One may go further and decide to extract the collection of categoring into 
a function. So we turn the logger configuration code into the following&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;listAllRootPackages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;category2warn.$it&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WARN&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we assume the &lt;code&gt;listAllRootPackages()&lt;/code&gt; to return a list of 
categories. There is no longer necessary to have this 
function to return a constant list. Instead, it can be implemented
as we like it to, e.g. it may scan an application package to collect
all possible root categories. It may use some resources as the input.&lt;/p&gt;

&lt;p&gt;Overall, this is the way to turn a static (and declarative) logger 
configuration to a flexible thing. It is now psedo-declarative. Meaning
there is another program, that yields a declarative configuration script
during a build phase. On that phase all templates are getting substituted.&lt;/p&gt;

&lt;p&gt;A next step is to extract the actual category setup code (a template)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;listAllRootPackages&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forEach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;declareCategory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At that point we have a shared library, where a category is declared 
in the &lt;em&gt;right&lt;/em&gt; way and reused. Next we use a function aka template all other 
the place.&lt;/p&gt;

&lt;h1 id=&quot;closing&quot;&gt;Closing&lt;/h1&gt;

&lt;p&gt;The examples above show how a general purpose language can 
be turned into a powerfull templating engine for any DSL APIs.&lt;/p&gt;

&lt;p&gt;It turns out that a general purpose language features turning 
it to a powerfull template engine for a given DSL. It’s up to 
a developer to decide which features to use. The only requirement
is to have a properly designed DSL API, so that such transformations 
were possible.&lt;/p&gt;

&lt;p&gt;The example below illustrates a side-effect or a benefit of using 
&lt;a href=&quot;/blog/2016/09/02/dsl-building/&quot;&gt;The DSL Way&lt;/a&gt;
to extend an IDE &lt;strong&gt;without&lt;/strong&gt; writing any IDE specific code.
It shows how powerfull an \(Original Launguage\) can be
form the \(Target Language\) perspective.&lt;/p&gt;

&lt;p&gt;You may take a look to
&lt;a href=&quot;/blog/2016/09/09/log4j-dsl/&quot;&gt;the post&lt;/a&gt;
for more formal DSL description for a logger configurations.&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="dsl" /><category term="the dsl way" /><category term="kotlin" /><category term="jvm" /><category term="ide" /><summary>Welcome a powerful templating engine that 
is available for every DSL in a general 
purpose language.</summary></entry><entry><title>Crafting Log4j Configuration DSL</title><link href="/blog/2016/09/09/log4j-dsl/" rel="alternate" type="text/html" title="Crafting Log4j Configuration DSL" /><published>2016-09-09T00:00:00+00:00</published><updated>2016-09-09T00:00:00+00:00</updated><id>/blog/2016/09/09/log4j-dsl</id><content type="html" xml:base="/blog/2016/09/09/log4j-dsl/">&lt;p&gt;In this post I show how to implement The DSL Way to manage 
Log4j configuration and extend an IDE without writing a plugin for it&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;http://logging.apache.org/log4j/1.2/&quot;&gt;Log4j&lt;/a&gt; configuration can be 
either in &lt;code&gt;.xml&lt;/code&gt; file or in &lt;code&gt;.properties&lt;/code&gt; files. Both formats are not 
supported well in IDEs.&lt;/p&gt;

&lt;p&gt;I’ll show how to create a decent IDE support for Log4j configuration files
&lt;em&gt;without&lt;/em&gt; writing an IDE plugin at all. We illustrate 
how &lt;a href=&quot;/blog/2016/09/02/dsl-building/&quot;&gt;The DSL Way&lt;/a&gt; is applied here.&lt;/p&gt;

&lt;h1 id=&quot;the-basic-assumptions&quot;&gt;The Basic Assumptions&lt;/h1&gt;

&lt;p&gt;I decided to use &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; as an IDE 
and &lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; as \(Target Language \).&lt;/p&gt;

&lt;p&gt;Kotlin is a static typed opensource language by JetBrains. It’s easy to learn
and use. For us it’s vital that is has a static typed 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html&quot;&gt;DSLs&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-original-language&quot;&gt;The Original Language&lt;/h1&gt;

&lt;p&gt;A configuration of a Log4j loggers looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt; 
 &lt;span class=&quot;na&quot;&gt;log4j.rootLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ERROR,stdout&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;log4j.logger.corp.mega&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;
 &lt;span class=&quot;c&quot;&gt;# meaningful comment goes here&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;log4j.logger.corp.mega.itl.web.metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;log4j.appender.stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.ConsoleAppender&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;log4j.appender.stdout.layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.PatternLayout&lt;/span&gt;
 &lt;span class=&quot;na&quot;&gt;log4j.appender.stdout.layout.ConversionPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;a-transformation&quot;&gt;A Transformation&lt;/h1&gt;

&lt;p&gt;Let’s implement the following scheme for Log4j configurations in &lt;code&gt;.properties&lt;/code&gt; file format.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\begin{array}[c]{ccccc}

&amp;&amp;DSL Library \\
&amp;&amp; \Big\uparrow \mbox{uses}\\
Log4j .properties &amp; \xrightarrow{\mbox{generate}} &amp; Generated Code &amp; \xrightarrow{\mbox{execute}} &amp; Log4j .properties \\
&amp;&amp; Kotlin Code \\
\end{array}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;See &lt;a href=&quot;/blog/2016/09/02/dsl-building/&quot;&gt;The DSL Way&lt;/a&gt; post for more details on the approach&lt;/p&gt;

&lt;p&gt;The implementation of \(generate\) and \(execute\) transitions is an engineering task of average complexity.
Below I focus mostly on a creativity part – on a build of a DSL API that provides good readability, refactoring 
and find-usages in an IDE&lt;/p&gt;

&lt;h1 id=&quot;building-a-dsls&quot;&gt;Building a DSLs&lt;/h1&gt;

&lt;p&gt;Creating a DSL is a repeating process. You create a first version of it, check how it looks and how one 
can use it. Next some improvements are done. Next you repeat. At some point you have a nice solution.&lt;/p&gt;

&lt;p&gt;Building a DSL requires detailed knowledge of \(Target Language\), you should understand how 
to translate any strings into some valid expression in your language.
I would recommend checking the following articles on &lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; to learn 
more about how DSLs are created:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/type-safe-builders.html&quot;&gt;Type-Safe builder in Kotlin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/delegated-properties.html&quot;&gt;Delegated properties&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/reference/operator-overloading.html&quot;&gt;Operator overloading&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kotlinlang.org/docs/tutorials/koans.html&quot;&gt;Kotlin Koans&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;step-0-a-straightforward-dsl&quot;&gt;Step 0. A Straightforward DSL&lt;/h1&gt;

&lt;p&gt;We start with simplistic thing.&lt;br /&gt;
As a starting point we need an entry function &lt;code&gt;log4j&lt;/code&gt;, a builder interface &lt;code&gt;Log4J&lt;/code&gt; with 
two methods &lt;code&gt;comment&lt;/code&gt; and &lt;code&gt;param&lt;/code&gt;. &lt;code&gt;Log4JBase&lt;/code&gt; is added here for compatibility with future
code samples.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; 
&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JBase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JBase&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;log4j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please follow to &lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; documentation for better understanting 
of the code above.&lt;/p&gt;

&lt;p&gt;This allows us to \(generate\) the following Kotlin code for a Logger configurations&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt; &lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.rootLogger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ERROR,stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.logger.corp.mega&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;meaningful comment goes here&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.logger.corp.mega.itl.web.metrics&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.ConsoleAppender&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout.layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.PatternLayout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout.layout.ConversionPattern&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At that point we have a trivial DSL. Next we will be improving it. There is still no support 
for semantic checks or model. We now have all Kotlin language features opened for crafting 
a &lt;code&gt;.properties&lt;/code&gt; file. The DSL Way handles &lt;code&gt;.properties&lt;/code&gt; escaping allowing us to write strings as is.&lt;/p&gt;

&lt;p&gt;Using Kotlin here creates a way to meta-extend the original format. We are able now to 
use functions, conditions, string manipulation, libraries and everything we have in Kotlin. 
All such tools are projected into the \(Original Language\), a &lt;code&gt;.properties&lt;/code&gt; file. A \(generator\) 
can be smart to generate a compact code with use of Kotlin features. It may, for example,
fold duplicates into loops or function calls.&lt;/p&gt;

&lt;p&gt;Let’s make the DSL for Log4j configuration more expressive and readable&lt;/p&gt;

&lt;h1 id=&quot;step-1-improving-the-dsl&quot;&gt;Step 1. Improving the DSL&lt;/h1&gt;

&lt;p&gt;There is a wellknown parameter &lt;code&gt;log4j.rootLogger&lt;/code&gt;. IDE code completion is unaware about
a fancy property one should use. A user also may not know which is the right property. 
Finally, one may misprint the name of it. 
Let’s replace it with an explicit call. For an 
&lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension property&lt;/a&gt; in Kotlin is used&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;Log4J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.rootLogger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Read API is not implemented&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the improved part is&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;rootLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;//instead of&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.rootLogger&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-2-builders-for-appenders&quot;&gt;Step 2. Builders for Appenders&lt;/h1&gt;

&lt;p&gt;Let’s take a look on the code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.ConsoleAppender&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout.layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.PatternLayout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout.layout.ConversionPattern&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Log4j uses a key name encoding to achieve the goal. This requires one to re-type similar strings 
on and one. This may be a source of typos. From the other hand, this can be hard to read.
Let’s avoid constant repeating strings and make those lines more expressive. For that we define
the following &lt;a href=&quot;https://kotlinlang.org/docs/reference/extensions.html&quot;&gt;extension methods&lt;/a&gt; in the 
\(DSL Library\).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Log4J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;appender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JAppender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           
&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JAppender&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JBase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JLayout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JBase&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And this allows us to tune the \(generator\) to have the following Kotlin code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;c1&quot;&gt;//use this&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;appender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.ConsoleAppender&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.PatternLayout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;ConversionPattern&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//instead of&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.ConsoleAppender&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout.layout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;org.apache.log4j.PatternLayout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.appender.stdout.layout.ConversionPattern&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;             
   &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;step-3-builder-for-loggers&quot;&gt;Step 3. Builder for Loggers&lt;/h1&gt;

&lt;p&gt;Let’s simplify the rest of Log4j configuration code. Consider the following code&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;rootLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;ERROR,stdout&amp;quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.logger.corp.mega&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;param&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;log4j.additivity.corp.mega&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;false&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Here we refer to a logger called &lt;code&gt;stdout&lt;/code&gt; by typing it’s name as a string. There are several keys used to encode
the logger. Let’s normalize values and improve readability by spliting appender binging and level.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JBase&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;additivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JLevel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;appenders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Log4J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Log4J&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rootLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;builder&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log4JLogger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Unit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now the generated code would look like that&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;rootLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;appenders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;corp.mega&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;additivity&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now one can specify parameters explicitly. And it reads way better.&lt;/p&gt;

&lt;h1 id=&quot;step-1--2--3-outcome&quot;&gt;Step 1 &amp;amp; 2 &amp;amp; 3. Outcome&lt;/h1&gt;

&lt;p&gt;At that point we managed to remove all common strings, encoded keys and values. Readability is now 
better as we replaced all bare &lt;code&gt;Log4J#param&lt;/code&gt; calls with a dedicated API calls from a dedicated builders.&lt;/p&gt;

&lt;p&gt;There is a domain model created. We now have Logger, Appender, Layout entities. Each with a dedicated 
interfaces. Semantic checks are now implemented on compilation, meaning incorrect code would not compile at all. 
The rest of checks are implemented in the \(emitter\) implementation from the other.&lt;/p&gt;

&lt;p&gt;Thanks to Kotlin static typed DSLs, IntelliJ IDEA understands code and provides code completion and navigation
for every expression.&lt;/p&gt;

&lt;p&gt;The DSL code is more typo-resistant. All strings are now used once. There are no more tricky-encoded keys too. It’ 
much harder now to author a misprint.&lt;/p&gt;

&lt;p&gt;The generated DSL code is more expressive. One can read it and understand the meaning. There is no requirement 
to know Kotlin for that&lt;/p&gt;

&lt;h1 id=&quot;step-4-find-usages-and-rename-for-appenders&quot;&gt;Step 4. Find Usages and Rename for Appenders&lt;/h1&gt;

&lt;p&gt;Now we are ready to implement an IDE feature. We’d like to be able to rename appenders as well as be able to see
where a given appender is used.&lt;/p&gt;

&lt;p&gt;For every possible IDE feature we need for \(Original Language\). We need to find an equivalent construction 
in the \(Target Language\) and a similarly looking IDE feature for \(Target Language\). Next we shall
find the way to use such construction in the DSL.&lt;/p&gt;

&lt;p&gt;For appender usages and rename feature the Kotlin variable declaration suites the best.&lt;/p&gt;

&lt;p&gt;We introduce &lt;code&gt;Log4JAppenderRef&lt;/code&gt; interface. Make &lt;code&gt;Log4J#appender&lt;/code&gt; function to return it. Next, in logger
configuration we replace the type of appender from &lt;code&gt;String&lt;/code&gt; into &lt;code&gt;Log4JAppenderRef&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now appender usages are found via the respective variable usages. The appender name is specified only 
in &lt;code&gt;Log4JLogger#appender&lt;/code&gt; function call. All other places uses the variable. Not it’s safe to 
rename appender by changing this field.&lt;/p&gt;

&lt;h1 id=&quot;outcome&quot;&gt;Outcome&lt;/h1&gt;

&lt;p&gt;This is a DSL for Log4j configurations usage example&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConsoleAppender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PatternLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;conversionPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rootLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;appenders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;corp.mega.itl.web.metrics&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;corp.mega&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;appenders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Creating a DSL is a iterative process. It is strongly dependent on subjective things like ‘readability’ 
or ‘good looking’. Different DSLs are possible. And the way they are created depends on one’s taste.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;By those steps we turned a &lt;code&gt;.properties&lt;/code&gt; file of Log4j configuration into a well-looking DSL code in Kotlin. 
The DSL Way is implemented with that DSL and provides IDE support for authoring and reading Log4j configuration
files.&lt;/p&gt;

&lt;p&gt;The \(generator\) and \(execution\) parts implementation details are left uncovered. You may ask me
for details in the comments.&lt;/p&gt;

&lt;p&gt;The DSL we created illustrates how once can turn a IDE language support problem 
into &lt;a href=&quot;/blog/2016/09/02/dsl-building/&quot;&gt;The DSL Way&lt;/a&gt; approach.&lt;/p&gt;

&lt;p&gt;You may have a look (or contribute) to the project sources on &lt;a href=&quot;https://github.com/jonnyzzz/Log4j2DSL&quot;&gt;my GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You may follow to &lt;a href=&quot;/blog/2016/03/08/gradle-for-dsl/&quot;&gt;this post&lt;/a&gt; for details on how to create 
a zero-configuration package for such DSLs and for The DSL Way approach.&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="log4j" /><category term="logging" /><category term="dsl" /><category term="the dsl way" /><category term="kotlin" /><category term="jvm" /><category term="ide" /><summary>In this post I show how to implement The DSL Way to manage 
Log4j configuration and extend an IDE without writing a plugin for it</summary></entry><entry><title>Building DSL Instead of an IDE Plugin</title><link href="/blog/2016/09/02/dsl-building/" rel="alternate" type="text/html" title="Building DSL Instead of an IDE Plugin" /><published>2016-09-02T00:00:00+00:00</published><updated>2016-09-02T00:00:00+00:00</updated><id>/blog/2016/09/02/dsl-building</id><content type="html" xml:base="/blog/2016/09/02/dsl-building/">&lt;p&gt;An alternative way of doing IDE support without any IDE plugin code for not yet supported and specific languages.&lt;/p&gt;

&lt;h1 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h1&gt;

&lt;p&gt;Most of us use quite smart IDEs daily with languages we use for development. IDE helps us not only
to highlight keywords. It is able to check types, show errors, do refactoring, complete and analyze code.&lt;/p&gt;

&lt;p&gt;Of course we spent some time working with languages that are not (or weakly) supported by an IDE. Those languages
could be used for configurations files, logger settings, business rules, scripts, text files and so on.
This is a specific domain where a language is used. It can be hard to read code on that language, it can
be also hard to write it too. One may easily waste time writing incorrect code.&lt;/p&gt;

&lt;p&gt;It’s the lack of decent IDE support for such languages. Let’s see how we can solve it&lt;/p&gt;

&lt;p&gt;I will use \(Original Language\) term to refer to an unsupported language.&lt;/p&gt;

&lt;h1 id=&quot;a-trivial-solution&quot;&gt;A Trivial Solution&lt;/h1&gt;

&lt;p&gt;Say we have an \(Original Language\) we use, and there is no decent support for it in IDE.&lt;/p&gt;

&lt;p&gt;The very first solution is to replace the \(Original Language\) with some other language.&lt;/p&gt;

&lt;p&gt;Suppose the \(Original Language\) cannot be thrown away. And it’s likely there is a code on that language. 
There has to be a system that accepts it too.&lt;/p&gt;

&lt;p&gt;Okay. We may implement a plugin for our an IDE to support it.&lt;/p&gt;

&lt;p&gt;Writing a plugin is a complicated task. One needs to know IDE API. Moreover, you’ll implement a parsing 
so that it’d be fast enough to play well in IDE. The parser should also support invalid text input too, e.g. 
incorrect code that is being entered. That can be tricky.&lt;/p&gt;

&lt;p&gt;Well, a parser may not be necessary, if, say IDE support some base language, e.g. &lt;code&gt;.properties&lt;/code&gt; or &lt;code&gt;.xml&lt;/code&gt; format.
But in that case a deep IDE APIs has to be used.&lt;/p&gt;

&lt;p&gt;Finally, a plugin will depend on IDE. Meaning it has to be updated to work with newer IDE versions. It’s not in
our control to lock an IDE version.&lt;/p&gt;

&lt;p&gt;This can be done, but, there’s an &lt;strong&gt;alternative way&lt;/strong&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-dsl-way&quot;&gt;The DSL Way&lt;/h1&gt;

&lt;p&gt;Everyone uses their IDE. And of course there is a language we use daily. For example, it could be
&lt;a href=&quot;http://www.oracle.com/technetwork/java/index.html&quot;&gt;Java&lt;/a&gt;,
&lt;a href=&quot;http://www.scala-lang.org/&quot;&gt;Scala&lt;/a&gt;,
&lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt;,
&lt;a href=&quot;https://golang.org/&quot;&gt;Go&lt;/a&gt;, 
&lt;a href=&quot;http://www.groovy-lang.org/&quot;&gt;Groovy&lt;/a&gt;.
We know for sure, an IDE is smart on those languages.&lt;/p&gt;

&lt;p&gt;My idea is to an \(Original Language\), which is unsupported by an IDE, into a code in a supported language. 
I will use a \(Target Language \) term for it. Next, run the 
code to have a code in a \(Original Language\) back. As shown on the diagram below:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{equation}
\begin{array}[c]{ccccc}

&amp;&amp;API Library \\
&amp;&amp; \Big\uparrow \mbox{uses}\\
Original Language &amp; \xrightarrow{\mbox{generate}} &amp; Generated Code &amp; \xrightarrow{\mbox{execute}} &amp; Original Language \\
&amp;&amp; Target Language \\
\end{array}
\end{equation} %]]&gt;&lt;/script&gt;

&lt;p&gt;To implement it we need&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;\(generator\), a program that reads a valid code in the \(Original Language\) and generates a code in the \(Target Language \)&lt;/li&gt;
  &lt;li&gt;\(API Library\), a peace of code that includes all definition required for a generated code to be more readable&lt;/li&gt;
  &lt;li&gt;\(execute\), a peace of code that makes compiled generated code in the \(Target Language \) to emit a code in the \(Original Language\)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The goal of those transformations is to have a readable \(Generated Code \). Refactorings for \(Generated Code \) 
in \(Target Language \) are projected to the \(Original Language\).&lt;/p&gt;

&lt;h1 id=&quot;selecting-a-target-language&quot;&gt;Selecting a Target Language&lt;/h1&gt;

&lt;p&gt;Most we need from a \( Target Language \) is a decent IDE support.&lt;/p&gt;

&lt;p&gt;We shall select a \( Target Language \) with a good readability for everyone. 
Languages with better DSL or fluent APIs capabilities are likely to play better.&lt;/p&gt;

&lt;p&gt;Static typing is a nice to have. It makes it harder to make a error. Moreover, 
it’s likely to require no setup for an IDE to work. For some dynamic languages
an additional &lt;a href=&quot;https://confluence.jetbrains.com/display/GRVY/Scripting+IDE+for+DSL+awareness&quot;&gt;helper&lt;/a&gt; may be required.&lt;/p&gt;

&lt;h1 id=&quot;the-dsl-way-benefits&quot;&gt;The DSL Way Benefits&lt;/h1&gt;

&lt;p&gt;The DSL Way approach projects all features from an \( Target Language \) into a \(Original Language\). 
We can say an \(Original Language\) is extended with all possible high-level features of a \( Target Language \).
For example, we can use functions, loops, conditions, libraries and so on. There is no need to 
have a support for such constructs in the \(Original Language\).
One may also tune a \(generator\) to say fold duplicates in the input into a loops or functions.&lt;/p&gt;

&lt;p&gt;Thanks to \(API Library\) we have good readability. It’s a creativity part here. But if implemented correctly, 
it improves readability drastically.&lt;/p&gt;

&lt;p&gt;The parsing is easier to implement for The DSL Way approach. We only need to have it supporting valid inputs. By induction,
we start with a valid code and generate a valid code. It’s way more complex for The IDE Plugin case.&lt;/p&gt;

&lt;p&gt;Refactorings and code analysis features for a \(Target Language \) are projected to a \(Original Language\). All 
what is needed is to design \(API Library\) and \(generator\) in the right way. Say you need a &lt;em&gt;find usages&lt;/em&gt; 
for some domain object. To have it, you may make a \(generator\) declare and use a variable for such entities. 
Once variables are used, rename feature is implemented for free.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;p&gt;Let’s consider &lt;a href=&quot;http://logging.apache.org/log4j/1.2/&quot;&gt;Log4j&lt;/a&gt; configuration in &lt;code&gt;.properties&lt;/code&gt; file as \(Original Language\).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-properties&quot; data-lang=&quot;properties&quot;&gt;&lt;span class=&quot;na&quot;&gt;log4j.rootLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ERROR,stdout&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;log4j.logger.corp.mega&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INFO,stdout&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# meaningful comment goes here&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;log4j.logger.corp.mega.itl.web.metrics&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;log4j.appender.stdout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.ConsoleAppender&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;log4j.appender.stdout.layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;org.apache.log4j.PatternLayout&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;log4j.appender.stdout.layout.ConversionPattern&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I decided to use &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ IDEA&lt;/a&gt; as IDE 
and &lt;a href=&quot;https://kotlinlang.org&quot;&gt;Kotlin&lt;/a&gt; as \(Target Language \).&lt;/p&gt;

&lt;p&gt;The configuration below can be turned into the following Kotlin code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-kotlin&quot; data-lang=&quot;kotlin&quot;&gt;&lt;span class=&quot;n&quot;&gt;log4j&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;stdout&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;appender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ConsoleAppender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stdout&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PatternLayout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;conversionPattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;%p\t%d{ISO8601}\t%r\t%c\t[%t]\t%m%n&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rootLogger&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;appenders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;corp.mega.itl.web.metrics&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;corp.mega&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INFO&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;appenders&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stdout&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The evaluation of this Kotlin program yields the similar &lt;code&gt;.properties&lt;/code&gt; file back.&lt;/p&gt;

&lt;p&gt;The DSL code is way easier to read and to write.&lt;/p&gt;

&lt;p&gt;Thanks to Kotlin static typed DSLs, IntelliJ IDEA understands the code well, warns all incorrect usages,
code complete all possibilities.&lt;/p&gt;

&lt;p&gt;Moreover, using such DSL is the way to implement automatic tests for your log4j configurations.
One may easily setup automatic tests task as a part of their continuous integration, since the code has no dependency on 
an IDE part.&lt;/p&gt;

&lt;p&gt;It opens the way to reuse common configuration files as well as to run.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;In the post we discussed The DSL Way of doing an IDE support &lt;strong&gt;without&lt;/strong&gt; writing any IDE related code. 
The created DSL can be used not only with IDE. It can easily be re-used in any possible applications like code sharing,
automatic test, continuous integration and so on.&lt;/p&gt;

&lt;p&gt;You may follow to &lt;a href=&quot;/blog/2016/03/08/gradle-for-dsl/&quot;&gt;this post&lt;/a&gt; for details on how to create decent package
for The DSL Way toolset.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;PS&lt;/em&gt;. Do you have more examples for \(Original Language\)? Please share in comments below&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="dsl" /><category term="kotlin" /><category term="jvm" /><category term="ide" /><category term="the dsl way" /><summary>An alternative way of doing IDE support without any IDE plugin code for not yet supported and specific languages.</summary></entry><entry><title>Proxy calls between classloaders</title><link href="/blog/2016/08/29/classloader-proxy/" rel="alternate" type="text/html" title="Proxy calls between classloaders" /><published>2016-08-29T00:00:00+00:00</published><updated>2016-08-29T00:00:00+00:00</updated><id>/blog/2016/08/29/classloader-proxy</id><content type="html" xml:base="/blog/2016/08/29/classloader-proxy/">&lt;p&gt;There are so many tricky stories around on classloaders in Java. Classloading is a powerful technique from the 
one hand. From the other it’s the place where it so easy to make mistakes. Some are simply afraid using them.&lt;/p&gt;

&lt;p&gt;I solved a simple puzzle with isolating classes I want to share.&lt;/p&gt;

&lt;h1 id=&quot;backgrounds&quot;&gt;Backgrounds&lt;/h1&gt;

&lt;p&gt;There are integration tests in a project. Those integration tests starts several web applications, 
bind them together and to some black-box tests. 
The vital part of such tests is to provide a classpath isolation between test classes and classes 
of applications that are running.&lt;/p&gt;

&lt;p&gt;To start each of those web servers I use Jetty Embedded. Well, I load Jetty classes for each 
web application I start within a separate classloaders hierarchy. I like Jetty, but I want to 
isolate any side effects, thus loading it several times, thanks it’s tiny, is the way to go.&lt;/p&gt;

&lt;p&gt;All helper classes to start/stop/configure web applications forms an API that helps for a tests run.&lt;/p&gt;

&lt;p&gt;It turns out to be tricky to isolate those runner classes from a test classpath. From one hand we’d 
like to have an APIs available for test class to use, from the other hand, it is still required 
to make sure the classpath of web application, hence Jetty Embedded it not polluted with test module 
dependencies.&lt;/p&gt;

&lt;h1 id=&quot;the-problem&quot;&gt;The Problem&lt;/h1&gt;

&lt;p&gt;Say we have and &lt;code&gt;API.jar&lt;/code&gt; and &lt;code&gt;IMPL.jar&lt;/code&gt;. We are looking on how to load the &lt;code&gt;IMPL.jar&lt;/code&gt; with a clean
classpath and still have a change to bind it to the &lt;code&gt;API.jar&lt;/code&gt; that is a part of some other huge classpath.&lt;/p&gt;

&lt;p&gt;The goal is to the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Test framework uses &lt;code&gt;API.jar&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;IMPL.jar also uses &lt;code&gt;API.jar&lt;/code&gt;, but it does not see any test-related classes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The problem is that it is test framework / test runner that loading test classes. We are unlikely to change that.
Otherwise we have to take care of test runners, IDEs, CI, debugging.&lt;/p&gt;

&lt;h1 id=&quot;obvious-solutions&quot;&gt;Obvious solutions&lt;/h1&gt;
&lt;p&gt;Load all classes within one JVM. This violates the task, but may be the easiest way. The future issue here 
can be a jar hell, if one has different libraries used in the application / tests or the loader.&lt;/p&gt;

&lt;p&gt;Another solution could be in using OSGi. It’s a complicated framework that uses security manager to isolate
classes visibility.&lt;/p&gt;

&lt;p&gt;Future solution with Java 9 modules is also a way to go. But for now, it’s too early.&lt;/p&gt;

&lt;h1 id=&quot;just-classloading&quot;&gt;Just Classloading&lt;/h1&gt;

&lt;p&gt;The most simple solution is to load classes with &lt;em&gt;child-first&lt;/em&gt; classloader. This is &lt;strong&gt;NOT&lt;/strong&gt; the way
to isolate dependencies, but at least this is the way to have IMPL.jar dependencies win on classloading.&lt;/p&gt;

&lt;p&gt;There are at least two things to take case of&lt;/p&gt;

&lt;h2 id=&quot;case-1--jvm-classes&quot;&gt;Case 1 : JVM classes&lt;/h2&gt;
&lt;p&gt;Child first classloaders should still load JVM classes first.&lt;/p&gt;

&lt;p&gt;It may turn out the classpath contains some classes that are now included into JVM. Those classes are 
still included into a package to provide a compatibility with older JVM versions. Those classes are 
simply ignored by the JVM when default classloading is used.&lt;/p&gt;

&lt;p&gt;It may generate tricky issues when child first classloader attempts to load wrong classes since 
those classes will likely register themselves in the OS.&lt;/p&gt;

&lt;p&gt;The solution here is the following. We crete a classloader:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;  &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jvmClassLoaderDelegate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URLClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This classloader is the first one to check in the child classloader implementation. It is the easiest way I know
to delegate to the system classloader. The Classloader itself uses native method in order to delegate to it.&lt;/p&gt;

&lt;h2 id=&quot;case-2-resources&quot;&gt;Case 2: Resources&lt;/h2&gt;

&lt;p&gt;It’s so easy to implement child first classloader. It is also so easy to forget about resources. The child first
strategy must be implemented for resources too. Otherwise, it may break some libraries which uses resources.&lt;/p&gt;

&lt;p&gt;Finally classloading with child first delegation does not solve the initial problem. It does not allow to 
fully isolate test classes (e.g. test framework) from &lt;code&gt;IMPL.jar&lt;/code&gt; classes&lt;/p&gt;

&lt;h1 id=&quot;the-proxy-trick&quot;&gt;The Proxy Trick&lt;/h1&gt;

&lt;p&gt;The idea is to load &lt;code&gt;API.jar&lt;/code&gt; twice and than use to &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt; to bind interfaces part from 
tests classspath to implementations.&lt;/p&gt;

&lt;p&gt;A trick is to have yet another classloader with &lt;code&gt;null&lt;/code&gt; as parent. The loader classpath includes 
only &lt;code&gt;API.jar&lt;/code&gt;, &lt;code&gt;IMPL.jar&lt;/code&gt; and dependencies of &lt;code&gt;IMPL.jar&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Next we create a &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt; to create an instance of an API interface that delegates
to the implementation class that is loaded by the other classloader. We are not able to cast here,
since we have &lt;code&gt;API.jar&lt;/code&gt; loaded twice.&lt;/p&gt;

&lt;p&gt;Unfortunately, this will only work when API interface methods uses JVM classes as parameters 
and return types. There are no common 
classloaders between &lt;code&gt;IMPL.jar&lt;/code&gt; and tests, thus ClassCastException will be thrown for other types.&lt;/p&gt;

&lt;h1 id=&quot;recursive-proxy-trick&quot;&gt;Recursive Proxy Trick&lt;/h1&gt;

&lt;p&gt;The last limitation can be solved by a bit more complicated trick of 3 steps&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create a proxy for API interface&lt;/li&gt;
  &lt;li&gt;In the implementation, check all parameter types and proxy every parameter with non system classloader&lt;/li&gt;
  &lt;li&gt;In the implementation, proxy return values in opposite way&lt;/li&gt;
  &lt;li&gt;Apply the following proxies recursively if &lt;code&gt;API.jar&lt;/code&gt; interfaces are complex&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This approach allows to use JVM classes and &lt;code&gt;API.jar&lt;/code&gt; interfaces between the bound. It will not work 
with classes, since it is the limitation of &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The overall trick is implemented as follows&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/*&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * creates a proxy for an object obj loaded in sourceLoader hierarchy &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * that is visible in destLoader as destClass interface&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * assuming all methods of destClass are implemented in obj&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * exactly with same signature&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;*/&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newProxyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;destClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;threadClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameterTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                    
                    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sourceTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;
                      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realMethod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgTypes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mappedArgs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getReturnType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sourceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getReturnType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                  &lt;span class=&quot;o&quot;&gt;}));&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;limitations&quot;&gt;Limitations&lt;/h1&gt;

&lt;p&gt;Current implementation works only with API interfaces. It does not allow sharing classes or enums. 
Enums from &lt;code&gt;API.jar&lt;/code&gt; can be easily supported be adding an explicit checking. 
Classes cannot be mapped this way. At least because it is not allowed in &lt;code&gt;java.lang.reflect.Proxy&lt;/code&gt;. 
From the other hand, it’s not clear how class state can be transferred at all.&lt;/p&gt;

&lt;h1 id=&quot;side-note&quot;&gt;Side Note&lt;/h1&gt;

&lt;p&gt;It may be necessary to change &lt;code&gt;Thread#contextClassloader&lt;/code&gt; to the right one before calling a 
method from different classloader. This trick makes dynamic classloading in libraries work 
correctly for some cases. Otherwise, there is a possibility that a class from another classpath
is created from &lt;code&gt;IMPL.jar&lt;/code&gt; code (say, via &lt;code&gt;Class#forName&lt;/code&gt; call)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I used the approach to implement integration tests that are running several web application 
instances within one JVM. All instances are now isolated from each other and from tests classpath.&lt;/p&gt;

&lt;p&gt;Running everything within one JVM helps to avoid issues with leaked processes or applications as well as
allows one to debug every application or even all applications easily!&lt;/p&gt;</content><author><name>Eugene Petrenko</name><email>eugene.petrenko@gmail.com</email></author><category term="java" /><category term="jvm" /><category term="classloaders" /><summary>There are so many tricky stories around on classloaders in Java. Classloading is a powerful technique from the 
one hand. From the other it’s the place where it so easy to make mistakes. Some are simply afraid using them.</summary></entry></feed>
